=head1 NOMBRE
X<function> X<función>

perlfunc - Funciones predefinidas en Perl

=head1 DESCRIPCIÓN

Las funciones de esta sección pueden servir como términos en una expresión.
Se agrupan en dos categorías principales: operadores de listas y operadores unarios con nombre.  Difieren en su relación de precedencia cuando son seguidos por una coma.  (Vea la tabla de precedencia, en L<perlop>).  Los operadores de listas toman más de un argumento, mientras que los operadores unarios nunca toman más de un argumento.  Así, una coma determina al argumento de un operador unario, pero sólo sirve de separación entre argumentos en un operador de listas.  Un operador unario generalmente proveé de un contexto escalar a su argumento, mientras que un operador de listas puede proveer tanto de un contexto escalar o de un contexto de lista, a sus argumentos.  Si aparecen ambos, los argumentos escalares van antes que el argumento de lista, y solo puede existir un argumento de lista.  Por ejemplo, splice() tiene tres argumentos escalares seguidos por una lista, mientras que gethostbyname() tiene cuatro argumentos escalares.

En las descripciones sintácticas que siguen a continuación, los operadores de listas que esperan una lista (y proveen de un contexto lista para los elementos de la lista) se muestran con un argumento así: LISTA.  Tal lista puede consistir en cualquier combinación de argumentos escalares o valores de lista; los valores de lista serán incluidos en la lista como si cada elemento individual fuera interpolado en ese punto en la lista, formando un largo y unidimensional valor de lista.
Las comas deberían separar elementos literales de la LISTA.

Cualquier función en la lista de abajo se puede usar tanto con paréntesis como sin ellos, rodeando sus argumentos.  (Las descripciones sintácticas omiten los paréntesis).  Si usa los paréntesis, la simple (pero ocasionalmente sorprendente) regla es esta: Si I<se parece> a una función, por eso I<es> una función y la precedencia no importará.  De lo contrario es un operador de lista u operador unario, y la precedencia sí importa.  El espacio en blanco entre la función y el paréntesis izquierdo no cuenta, por lo que deberá tener cuidado en algunas ocasiones:

    print 1+2+4;	# Imprime 7.
    print(1+2) + 4;	# Imprime 3.
    print (1+2)+4;	# ¡También imprime 3!
    print +(1+2)+4;	# Imprime 7.
    print ((1+2)+4);	# Imprime 7.

Si ejecuta Perl con la opción B<-w> le avisará sobre todo esto.  Por ejemplo, la tercera línea de arriba produce:

    print (...) interpretado como función en la línea 1.
    Useless use of integer addition in void context at - line 1.
(Inútil uso de suma de enteros en contexto void en línea 1)

Unas pocas funciones no toman ningún argumento, por lo que funcionan tanto como operadores unarios como operadores de lista.  Estas incluyen funciones como C<time> y C<endpwent>.  Por ejemplo, C<time+86_400> siempre significa C<time() + 86_400>.

Para funciones que pueden ser usadas tanto en contexto escalar como en contexto de lista, un error no abortivo es indicado, generalmente, por un valor indefinido en el contexto escalar, y en contexto lista por una lista vacía.

Recuerde la siguiente regla importante: B<No hay regla> que relacione el comportamiento de una expresión en contexto lista a su comportamiento en contexto escalar, o viceversa.  Puede hacer dos cosas totalmente diferentes.
Cada operador y función decide qué clase de valor será más apropiado para devolver en contexto escalar.  Algunos operadores devuelven la longitud de la lista que se hubiera devuelto en contexto lista.  Algunos operadores devuelven el primer valor de la lista.  Algunos operadores devuelven el último valor de la lista.  Algunos operadores devuelven una cuenta del número de operaciones exitosas.  En general, ellos hacen lo que usted quiere, siempre que quiera coherencia.
X<contexto>

Un array con nombre, en contexto escalar, es muy diferente de lo que en un primer vistazo pudiera ser una lista en contexto escalar.  No puede conseguir que una lista como C<(1,2,3)> se convierta en contexto escalar porque el compilador conoce el contexto en tiempo de compilación.  Se generará aquí el operador coma, no la versión de construcción de listas.  Esto significa que nunca será una lista.

En general, funciones en Perl que sirven como envoltorios para llamadas al sistema ("syscalls") del mismo nombre (como chown(2), fork(2), closedir(2), etc.) devuelven verdadero cuando tienen éxito y C<undef> en otro caso, como se menciona en las descripciones de más abajo.  Esto es diferente de las interfaces en C, que devuelven C<-1> en caso de error.  Excepciones a esta regla incluyen a C<wait>, C<waitpid> y C<syscall>.  Llamadas al sistema también actualizan la variable especial C<$!> en caso de error.  Otras funciones no, excepto accidentalmente.

Hay módulos con expansiones que también pueden engancharse en el intérprete Perl para definir nuevas clases de expresiones basadas en palabras clave.  Pueden parecerse a funciones, pero también pueden ser complementamente diferentes.  La sintaxis que sigue al identificador se define enteramente por la expansión.  Si es usted un implantador, mire L<perlapi/PL_keyword_plugin> para informarse sobre este mecanismo.  Si está usando un módulo así, mire la documentación del módulo para ver los detalles de la sintaxis que define.

=head2 Funciones Perl por categoría
X<function> X<función>

Aquí están las funciones Perl (incluyen cosas que parecen funciones, como algunas palabras clave y operadores con nombre) agrupados por categoría.  Algunas funciones aparecen en más de un lugar.

=over 4

=item Functiones para ESCALARES o cadenas
X<scalar> X<string> X<character> X<escalar> X<cadena> X<carácter>

=for Pod::Functions =String

C<chomp>, C<chop>, C<chr>, C<crypt>, C<fc>, C<hex>, C<index>, C<lc>,
C<lcfirst>, C<length>, C<oct>, C<ord>, C<pack>, C<q//>, C<qq//>, C<reverse>,
C<rindex>, C<sprintf>, C<substr>, C<tr///>, C<uc>, C<ucfirst>, C<y///>

C<fc> sólo está disponible si la característica C<"fc"> está habilitada o si está prefijada con C<CORE::>.  La característica C<"fc"> se activa automáticamente con una declaración C<use v5.16> (o superior) en el ámbito actual.


=item Expresiones regulares y coincidencia de patrones
X<regular expression> X<regex> X<regexp> X<expresión regular>

=for Pod::Functions =Regexp

C<m//>, C<pos>, C<qr//>, C<quotemeta>, C<s///>, C<split>, C<study>

=item Funciones numéricas
X<numeric> X<number> X<trigonometric> X<trigonometry> X<numérico> X<número> X<trigonométrica> X<trigonomía>

=for Pod::Functions =Math

C<abs>, C<atan2>, C<cos>, C<exp>, C<hex>, C<int>, C<log>, C<oct>, C<rand>,
C<sin>, C<sqrt>, C<srand>

=item Funciones para @ARRAY reales
X<array>

=for Pod::Functions =ARRAY

C<each>, C<keys>, C<pop>, C<push>, C<shift>, C<splice>, C<unshift>, C<values>

=item Funciones para lista de datos
X<list> X<lista>

=for Pod::Functions =LIST

C<grep>, C<join>, C<map>, C<qw/STRING/>, C<reverse>, C<sort>, C<unpack>

=item Funciones %HASH reales
X<hash>

=for Pod::Functions =HASH

C<delete>, C<each>, C<exists>, C<keys>, C<values>

=item Funciones de Entrada y Salida
X<I/O> X<input> X<output> X<dbm> X<entrada> X<salida>

=for Pod::Functions =I/O

C<binmode>, C<close>, C<closedir>, C<dbmclose>, C<dbmopen>, C<die>, C<eof>,
C<fileno>, C<flock>, C<format>, C<getc>, C<print>, C<printf>, C<read>,
C<readdir>, C<readline> C<rewinddir>, C<say>, C<seek>, C<seekdir>, C<select>,
C<syscall>, C<sysread>, C<sysseek>, C<syswrite>, C<tell>, C<telldir>,
C<truncate>, C<warn>, C<write>

C<say> sólo está disponible si la característica C<"say"> está habilitada o si está prefijada con C<CORE::>.  La característica C<"say"> se activa automáticamente con una declaración C<use v5.10> (o superior) en el ámbito actual.

=item Funciones para registros o datos de longitud fija

=for Pod::Functions =Binary

C<pack>, C<read>, C<syscall>, C<sysread>, C<sysseek>, C<syswrite>, C<unpack>,
C<vec>

=item Funciones para identificadores de archivo, archivos y directorios
X<file> X<filehandle> X<directory> X<pipe> X<link> X<symlink> X<archivo> X<identificador de archivo> X<enlace>

=for Pod::Functions =File

C<chomp>, C<chop>, C<chr>, C<crypt>, C<hex>, C<index>, C<lc>, C<lcfirst>, C<length>, C<oct>, C<ord>, C<pack>, C<q//>, C<qq//>, C<reverse>, C<rindex>, C<sprintf>, C<substr>, C<tr///>, C<uc>, C<ucfirst>, C<y///>

=item Palabras clave relativas al control de flujo de su programa Perl
X<control flow> X<control de flujo>

=for Pod::Functions =Flow

C<break>, C<caller>, C<continue>, C<die>, C<do>,
C<dump>, C<eval>, C<evalbytes> C<exit>,
C<__FILE__>, C<goto>, C<last>, C<__LINE__>, C<next>, C<__PACKAGE__>,
C<redo>, C<return>, C<sub>, C<__SUB__>, C<wantarray>

C<break> sólo está disponible si se activa la característica experimental C<"switch"> o usando el prefijo C<CORE::>.  La característica C<"switch"> también habilita las sentencias C<default>, C<given> y C<when>, que están documentadas en L<perlsyn/"Sentencias Switch">.  La característica C<"switch"> se activa automáticamente con una declaración C<use v5.10> (o superior) en el ámbito actual.  En Perl v5.14 y anteriores, C<continue> requería la característica C<"switch">, al igual que las otras palabras clave.

C<evalbytes> sólo está disponible con la característica C<"evalbytes"> (vea L<feature>) o si está prefijada con C<CORE::>.  C<__SUB__> sólo está disponible con la característica C<"current_sub"> o si está prefijada con C<CORE::>.  Tanto la característica C<"evalbytes"> como la C<"current_sub"> son activadas de forma automática con una declaración C<use v5.16> (o superior) en el ámbito actual.

=item Palabras clave relacionadas con el ámbito

=for Pod::Functions =Namespace

C<caller>, C<import>, C<local>, C<my>, C<our>, C<package>, C<state>, C<use>

C<state> sólo está disponible si la característica C<"state"> está habilitada o si está prefijada con C<CORE::>.  La característica C<"state"> se activa automáticamente con una declaración C<use v5.10> (o superior) en el ámbito actual.

=item Funciones varias

=for Pod::Functions =Misc

C<defined>, C<formline>, C<lock>, C<prototype>, C<reset>, C<scalar>, C<undef>

=item Funciones para procesos y grupos de procesos
X<process> X<pid> X<process id> X<proceso> X<id proceso>

=for Pod::Functions =Process

C<alarm>, C<exec>, C<fork>, C<getpgrp>, C<getppid>, C<getpriority>, C<kill>,
C<pipe>, C<qx//>, C<readpipe>, C<setpgrp>,
C<setpriority>, C<sleep>, C<system>,
C<times>, C<wait>, C<waitpid>

=item Palabras clave relativas a los módulos Perl
X<module> X<módulo>

=for Pod::Functions =Modules

C<do>, C<import>, C<no>, C<package>, C<require>, C<use>

=item Palabras clave relativas a las clases y orientación a objetos
X<object> X<class> X<package> X<objeto> X<clase> X<paquete>

=for Pod::Functions =Objects

C<bless>, C<dbmclose>, C<dbmopen>, C<package>, C<ref>, C<tie>, C<tied>,
C<untie>, C<use>

=item Funciones de bajo nivel de sockets
X<socket> X<sock>

=for Pod::Functions =Socket

C<accept>, C<bind>, C<connect>, C<getpeername>, C<getsockname>,
C<getsockopt>, C<listen>, C<recv>, C<send>, C<setsockopt>, C<shutdown>,
C<socket>, C<socketpair>

=item Funciones de comunicación interprocesos System V
X<IPC> X<System V> X<semaphore> X<shared memory> X<memory> X<message> X<semáforo> X<memoria compartida> X<memoria> X<mensaje>

=for Pod::Functions =SysV

C<msgctl>, C<msgget>, C<msgrcv>, C<msgsnd>, C<semctl>, C<semget>, C<semop>,
C<shmctl>, C<shmget>, C<shmread>, C<shmwrite>

=item Obteniendo información de usuarios y grupos
X<user> X<group> X<password> X<uid> X<gid> X<passwd> X</etc/passwd> X<usuario> X<grupo> X<contraseña>

=for Pod::Functions =User

C<endgrent>, C<endhostent>, C<endnetent>, C<endpwent>, C<getgrent>,
C<getgrgid>, C<getgrnam>, C<getlogin>, C<getpwent>, C<getpwnam>,
C<getpwuid>, C<setgrent>, C<setpwent>

=item Obteniendo información de la red
X<network> X<protocol> X<host> X<hostname> X<IP> X<address> X<service> X<red> X<protocolo> X<servidor> X<dirección> X<servicio>

=for Pod::Functions =Network

C<endprotoent>, C<endservent>, C<gethostbyaddr>, C<gethostbyname>,
C<gethostent>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
C<getprotobyname>, C<getprotobynumber>, C<getprotoent>,
C<getservbyname>, C<getservbyport>, C<getservent>, C<sethostent>,
C<setnetent>, C<setprotoent>, C<setservent>

=item Funciones relacionadas con el tiempo
X<time> X<date>

=for Pod::Functions =Time

C<gmtime>, C<localtime>, C<time>, C<times>

=item Non-function keywords

=for Pod::Functions =!Non-functions

C<and>, C<AUTOLOAD>, C<BEGIN>, C<CHECK>, C<cmp>, C<CORE>, C<__DATA__>,
C<default>, C<DESTROY>, C<else>, C<elseif>, C<elsif>, C<END>, C<__END__>,
C<eq>, C<for>, C<foreach>, C<ge>, C<given>, C<gt>, C<if>, C<INIT>, C<le>,
C<lt>, C<ne>, C<not>, C<or>, C<UNITCHECK>, C<unless>, C<until>, C<when>,
C<while>, C<x>, C<xor>

=back

=head2 Portabilidad
X<portability> X<Unix> X<portable> X<portabilidad>

Perl nació en Unix y por eso puede acceder a todas las llamadas normales del sistema Unix.  En entornos no Unix, la funcionalidad de algunas llamadas del sistema Unix pueden no estar disponibles, o los detalles de la funcionalidad disponible pueden diferir ligeramente.  Las funciones Perl afectadas por esto son:

C<-X>, C<binmode>, C<chmod>, C<chown>, C<chroot>, C<crypt>,
C<dbmclose>, C<dbmopen>, C<dump>, C<endgrent>, C<endhostent>,
C<endnetent>, C<endprotoent>, C<endpwent>, C<endservent>, C<exec>,
C<fcntl>, C<flock>, C<fork>, C<getgrent>, C<getgrgid>, C<gethostbyname>,
C<gethostent>, C<getlogin>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
C<getppid>, C<getpgrp>, C<getpriority>, C<getprotobynumber>,
C<getprotoent>, C<getpwent>, C<getpwnam>, C<getpwuid>,
C<getservbyport>, C<getservent>, C<getsockopt>, C<glob>, C<ioctl>,
C<kill>, C<link>, C<lstat>, C<msgctl>, C<msgget>, C<msgrcv>,
C<msgsnd>, C<open>, C<pipe>, C<readlink>, C<rename>, C<select>, C<semctl>,
C<semget>, C<semop>, C<setgrent>, C<sethostent>, C<setnetent>,
C<setpgrp>, C<setpriority>, C<setprotoent>, C<setpwent>,
C<setservent>, C<setsockopt>, C<shmctl>, C<shmget>, C<shmread>,
C<shmwrite>, C<socket>, C<socketpair>,
C<stat>, C<symlink>, C<syscall>, C<sysopen>, C<system>,
C<times>, C<truncate>, C<umask>, C<unlink>,
C<utime>, C<wait>, C<waitpid>

Para más información sobre la portabilidad de estas funciones, ver L<perlport> y cualquier otra documentación específica de la plataforma que esté disponible.

=head2 Lista de funciones de Perl en orden alfabético

=over 

=item -X IDENTIFICADOR_ARCHIVO
X<-r>X<-w>X<-x>X<-o>X<-R>X<-W>X<-X>X<-O>X<-e>X<-z>X<-s>X<-f>X<-d>X<-l>X<-p>
X<-S>X<-b>X<-c>X<-t>X<-u>X<-g>X<-k>X<-T>X<-B>X<-M>X<-A>X<-C>

=item -X EXPR

=item -X IDENTIFICADOR_DIR

=item -X

=for Pod::Functions a file test (-r, -x, etc)

Un test de archivo, donde X es una de las letras listadas abajo.  Este operador unario toma un argumento, bien sea un nombre de archivo o un identificador de archivo o de directorio, y comprueba si el archivo asociado para ver si algo sobre él es cierto.  Si el argumento se omite, se prueba C<$_>, excepto para C<-t>, que prueba STDIN.
Mientras no se diga lo contrario, se devuelve C<1> para verdadero y C<''> para falso.
Si el archivo no existe o no puede examinarse, devuelve C<undef> y actualiza C<$!> (errno).  A pesar de los nombres graciosos, la precedencia es la misma que cualquier otro operador unario con nombre.  El operador puede ser cualquiera de estos:

    -r  Archivo es legible por el uid/gid en vigor.
    -w  Archivo es escribible por el uid/gid en vigor.
    -x  Archivo es ejecutable por el uid/gid en vigor.
    -o  Archivo es propiedad del uid en vigor.

    -R  Archivo es legible por el uid/gid real.
    -W  Archivo es escribible por el uid/gid real.
    -X  Archivo es ejecutable por el uid/gid real.
    -O  Archivo es propiedad del uid real.

    -e  Archivo existe.
    -z  Archivo tiene tamaño cero (está vacío).
    -s  Archivo no tiene tamaño cero (devuelve el tamaño en bytes).

    -f  Archivo es un archivo normal.
    -d  Archivo es un directorio.
    -l  Archivo es un enlace simbólico (falso si los enlaces simbólicos no están
        soportados por el sistema de archivos).
    -p  Archivo es una tubería con nombre (FIFO), o el identificador de archivo es una tubería.
    -S  Archivo es un socket.
    -b  Archivo es un archivo especial por bloques.
    -c  Archivo es un archivo especial de caracteres.
    -t  El identificador está abierto a una tty.

    -u  Archivo tiene puesto el bit setuid.
    -g  Archivo tiene puesto el bit setgid.
    -k  Archivo tiene puesto el bit sticky.

    -T  Archivo es un archivo de texto ASCII o UTF-8 (por una suposición heurística).
    -B  archivo es un archivo "binario" (opuesto de -T).

    -M  Tiempo de arranque del script menos el tiempo de modificación del archivo, en días.
    -A  Lo mismo, para el tiempo de acceso.
    -C  Lo mismo, para el cambio de la fecha del inodo (en Unix, puede diferir en otras
	plataformas)

Ejemplo:

    while (<>) {
        chomp;
        next unless -f $_;  # ignora especiales
        #...
    }

Note que C<-s/a/b/> no realiza una substitución negada.  Al decir C<-exp($foo)>, se sigue funcionando como se espera que lo haga: sólo letras sueltas, por detrás de un menos,  interpretadas como pruebas de archivos.

Estos operadores están exentos de la regla "se parece a una función" descrita anteriormente.  Es decir, un paréntesis de apertura después del operador no influye en que el código que sigue se constituya como el argumento.  Poner el paréntesis de apertura antes del operador para separarlo del código que le sigue (esto se aplica únicamente a los operadores con mayor precedencia que los operadores unarios, por supuesto):

    -s($archivo) + 1024   # probablemente mal; lo mismo que -s($archivo + 1024)
    (-s $archivo) + 1024  # correcto

La interpretación de los operadores de permisos de archivo C<-r>, C<-R>, C<-w>, C<-W>, C<-x> y C<-X> es por defecto basado solamente en el modo del archivo y en los uid y gid del usuario.  Puede haber otras razones por las que realmente no pueda leer, escribir o ejecutar un archivo: por ejemplo, controles de acceso a sistemas de archivos en red, ACL (listas de control de acceso), sistemas de archivos de solo lectura, y formatos irreconocibles de ejecutables.  Note que el uso de seis operadores específicos para verificar si cierta operación es posible, es usualmente una equivocación, porque puede ser el inicio de bloqueos de carrera.

También note que, para el superusuario en el sistema de archivos local, los test C<-r>, C<-R>, C<-w> y C<-W> siempre devuelven 1, y C<-x> y C<-X> devuelven 1 si cualquier bit de ejecución está puesto en el modo del archivo.  Scripts ejecutados por el superusuario pueden necesitar hacer un stat() para determinar el modo real del archivo, o temporalmente poner su uid efectivo a otro valor.

Si está usando ACL, hay un pragma llamado C<filetest> que puede producir resultados más precisos que los simples bits de modo de stat().
Cuando esté bajo C<use filetest 'access'>, las comprobaciones de archivo mencionadas antes comprobarán cuándo los permisos pueden (o no) ser concedidos usando la familia de llamadas del sistema access(2).  Note también que C<-x> y C<-X> pueden, bajo este pragma, devolver valores verdaderos incluso si los bits de permiso de ejecución no están puestos (ni cualquier permiso ACL extra de ejecución).  Este comportamiento tan extraño es debido a las definiciones subyacentes de las llamadas del sistema.  Note también que, debido a la implementación de C<use filetest 'access'>, el identificador de archivo especial C<_> no almacenará los resultados de los test de archivo mientras este pragma esté activo.  Para más información, lea la documentación del pragma C<filetest>.

Las opciones C<-T> y C<-B> funcionan como sigue.  El primer bloque o así del archivo, se examina para ver si es UTF-8 válido, por lo que incluye caracteres no ASCII.  Si lo es, es un archivo C<-T>.  Se examina el primer bloque (aprox.) del archivo, para buscar caracteres extraños como códigos de control o caracteres con el bit alto activo.  Si más de un tercio de los caracteres son extraños, es un archivo C<-B>; de lo contrario es un archivo C<-T>.
También, cualquier archivo que contenga un byte cero en la porción examinada se considera que es un archivo binario.  (Si se ejecuta dentro del ámbito de un L<S<use locale>|perllocale>, que incluye C<LC_CTYPE>, caracteres extraños son cualquiera que no sean imprimibles ni espacios en la configuración regional actual).  Si C<-T> o C<-B> se usan con un identificador de archivo, la memoria intermedia actual de IO es examinada en vez del primer bloque.  Ambos, C<-T> y C<-B>, devuelven verdadero en un archivo vacío o en un archivo en el EOF (marca de fin de archivo) cuando se analiza un gestor de archivo.  Debido a que tiene que leer el archivo para hacer el test C<-T>, en la mayoría de las ocasiones querrá usar primero C<-f>, como en C<next unless -f $archivo && -T $archivo>.

Si a cualquiera de los test de archivo (o los operadores C<stat> o C<lstat>) se les da el identificador de archivo especial consistente en un solitario guión bajo, entonces se usa la estructura stat del archivo del test anterior (u operador stat), ahorrando una llamada del sistema.  (Esto no funciona con C<-t>, y necesita recordar que lstat() y C<-l> dejarán valores en la estructura stat para el enlace simbólico, no el archivo real).  (También, si la memoria intermedia de stat se rellenó con una llamada C<lstat>, C<-T> y C<-B> serán reinicializados con los resultados de C<stat _>).
Ejemplo:

    print "Puedo hacerlo.\n" if -r $a || -w _ || -x _;

    stat($nombre_de_archivo);
    print "Leíble\n" if -r _;
    print "Escribible\n" if -w _;
    print "Ejecutable\n" if -x _;
    print "Setuid\n" if -u _;
    print "Setgid\n" if -g _;
    print "Sticky\n" if -k _;
    print "Texto\n" if -T _;
    print "Binario\n" if -B _;

Como en Perl 5.10.0, una dulce forma, puramente sintáctica, puede apilar operadores de test de archivo, de forma que C<-f -w -x $archivo> es equivalente a C<-x $archivo && -w _ && -f _>.  (Esto solo es fascinantemente elegante: si usa el valor devuelto de C<-f $archivo> como un argumento para otro operador de test de archivo, no ocurrirá ninguna magia especial)

Cuestiones de portabilidad: L<perlport/-X>.

Para no confundir a los posibles usuarios de su código con errores de sintaxis misteriosos, ponga algo como esto en la parte superior de su script:

    use 5.010;  # así, los test de archivo pueden apilarse

=item abs VALOR
X<abs> X<absolute> X<absoluto>

=item abs

=for Pod::Functions absolute value function

Devuelve el valor absoluto del argumento.
Si se omite VALOR, se usa C<$_>.

=item accept NUEVOSOCKET,SOCKETGENÉRICO
X<accept>

=for Pod::Functions accept an incoming socket connect

Acepta una conexión socket entrante, como lo hace la llamada del sistema accept(2).  Devuelve la dirección empaquetada si ha tenido éxito, de lo contrario, falso.
Ver el ejemplo en L<perlipc/"Sockets: Comunicación Cliente/Servidor">.

En sistemas que soportan la bandera cerrar-en-ejecución sobre archivos, la bandera será puesta para el nuevo descriptor de archivo abierto, determinado por el valor de $^F.  Ver L<perlvar/$^F>.

=item alarm SEGUNDOS
X<alarm> X<SIGALRM> X<timer> X<alarma> X<temporizador>

=item alarm

=for Pod::Functions schedule a SIGALRM

Ordena mandar una señal SIGALRM al proceso actual después de que haya pasado el número de segundos especificados.  Si no se ha especificado SEGUNDOS, se usará el valor almacenado en C<$_>.  (En algunas máquinas, desafortunadamente, el tiempo transcurrido puede ser hasta un segundo más o menos del especificado debido a cómo los segundos son contados, y la planificación de procesos pueden retrasar la entrega de la señal incluso más).

Sólo un temporizador puede estar contando cada vez.  Cada llamada desactiva el temporizador anterior, y se puede indicar un argumento C<0> para cancelar el temporizador anterior sin empezar uno nuevo.  El valor devuelto es la cantidad de tiempo restante del temporizador anterior.

Para lapsos de tiempo inferiores a un segundo, el módulo Time::HiRes (en CPAN, y desde Perl 5.8 parte de la distribución estándar) ofrece ualarm().  Puede también usar la versión de select() de cuatro argumentos, dejando los tres primeros indefinidos, o puede usar la interfaz C<syscall> para acceder a setitimer(2) si su sistema lo soporta.  Vea L<perlfaq8> para más detalles.

Normalmente es un error entremezclar llamadas a C<alarm> y C<sleep>, porque C<sleep> puede ser, internamente, implementado en su sistema con C<alarm>.

Si quiere usar C<alarm> controlar la duración de una llamada del sistema necesita una pareja C<eval>/C<die>.  No puede confiar que la alarma que llama a la llamada del sistema falle y ponga C<$!> a C<EINTR> porque Perl activa controladores de señal para reiniciar llamadas al sistema en algunos sistemas.  Usando C<eval>/C<die> siempre funciona, teniendo en cuenta las advertencias dadas en L<perlipc/"Señales">.

    eval {
        local $SIG{ALRM} = sub { die "alarma\n" }; # NB: \n necesario
        alarm $timeout;
        $nread = sysread SOCKET, $búfer, $largo;
        alarm 0;
    };
    if ($@) {
        die unless $@ eq "alarma\n";   # propagar errores inesperados
        # fin de temporización
    }
    else {
        # no hacer nada
    }

Para más información ver L<perlipc>.

Cuestiones de portabilidad: L<perlport/alarm>.

=item atan2 Y,X
X<atan2> X<arctangent> X<tan> X<tangent> X<arcotangente> X<tangente>

=for Pod::Functions arctangent of Y/X in the range -PI to PI

Devuelve el arcotangente de Y/X en el rango -PI a PI.

Para la operación tangente, puede usar la función C<Math::Trig::tan>, o usar la conocidad relación:

    sub tan { sin($_[0]) / cos($_[0])  }

El valor de retorno para C<atan2(0,0)> depende de la implementación; consulte su página de manual de atan2(3) para más información.

Cuestiones de portabilidad: L<perlport/atan2>.

=item bind SOCKET,NOMBRE
X<bind>

=for Pod::Functions binds an address to a socket

Enlaza una dirección de red a un socket, como lo hace bind(2).  Devuelve verdadero si tiene éxito; de lo contrario, falso.  NOMBRE debe ser una dirección empaquetada del tipo apropiado para el socket.  Ver los ejemplos en L<perlipc/"Sockets: Comunicación Cliente/Servidor">.

=item binmode IDENTIFICADOR_ARCHIVO, CAPA
X<binmode> X<binary> X<text> X<DOS> X<Windows> X<binario> X<texto>

=item binmode IDENTIFICADOR_ARCHIVO

=for Pod::Functions prepare binary files for I/O

Ordena que el modo de lectura o escritura para el IDENTIFICADOR_ARCHIVO sea en "binario" o "texto" en sistemas donde las bibliotecas en tiempo de ejecución distingan entre archivos binarios y de texto.  Si IDENTIFICADOR_ARCHIVO es una expresión, el valor es tomado como el nombre del identificador.  Devuelve verdadero en éxito; de lo contrario devuelve C<undef> y pone C<$!> (errno).

En algunos sistemas (en general, sistemas basados en DOS y Windows) binmode() es necesario cuando no esté trabajando con un archivo de texto.  Para una mejor portabilidad es siempre una buena idea usarlo cuando sea apropiado, y nunca usarlo cuando no sea apropiado.  También, el personal puede poner su I/O para que sea codificado por defecto en Unicode UTF-8, y no en bytes.

En otras palabras: indiferentemente de la plataforma, use binmode() en datos binarios, como por ejemplo imágenes.

Si CAPA está presente es un único string, pero puede contener múltiples directivas.  Las directivas alteran el comportamiento del identificador del archivo.
Tiene sentido que CAPA esté presente, al usar binmode sobre un archivo de texto.

Si se omite CAPA o se especifica como C<:raw> el identificador se prepara para pasar datos binarios.  Esto incluye desactivar posibles traducciones CRLF y marcarlas como bytes (como opuesto a los caracteres Unicode).
Note que, a pesar de estar implícito en I<"Programming Perl"> (el dromedario, 3.ª edición) o en otro lugar, C<:raw> I<no> es el simplemente el inverso de C<:crlf>
-- otras capas que pudieran afectar la naturaleza binaria del flujo son I<también> desactivadas.  Ver L<PerlIO>, L<perlrun> y la discusión sobre la variable de entorno PERLIO.

C<:bytes>, C<:crlf>, C<:utf8>, y cualquier otra directiva de la forma C<:...>, se llaman I<capas> I/O.  El I<pragma> C<open> se puede usar para establecer las capas I/O por defecto.  Ver L<open>.

I<El parámetro CAPA de la función binmode() se describe como "DISCIPLINA" en "Programming Perl, 3rd Edition".  Sin embargo, desde la publicación de este libro, conocido por muchos como "Camel III", el consenso sobre el nombre de esta funcionalidad se ha movido desde "disciplina" a "capa".  Toda documentación desde esta versión de Perl se refiere a "capas" en vez de a "disciplinas".  Ahora volvamos a la documentación normal...>

Para indicar IDENTIFICADOR_ARCHIVO como UTF-8, use C<:utf8> o C<:encoding(UTF-8)>.
C<:utf8> solo marca los datos como UTF-8 sin más comprobaciones ulteriores, mientras que C<:encoding(UTF-8)> comprueba que los datos sean realmente UTF-8 válidos.  Más detalles se pueden encontrar en L<PerlIO::encoding>.

En general, binmode() debe ser llamada después de open() pero antes de que cualquier I/O se realice sobre el identificador de archivo.  Llamando a binmode(), normalmente vaciará cualquier dato pendiente que esté almacenado en la salida (y quizás datos pendientes a la entrada) del identificador de archivo.  Una excepción a esto es la capa C<:encoding> que cambia la codificación por defecto del identificador de archivo; ver L</open>.
La capa C<:encoding> algunas veces necesita ser llamada en mitad del flujo de datos y no lo vacía.  C<:encoding> también se coloca, implícitamente, por encima de la capa C<:utf8> porque Perl, internamente, opera con caracteres Unicode codificados en UTF-8.

El sistema operativo, controladores de dispositivos, bibliotecas C y Perl en tiempo de ejecución conspiran al unísono para permitirle al programador tratar un simple carácter (C<\n>) como el final de línea, independientemente de su representación externa.  En muchos sistemas operativos, la representación nativa de un archivo texto coincide con su representación interna, pero en algunas plataformas la representación externa de C<\n> se realiza con más de un carácter.

Todas las variantes de Unix, Mac OS (viejo y nuevo) y los archivos Stream_LF sobre VMS usan un único carácter al final de cada línea en la representación externa del texto (incluso si el carácter único es un RETORNO DE CARRO en el antiguo, pre-Darwin sabor de Mac OS, y un AVANCE DE LÍNEA en los Unix y la mayor parte de los archivos VMS).  En otros sistemas como OS/2, DOS y los distintos sabores de MS-Windows, tu programa ve un C<\n> como un simple C<\cJ>, pero es almacenado en los archivos de texto como los dos caracteres C<\cM\cJ>.  Esto significa que, si no usa binmode() en estos sistemas, las secuencias C<\cM\cJ> en disco serán convertidas a C<\n> en la entrada y cualquier C<\n> en tu programa será convertido de nuevo en C<\cM\cJ> en la salida.  Esto es lo que usted quiere para los archivos de texto, pero puede ser desastroso para archivos binarios.

Otra consecuencia de usar binmode() (en algunos sistemas) es que las marcas especiales de fin-de-archivo serán vistas como parte del flujo de datos.
Para los sistemas de la familia Microsoft esto significa que si sus datos binarios contienen C<\cZ>, el subsistema de E/S lo considerará como el fin del archivo, a menos que use binmode().

binmode() no sólo es importante para las operaciones readline() y print(), sino también cuando se usan read(), seek(), sysread(), syswrite() y tell() (ver L<perlport> para más detalles).  Ver las variables C<$/> y C<$\> en L<perlvar> para cómo poner manualmente sus secuencias de fin de línea en su entrada y salida.

Cuestiones de portabilidad: L<perlport/binmode>.

=item bless REF,NOMBRECLASE
X<bless>

=item bless REF

=for Pod::Functions create an object

Esta función dice que la cosa referenciada por REF es ahora un objeto del paquete NOMBRECLASE (I<bless> es bendición en inglés, que se podría traducir mejor por bautizar, en el sentido de 'dar un nombre' al objeto).  Si se omite NOMBRECLASE, se usa el paquete actual.  Como un C<bless> a menudo es la última cosa de un constructor, devuelve la referencia por conveniencia.  Siempre usar la versión de dos argumentos si una clase derivada puede heredar la función con un nuevo bautizo.
Vea L<perlobj> para más información sobre la bendición (y las bendiciones) de los objetos.

Considerar siempre bautizar objetos de NOMBRECLASE que mezcle mayúsculas y minúsculas.
El espacio de nombres en minúsculas está considerado reservado para los pragmas de Perl.  Los tipos predefinidos tienen todos sus nombres en mayúscula.  Para evitar confusiones, evite nombres de paquete también de esta manera.  Asegúrese de que NOMBRECLASE es un valor verdadero.

Ver L<perlmod/"Módulos Perl">.

=item break

=for Pod::Functions +switch break out of a C<given> block

Sale de un bloque C<given()>.

Esta palabra clave se activa con la característica C<"switch">: vea L<feature> para más información sobre C<"switch">.  También puede acceder a ella anteponiendo C<CORE::>.  O de otra forma, incluya un C<use v5.10> o posterior en el contexto actual.

=item caller EXPR
X<caller> X<call stack> X<stack> X<stack trace> X<llamador> X<pila de llamdas> X<pila> X<traza de pila>

=item caller

=for Pod::Functions get context of the current subroutine call

Devuelve el contexto de la llamada a la subrutina actual.  En contexto escalar, devuelve el nombre del paquete del llamante si aquel I<es> un llamante, es decir, si estamos en una subrutina, C<eval> o C<require>, y el valor indefinido en otro caso.  caller nunca devuelve subrutinas XS, y son obviadas.  La próxima sub escrita en perl aparecerá en lugar de la sub XS en los valores devueltos por caller.  En contexto lista, devuelve

    # 0         1         2
    ($paquete, $nombre_archivo, $linea) = caller;

Con EXPR, devuelve alguna información extra que el depurador usa para imprimir un rastreo de la pila.  El valor de EXPR indica cuántos marcos de llamada se ha de retroceder antes del actual.

    # 0         1         2       3           4
    ($paquete, $archivo, $linea, $subrutina, $hasargs,

    #  5          6          7            8       9         10
    $wantarray, $evaltext, $is_require, $hints, $bitmask, $hinthash)
     = caller($i);

Aquí, $subrutina es la función que caller llamó (en lugar de la función que contiene a caller).  Note que la $subrutina puede ser C<(eval)> si el marco de llamada no es una llamada a una subrutina, sino un C<eval>.  En tal caso, se añaden los nuevos elementos $evaltext y C<$is_require>: C<$is_require> es verdadero si el marco es creado por una instrucción C<require> o C<use>; $evaltext contiene el texto de la sentencia C<eval EXPR>.  En particular, para una instrucción C<eval BLOQUE>, $subrutina es C<(eval)>, pero $evaltext es indefinido.  (Note también que cada instrucción C<use> crea un marco C<require> dentro de un marco C<eval EXPR>).  $subrutina puede ser también C<(unknown)> (desconocida) si esta subrutina en particular parece haber sido borrada de la tabla de símbolos.
C<$hasargs> es verdadero si una nueva instancia de C<@_> fue creada para este marco.
C<$hints> y C<$bitmask> contienen detalles para los cuales caller fue compilado.  C<$hints> corresponde a C<$^H> y C<$bitmask> corresponde a C<${^WARNING_BITS}>.  Los valores C<$hints> y C<$bitmask> están sujetos a cambios entre versiones de Perl y no se espera que sean utilizados para uso externo.

C<$hinthash> es una referencia a un hash conteniendo el valor de C<%^H> cuando el llamante ha sido compilado, o C<undef> si C<%^H> estaba vacío.  No modifique los valores de este hash, ya que son los valores reales almacenados en el árbol de operaciones internas.

Además, cuando se le llama desde el interior de un paquete DB en contexto de lista, caller devuelve información más detallada: actualiza la variable C<@DB::args> con los argumentos con los que la subrutina fue invocada.

Cuidado con el optimizador, que puede optimizar marcos de llamada antes de que C<caller> tenga la oportunidad de obtener la información.  Esto significa que C<caller(N)> quizás no devuelva información sobre el marco de llamada que espera, para C<< N > 1 >>.  En particular, C<@DB::args> podría tener información de la llamada a la anterior llamada a C<caller>.

Tenga en cuenta que fijar C<@DB::args> es I<el mejor esfuerzo>, destinado a la depuración o la generación de seguimientos, y no debería ser invocado.  En particular, como C<@_> contiene los alias de los argumentos de la función llamante, Perl no tiene una copia de C<@_>, así que C<@DB::args> contendrá modificaciones que la subrutina hace a C<@_> o de sus contenidos, no los valores originales a la hora de ser llamada.  C<@DB::args>, como C<@_>, no incluye referencias explícitas a sus elementos, por lo que en algunos casos sus elementos pueden haberse liberado y reasignado a otras variables o valores temporales.  Por último, un efecto secundario de la implementación actual es que los efectos de C<shift @_> pueden I<normalmente> ser deshechos (pero no C<pop @_> u otras operaciones de troceado, I<y> tampoco si se ha tomado una referencia a C<@_>, I<y> con la salvedad sobre los elementos reasignados), por lo que C<@DB::args> es realmente un híbrido del estado actual e inicial de C<@_>.  Los compradores quedan advertidos.

=item chdir EXPR
X<chdir> X<cd> X<directory, change> X<directorio, cambio>

=item chdir IDENTIFICADOR_ARCHIVO

=item chdir IDENTIFICADOR_DIR

=item chdir

=for Pod::Functions change your current working directory

Cambia el directorio de trabajo a EXPR, si es posible.  Si se omite EXPR, cambia al directorio especificado por C<$ENV{HOME}>, si está puesto; si no, cambia al directorio especificado por C<$ENV{LOGDIR}>.  (Bajo VMS, la variable C<$ENV{SYS$LOGIN}> es también comprobada y usada si está puesta).  Si ninguna está puesta, C<chdir> no hace nada.  Devuelve verdadero si tuvo éxito, sino, falso.  Ver ejemplo en C<die>.

En sistemas que soportan fchdir(2), puede pasarle un identificador de archivo o un identificador de directorio como argumento.  En sistemas que no admiten fchdir(2), pasarle un identificador de archivo lanza una excepción.

=item chmod LISTA
X<chmod> X<permission> X<mode> X<permisos> X<modo>

=for Pod::Functions changes the permissions on a list of files

Cambia los permisos de una lista de archivos.  El primer elemento de la lista debe ser un modo numérico, que normalmente estará en octal, y que, definitivamente, I<no> debe ser una cadena de dígitos en octal: C<0644> es correcto, C<"0644"> no lo es.  Devuelve el número de archivos cambiados con éxito.  Vea también L</oct> si todo lo que tiene es una cadena.

    $cnt = chmod 0755, "foo", "bar";
    chmod 0755, @ejecutables;
    $modo = "0644"; chmod $modo, "foo";      # !!! establece modo a
                                             # --w----r-T
    $modo = "0644"; chmod oct($modo), "foo"; # este es mejor
    $modo = 0644;   chmod $modo, "foo";      # este es el mejor

En sistemas que soporten fchmod(2), puede pasar identificadores de archivo entre los archivos.  En sistemas que no admiten fchmod(2), pasarle un identificador de archivo lanza una excepción.  Identificadores de archivo se deben pasar como comodines o referencias a comodines para que sean reconocidos; las palabras sueltas se consideran como nombres de archivo.

    open(my $fh, "<", "foo");
    my $permisos = (stat $fh)[2] & 07777;
    chmod($permisos | 0600, $fh);

También puede importar las constantes simbólicas C<S_I*> desde el módulo Fcntl:

    use Fcntl qw( :mode );
    chmod S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH, @ejecutables;
    # Idéntico a chmod 0755 del ejemplo anterior.

Cuestiones de portabilidad: L<perlport/chmod>.

=item chomp VARIABLE
X<chomp> X<INPUT_RECORD_SEPARATOR> X<$/> X<newline> X<eol> X<nueva línea>

=item chomp( LISTA )

=item chomp

=for Pod::Functions remove a trailing record separator from a string

Esta es la versión segura de L</chop>, que quita cualquier string restante que corresponda al valor actual de C<$/> (también conocido como $INPUT_RECORD_SEPARATOR -separador de registros en entrada- en el módulo C<English>).  Devuelve el número total de caracteres eliminados de todos sus argumentos.  Se utiliza a menudo para eliminar el carácter de nueva línea del final de un registro de entrada cuando es importante que el registro al final le pueda faltar ese carácter.  En modo párrafo (C<$/ = ''>), elimina todos los caracteres de nueva línea de la cadena.
En modo chupón (C<$/ = undef>) o en modo registros de longitud fija (C<$/> es una referencia a un entero o algo parecido; ver L<perlvar>) chomp() no elimina nada.
Si VARIABLE se omite, usa C<$_>.  Ejemplo:

    while (<>) {
        chomp;  # evitar \n en el último campo
        @array = split(/:/);
        # ...
    }

Si VARIABLE es un hash, recorta los valores del hash, pero no sus claves, reiniciando el iterador C<each> durante el proceso.

Puede realmente recortar cualquier cosa que sea un valor-izquierda, incluyendo una asignación:

    chomp($cwd = `pwd`);
    chomp($respuesta = <STDIN>);

Si recorta una lista, cada elemento es recortado y se devuelve el número total de caracteres eliminados.

Nota que los paréntesis son necesarios cuando esté recortando cualquier cosa que no sea una simple variable.  Esto es porque C<chomp $cwd = `pwd`;> es interpretado como C<(chomp $cwd) = `pwd`;>, en vez de un C<chomp( $cwd = `pwd` )> que es lo que se esperaba.  Similarmente, C<chomp $a, $b> es interpretado como C<chomp($a), $b> en vez de un C<chomp($a, $b)>.

=item chop VARIABLE
X<chop>

=item chop( LISTA )

=item chop

=for Pod::Functions remove the last character from a string

Recorta el último carácter de un string y devuelve el carácter recortado.  Es más eficiente que C<s/.$//s> porque ni escanea ni copia el string.  Si VARIABLE se omite, recorta C<$_>.
Si VARIABLE es un hash, recorta los valores del hash, pero no sus claves, reiniciando el iterador C<each> durante el proceso.

Puede realmente recortar cualquier cosa que sea un valor-izquierda, incluyendo una asignación.

Si recorta una lista, cada elemento es recortado.  Sólo se devuelve el valor del último recorte.

Note que C<chop> devuelve el último carácter.  Para devolver todos menos el último carácter, use C<substr($string, 0, -1)>.

Ver también L</chomp>.

=item chown LISTA
X<chown> X<owner> X<user> X<group> X<propietario> X<usuario> X<grupo>

=for Pod::Functions change the ownership on a list of files

Cambia el propietario (y grupo) de una lista de archivos.  Los primeros dos elementos de la lista deben ser el valor I<numérico> del uid y gid, en este orden.  Un valor de -1 en cualquier posición es interpretado en la mayoría de los sistemas como que se deja el actual valor sin cambiar.  Devuelve el número de archivos cambiados con éxito.

    $num = chown $uid, $gid, 'foo', 'bar';
    chown $uid, $gid, @archivos;

En sistemas que soporten fchown(2), puede pasar identificadores de archivo entre los archivos.  En sistemas que no admiten fchown(2), pasarle un identificador de archivo lanza una excepción.  Identificadores de archivo se deben pasar como comodines o referencias a comodines para que sean reconocidos; las palabras sueltas se consideran como nombres de archivo.

Aquí hay un ejemplo que obtiene el uid numérico a partir del archivo de contraseñas:

    print "Usuario: ";
    chomp($usuario = <STDIN>);
    print "Archivos: ";
    chomp($patron = <STDIN>);

    ($login,$pass,$uid,$gid) = getpwnam($usuario)
        or die "$usuario no está en archivo de contraseñas";

    @ary = glob($patron);  # expandir los nombres de los archivos
    chown $uid, $gid, @ary;

En la mayoría de los sistemas, no se le permite cambiar la propiedad del archivo a menos que sea el superusuario, aunque sí pueda cambiar el grupo a cualquiera de sus grupos secundarios.  En sistemas inseguros, estas restricciones pueden estar más relajadas, pero no es una suposición normal.
En sistemas POSIX, puede detectar esta condición de esta manera:

    use POSIX qw(sysconf _PC_CHOWN_RESTRICTED);
    $can_chown_giveaway = not sysconf(_PC_CHOWN_RESTRICTED);

Cuestiones de portabilidad: L<perlport/chown>.

=item chr NÚMERO
X<chr> X<character> X<ASCII> X<Unicode> X<carácter>

=item chr

=for Pod::Functions get character this number represents

Devuelve el carácter representado por NÚMERO en el conjunto de caracteres.
Por ejemplo, C<chr(65)> es C<"A"> tanto en ASCII como en Unicode, y chr(0x263a) es una cara sonriente en Unicode.  

Valores negativos dan el carácter de reemplazo Unicode (chr(0xfffd)), salvo bajo el pragma L<bytes>, donde se utilizan los ocho bits más bajos del valor (truncado a un entero).

Si se omite NÚMERO, se usa C<$_>.

Para lo contrario, use L</ord>.

Tenga en cuenta que los caracteres de 128 a 255 (inclusive) son, por defecto, internamente no codificados como UTF-8, por razones de compatibilidad hacia atrás.

Vea L<perlunicode> para más información acerca de Unicode.

=item chroot NOMBRE_ARCHIVO
X<chroot> X<root>

=item chroot

=for Pod::Functions make directory new root for path lookups

Esta funcion trabaja como la llamada del sistema del mismo nombre: hace que el directorio indicado sea el directorio raíz de los siguientes caminos que comiencen por un C</> en su proceso y todos sus hijos.  (No cambia su actual directorio de trabajo actual, que no queda afectado).  Por razones de seguridad, esta llamada está reservada al superusuario.  Si ARCHIVO se omite, hace un C<chroot> a C<$_>.

B<NOTA:> Es una buena práctica de seguridad hacer C<chdir("/")> (a la raíz del directorio) inmediatamente después de un C<chroot()>.

Cuestiones de portabilidad: L<perlport/chroot>.

=item close IDENTIFICADOR_ARCHIVO
X<close>

=item close

=for Pod::Functions close file (or pipe or socket) handle

Cierra el archivo o tubería asociada con el identificador de archivo, limpiando los búfer de E/S, y cierra el descriptor del archivo en el sistema.  Devuelve verdadero si las operaciones han tenido éxito y si ningún error fue reportado por alguna capa PerlIO.  Cierra el identificador de archivo actualmente seleccionado si se omite el argumento.

No tiene porqué cerrar el IDENTIFICADOR_ARCHIVO si inmediatamente va a hacer otro C<open> sobre él mismo, porque C<open> lo cierra por usted.  (Vea L<open|/open IDENTIFICADOR_ARCHIVO>).  Sin embargo, un C<close> explícito en un archivo de entrada reinicia el contador de líneas (C<$.>), mientras que un C<close> implícito hecho por C<open>, no.

Si el identificador de archivo proviene de una tubería abierta, C<close> adicionalmente devolverá falso si alguna de las otras llamadas del sistema implicadas falla, o si el programa termina con un valor de estado distinto de cero.  Si el único problema fue que el programa salió distinto de cero, C<$!> se establecerá a C<0>.  El proceso de cierre de una tubería también espera por el proceso de ejecución en la tubería antes de salir -en caso de que desee ver después la salida de la tubería- e, implícitamente, pone el valor de estado de salida de ese comando en C<$?> y C<${^CHILD_ERROR_NATIVE}>.

Si hay múltiples hilos en ejecución, hacer un C<close> en un identificador de archivo desde un open entubado, devuelve verdadero sin esperar a que el proceso hijo termine, si el identificador de archivo sigue abierto en otro hilo.

Cerrar la lectura final de una tubería antes de que el proceso de escritura en el otro extremo termine resulta en que el escritor recibe un SIGPIPE.  Si en el otro extremo no puede manejar esto, asegúrese de leer todos los datos antes de cerrar la tubería.

Ejemplo:

    open(OUTPUT, '|sort >foo')  # tubería a sort
        or die "No puedo iniciar sort: $!";
    #...                        # imprimir a la salida
    close OUTPUT                # esperar que sort termine
        or warn $! ? "Error cerrando la tubería sort: $!"
                   : "Estado de salida $? desde sort";
    open(INPUT, 'foo')          # obtener los resultado de sort
        or die "No puedo abrir 'foo' para entrada: $!";

IDENTIFICADOR_ARCHIVO puede ser una expresión cuyo valor se puede usar como un identificador de archivo indirecto, normalmente el nombre real del identificador de archivo o un identificador autovivificado.

=item closedir IDENTIFICADOR_DIR
X<closedir>

=for Pod::Functions close directory handle

Cierra un directorio abierto por C<opendir> y devuelve el éxito de la llamada del sistema.

=item connect SOCKET,NOMBRE
X<connect>

=for Pod::Functions connect to a remote socket

Intenta conectarse a un socket remoto, al igual que connect(2).
Devuelve verdadero si tiene éxito; de lo contrario, falso.  NOMBRE debe ser una dirección empaquetada del tipo apropiado para el socket.  Ver los ejemplos en L<perlipc/"Sockets: Comunicación Cliente/Servidor">.

=item continue BLOQUE
X<continue>

=item continue

=for Pod::Functions optional trailing block in a while or foreach

Cuando es seguido por un BLOQUE, C<continue> es realmente una instrucción de control de flujo en lugar de una función.  Si existe un BLOQUE C<continue> adjunto a un BLOQUE (típicamente en un C<while> o C<foreach>), siempre es ejecutado justo antes de que la condicional sea de nuevo evaluada, igual que la tercera parte de un bucle C<for> en C. Esto se puede utilizar para incrementar una variable de bucle, incluso cuando el bucle ha sido interrumpido por la instrucción C<next> (que es similar a la instrucción C<continue> del C).

C<last>, C<next> o C<redo> puede aparecer dentro de un bucle C<continue>; C<last> y C<redo> se comportarán como si se hubieran ejecutado dentro del bloque principal.  También C<next>, pero como ejecutará un bloque C<continue>, quizás se convierta en algo divertido.

    while (EXPR) {
        ### redo siempre viene aquí
        hacer_algo;
    } continue {
        ### next siempre viene aquí
        hacer_algo_despues;
        # entonces regresa arriba a recomprobar la EXPR
    }
    ### last siempre viene aquí

La omisión de la sección C<continue> es equivalente a usar un bloque vacío, como es lógico, por lo que C<next> va directamente a comprobar la condición en la parte superior del bucle.

Cuando no hay un BLOQUE, C<continue> es una función que termina el actual bloque C<when> o C<default> en lugar de realizar una iteración del C<foreach> o salir de un C<given> que lo albergue léxicamente.
En Perl 5.14 y anteriores, esta forma de C<continue> sólo estaba disponible cuando la característica C<"switch"> estaba habilitada.
Vea L<feature> y L<perlsyn/"Instrucciones switch"> para más información.

=item cos EXPR
X<cos> X<cosine> X<acos> X<arccosine> X<coseno> X<arco coseno>

=item cos

=for Pod::Functions cosine function

Devuelve el coseno de EXPR (expresado en radianes).  Si EXPR se omite, devuelve el coseno de C<$_>.

Para la inversa de la operación coseno, puede usar la función C<Math::Trig::acos()>, o usar esta relación:

    sub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }

=item crypt TEXTOPLANO,SALTO
X<crypt> X<digest> X<hash> X<salt> X<plaintext> X<password> X<decrypt> X<cryptography> X<passwd> X<contraseña>

=for Pod::Functions one-way passwd-style encryption

Crea una cadena resumen exactamente igual que la función crypt(3) de la biblioteca C (asumiendo que realmente tenga una versión de la que no haya sido extirpada por ser considerada un arma potencial).

crypt() es una función hash de un sólo sentido.  El TEXTOPLANO y el SALTO se convierten en un pequeño string, llamado I<digest> (compendio, resumen), que es devuelto.  Los mismos TEXTOPLANO y SALTO siempre devolverán el mismo string, pero no hay una forma (conocida) de obtener el TEXTOPLANO original desde el hash.  Pequeños cambios en TEXTPLANO o SALTO resultarán en grandes cambios en el I<digest>.

No existe la función decrypt.  Esta función no es muy útil para criptografía (para esto, mire en los módulos F<Crypt> en su espejo CPAN más cercano) y el nombre "crypt" es un poco equívoco.  En cambio se usa principalmente para comprobar si dos trozos de textos son el mismo sin tener que transmitirlo o almacenarlo.  Un ejemplo es comprobando si se ha dado una contraseña correcta.  El I<digest> de una contraseña se almacena, no la propia contraseña.  El usuario escribe la contraseña que es en-crypt()-tada con el mismo salto con el que fue almacenado el I<digest>.  Si los dos I<digest> coinciden, la contraseña es correcta.

Cuando verifique un string i<digest> debe usar el propio I<digest> como el salto (como C<crypt($plano, $digest) eq $digest>).  El SALTO usado para crear el I<digest> es visible como parte del I<digest>.  Esto asegura que crypt() hará el hash de la nueva cadena con el mismo salto que el I<digest>.
Esto permite a su código trabajar con el estándar L<crypt|/crypt> y con implementaciones más exóticas.  En otras palabras, no asuma nada sobre la cadena devuelta, ni sobre la cantidad de bytes de SALTO pueden importar.

Tradicionalmente, el resultado es una cadena de 13 bytes: los dos primeros son el salto, seguido de 11 bytes del conjunto C<[./0-9A-Za-z]>, y sólo los primeros ocho bytes del I<digest> interesan.  Pero esquemas alternativos de cálculo de hash (como MD5), esquemas de seguridad de alto nivel (como C2) e implementaciones en plataformas no UNIX pueden producir cadenas diferentes.

Cuando escoja un nuevo salto cree un string de dos caracteres elegidos aleatoriamente del conjunto C<[./0-9A-Za-z]> (como por ejemplo C<join '', ('.', '/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]>).  Este conjunto de caracteres es sólo una recomendación; los caracteres permitidos en el salto dependen solamente de la función crypt del sistema y Perl no puede restringir el salto que C<crypt()> acepte.

Aquí hay un ejemplo que se asegura que quien corra el programa conoce su contraseña:

    $pwd = (getpwuid($<))[1];

    system "stty -echo";
    print "Contraseña: ";
    chomp($palabra = <STDIN>);
    print "\n";
    system "stty echo";

    if (crypt($palabra, $pwd) ne $pwd) {
        die "Lo siento...\n";
    } else {
        print "correcto\n";
    }

Naturalmente es muy imprudente dar la propia contraseña a cualquiera que lo pregunte.

La función L<crypt|/crypt> no es apropiada para calcular el hash de grandes volúmenes de información, teniendo en cuenta que no es posible luego volver a obtener la misma información.  Mire en el módulo L<Digest> por algoritmos más robustos.

Si usa crypt() en una cadena Unicode (que I<potencialmente> tiene caracteres con códigos de carácter superiores al 255), Perl intenta darle sentido a la situación intentando hacer una degradación (una copia) de la cadena a una cadena de bytes antes de llamar a crypt() (sobre esa copia).  Si esto funciona, bien.  Si no, crypt() muere con C<Wide character in crypt>.

Cuestiones de portabilidad: L<perlport/crypt>.

=item dbmclose HASH
X<dbmclose>

=for Pod::Functions breaks binding on a tied dbm file

[Esta función ha sido largamente supeditada por la función C<untie>].

Rompe la ligadura entre un archivo DBM y un hash.

Cuestiones de portabilidad: L<perlport/dbmclose>.

=item dbmopen HASH,DBNAME,MÁSCARA
X<dbmopen> X<dbm> X<ndbm> X<sdbm> X<gdbm>

=for Pod::Functions create binding on a tied dbm file

[Esta función ha sido largamente supeditada por la función L<tie|/tie VARIABLE,CLASE,LISTA>].

Liga un archivo dbm(3), ndbm(3), sdbm(3), gdbm(3), o Berkeley DB a un hash.  HASH es el nombre del hash.  (A diferencia de un C<open> normal, el primer argumento I<no> es un identificador de archivo, aunque lo parezca).  NOMBREDB es el nombre de la base de datos (sin la extensión F<.dir> o F<.pag> si las tuviera).  Si la base de datos no existe, se crea con la protección especificada por MÁSCARA (y modificada por C<umask>).  Para evitar la creación de la base de datos en caso de que no existiera, es posible especificar MODO 0, y la función devolverá un valor falso si no puede encontrar una base de datos existente.  Si su sistema sólo soporta las viejas funciones DBM, sólo puede realizar una llamada C<dbmopen> en su programa.  En las viejas versiones de Perl, si el sistema no tenía ni DBM ni ndbm, llamando a C<dbmopen> producía un error fatal; ahora lo intentaría con sdbm(3).

Si no tiene permiso de escritura al archivo DBM, sólo podrá leer las variables hash, pero no asignarlas.  Si quiere comprobar si puede escribir o no, use test de archivo o intente asignar una entrada hash ficticia dentro de un C<eval>, para atrapar el error.

Note que las funciones como C<keys> y C<values> pueden devolver largas listas cuando se usan con archivos DBM grandes.  Puede preferir usar la función C<each> para iterar sobre archivos DBM grandes.  Ejemplo:

    # imprime los desplazamientos en el archivo histórico
    dbmopen(%HIST,'/usr/lib/news/history',0666);
    while (($key,$val) = each %HIST) {
        print $clave, ' = ', unpack('L',$valor), "\n";
    }
    dbmclose(%HIST);

Ver también L<AnyDBM_File> para una descripción más general de los pros y contras de las distintas formas dbm, así como L<DB_File> para ver una implementación particularmente rica.

Puede controlar qué biblioteca DBM usará cargando la biblioteca antes de llamar a dbmopen():

    use DB_File;
    dbmopen(%NS_Hist, "$ENV{HOME}/.netscape/history.db")
        or die "No puedo abrir el archivo histórico del netscape: $!";

Cuestiones de portabilidad: L<perlport/dbmopen>.

=item defined EXPR
X<defined> X<undef> X<undefined> X<definido> X<indefinido>

=item defined

=for Pod::Functions test whether a value, variable, or function is defined

Devuelve un valor Booleano indicando si EXPR tiene un valor que no sea el valor indefinido C<undef>.  Si EXPR no está presente, se comprobará C<$_>.

Muchas operaciones devuelven C<undef> para indicar un error, fin de archivo, error del sistema, variable no inicializada u otras condiciones excepcionales.  Esta función le permite distinguir C<undef> de otros valores.  (Un simple test Booleano no distinguirá entre C<undef>, cero, la cadena vacía y C<"0">, que son todos iguales a falso).  Note que como C<undef> es un escalar válido, su presencia no indica I<necesariamente> una condición excepcional: C<pop> devuelve C<undef> cuando su argumento es un array vacío, I<o> cuando el elemento a devolver sea un C<undef>.

Puede usar también C<defined(&func)> para comprobar si la subrutina C<&func> ha sido definida.  El valor devuelto no queda afectado por ninguna declaración posterior de C<&func>.  Una subrutina que no ha sido definida puede ser ejecutada: su paquete puede tener un método C<AUTOLOAD> que la hace aparecer la primera vez que es llamada; ver L<perlsub>.

El uso de C<defined> sobre datos agregados (hashes y arrays) está desaconsejado.  Se usó para informar si la memoria para los datos agregados había sido reservada.  Este comportamiento puede desaparecer en futuras versiones de Perl.
Utilize en su lugar una comprobación de tamaño:

    if (@un_array) { print "tiene elementos array\n"  }
    if (%a_hash)   { print "el hash tiene miembros\n" }

Cuando se usa con un elemento de un hash, le indica si el valor está definido, no si la clave existe en el hash.  Use L</exists> para este propósito.

Ejemplos:

    print if defined $switch{D};
    print "$valor\n" while defined($valor = pop(@ary));
    die "No puedo enlazar simbólicamente con $sym: $!"
        unless defined($valor = readlink $sym);
    sub foo { defined &$bar ? &$bar(@_) : die "No bar"; }
    $debugging = 0 unless defined $debugging;

Nota: mucha gente tiende a sobrevalorar C<defined> y, para su sorpresa, descubren que el número C<0> y C<""> (la cadena de longitud cero) son, de hecho, valores definidos.  Por ejemplo, si escribe

    "ab" =~ /a(.*)b/;

El patrón de búsqueda tiene éxito y C<$1> está definida, aunque no ha correspondido con "nada".  No ha fallado al corresponder con cualquier cosa.  Más bien, ha coincidido con algo que parece tener cero caracteres de longitud.  Todo esto trata sobre la honradez.  Cuando una función devuelve un valor indefinido, se asume que no puede dar una respuesta honrada.  Así que puede usar C<defined> sólo cuando está cuestionando la integridad de lo que está intentando hacer.  En otras ocasiones, una simple comparación con C<0> o C<""> es lo que necesita.

Ver también L</undef>, L</exists>, L</ref>.

=item delete EXPR
X<delete>

=for Pod::Functions deletes a value from a hash

Dada una expresión que especifica un elemento o una porción de un hash, C<delete> elimina los elementos especificados de este hash de tal forma que exists() en ese elemento ya no devuelve verdadero.  Poner un elemento hash al valor indefinido no elimina su clave, pero eliminándolo sí que lo hace; vea L</exists> .

En contexto de lista, devuelve el valor o los valores borrados, o el último elemento de este tipo en contexto escalar.  La longitud de la lista devuelta siempre coincide con el de la lista de argumentos: eliminar elementos no existentes devuelve el valor indefinido en sus posiciones correspondientes.

delete() puede usarse también en lo arrays y porciones de array, pero su comportamiento es menos claro.  Aunque exists() devolverá falso para entradas eliminadas, eliminar elementos del array nunca cambia los índices de los valores existentes; use en su lugar shift() o splice().  Sin embargo, si cualquiera de los elementos eliminados están al final de un array, el tamaño del array se reduce al de la posición del elemento más alto que aún devuelva verdadero para exists(), o 0 si no hay ninguno.  En otras palabras, un array no tendrá elementos inexistentes al final, después de un delete.

B<AVISO:> Se desaconseja fuertemente llamar a C<delete> en valores de array.  La noción de borrar o comprobar la existencia de elementos de arrays de Perl no es conceptualmente coherente, y puede llevar a un comportamiento sorprendente.

Borrando de C<%ENV> modifica el entorno.  Borrando de un hash atado a un archivo DBM, borra esa entrada del archivo DBM.  Borrando de un hash o array C<atado> no necesariamente devolverá algo; depende de la implementación del método DELETE en el paquete C<atado>, que puede hacer lo que quiera.

La construcción C<delete local EXPR> localiza la eliminación al actual bloque en tiempo de ejecución.  Hasta que un bloque termine, los elementos locales suprimidos, temporalmente, ya no existen.  Ver L<perlsub/"Eliminación local de elementos de tipos compuestos">.

    %hash = (foo => 11, bar => 22, baz => 33);
    $escalar = delete $hash{foo};             # $escalar es 11
    $escalar = delete @hash{qw(foo bar)};     # $escalar es 22
    @array   = delete @hash{qw(foo baz)};     # @array es (undef,33)

Lo siguiente borra (ineficientemente) todos los valores de %HASH y @ARRAY:

    foreach $clave (keys %HASH) {
        delete $HASH{$clave};
    }

    foreach $indice (0 .. $#ARRAY) {
        delete $ARRAY[$indice];
    }

Así como estos:

    delete @HASH{keys %HASH};

    delete @ARRAY[0 .. $#ARRAY];

Pero estos dos son más lentos que simplemente asignar una lista vacía o indefiniendo %HASH o @ARRAY, que es la forma normal de vaciar un agregado:

    %HASH = ();     # vaciar completamente %HASH
    undef %HASH;    # hacer que %HASH nunca existió

    @ARRAY = ();    # vaciar completamente @ARRAY
    undef @ARRAY;   # hacer que @ARRAY nunca existió

La EXPR puede ser tan arbitrariamente complicada con tal de que el final de la operación sea un elemento o una porción de un agregado:

    delete $ref->[$x][$y]{$clave};
    delete @{$ref->[$x][$y]}{$clave1, $clave2, @masclaves};

    delete $ref->[$x][$y][$indice];
    delete @{$ref->[$x][$y]}[$indice1, $indice2, @masindices];

=item die LISTA
X<die> X<throw> X<exception> X<raise> X<$@> X<abort> X<excepción> X<levantar> X<abortar> X<descartar>

=for Pod::Functions raise an exception or bail out

C<die> lanza una excepción.  Dentro de un C<eval()>, el mensaje de error se coloca en C<$@> y el C<eval> termina con el valor I<undef> (indefinido).
Si la excepción está fuera de un C<eval>, entonces la excepción no capturada imprime LISTA al C<STDERR> y sale con un valor no nulo.  Si necesita terminar el proceso con un valor de salida específico, vea L</exit>.

Ejemplos equivalentes:

    die "No puedo cd a spool: $!\n" unless chdir '/usr/spool/news';
    chdir '/usr/spool/news' or die "No puedo entrar en spool/: $!\n"

Si el último elemento de LISTA no acaba en el carácter de nueva línea, se imprimen también el valor actual del número de línea y el actual número de línea de entrada (si existe), junto con un carácter de nueva línea.  Note que el "número de línea de entrada" (también conocido como "chunk" -tarugo-) está sujeto a cualquier noción de "línea" que sea efectiva en ese momento, y también está disponible en la variable especial C<$.>.  Ver L<perlvar/"$/"> y L<perlvar/"$.">.

Consejo: algunas veces añadir C<", parado"> a tu mensaje hará aparecerle con un sentido mejor cuando se le añada la cadena C<"at foo line 123">.
Suponga que está corriendo el script "canasta".

    die "/etc/games no está bien";
    die "/etc/games no está bien, parado";

produce, respectivamente

    /etc/games no está bien at canasta line 123.
    /etc/games no está bien, parado at canasta line 123.

Si la LISTA está vacía y C<$@> ya contiene un valor (típicamente de un eval() anterior) este valor se reutiliza después de añadirle C<"\t...propagated">.
Esto es útil para propagar excepciones:

    eval { ... };
    die unless $@ =~ /Expected exception/;

Si la salida está vacía y C<$@> contiene una referencia a un objeto que tiene un método C<PROPAGATE>, éste método será llamado con los parámetros adicionales del archivo y número de línea.  El valor de retorno reemplaza el valor en C<$@>; es decir, como si se ejecutara C<< $@ = eval { $@->PROPAGATE(__FILE__, __LINE__) }; >>.

Si C<$@> está vacío entonces se usa la cadena C<"Died">.

Si se produce una excepción no detectada en la salida del intérprete, el código de salida se determina a partir de los valores de C<$!> y C<$?> con este pseudocódigo:

    exit $! if $!;              # errno
    exit $? >> 8 if $? >> 8;    # estado de salida del hijo
    exit 255;                   # último recurso

La intención es comprimir la mayor información posible sobre la causa probable en el limitado espacio del código de salida del sistema.  Sin embargo, como C<$!> es el valor de C de C<errno>, que se puede establecer por cualquier llamada al sistema, esto significa que el valor del código de salida utilizada por C<die> puede ser no-previsible, por lo que no debe confiarse en él, aparte de ser distinto de cero.

También puede llamar a C<die> con una referencia como argumento, y si éste queda atrapado en un C<eval>, C<$@> contiene esa referencia.  Esto permite un manejo de las excepciones más elaborado que usando objetos que mantengan un estado arbitrario sobre la naturaleza de la excepción.  Tal esquema es algunas veces preferible a emparejar ciertas cadenas de valores de C<$@> usando expresiones regulares.  Dado que C<$@> es una variable global y C<eval> se puede usar dentro de las implementaciones de objetos, tenga el cuidado que al analizar el objeto error no sustituya la referencia en la variable global.  Es más fácil hacer una copia local de la referencia antes de cualquier manipulación.  Aquí hay un ejemplo:

    use Scalar::Util "blessed";

    eval { ... ; die Some::Module::Exception->new( FOO => "bar" ) };
    if (my $ev_err = $@) {
        if (blessed($ev_err)
            && $ev_err->isa("Algún::Módulo::Excepción")) {
            # gestionar Algún::Módulo::Excepción
        }
        else {
            # gestionar todas las otras posibles excepciones
        }
    }

Como Perl convertirá en cadena de caracteres los mensajes de excepción no capturados antes de mostrarlos, quizás quiera sobrecargar las operaciones de conversión a cadena en objetos de excepción.  Ver L<overload> para los detalles sobre esto.

Puede disponer que una retrollamada se ejecute antes de que C<die> haga sus funciones, actualizando el gancho C<$SIG{__DIE__}>.  El identificador de archivo asociado es llamado con el texto del error y puede cambiar el mensaje de error, si le parece, llamando de nuevo a C<die>.  Ver L<perlvar/%SIG> para los detalles sobre cómo colocar entradas C<%SIG> y L<"eval BLOQUE"> para algunos ejemplos.  Aunque esta característica está preparada para ser ejecutada sólo antes de que el programa termine, así no es como se hace ahora: el gancho C<$SIG{__DIE__}>, ¡es llamado incluso dentro de cadenas y bloques eval()uados!  Si uno quiere que el gancho no haga nada en estas situaciones, ponga

    die @_ if $^S;

como primera línea del controlador (ver L<perlvar/$^S>).  Debido a que provoca una acción extraña a gran distancia, este comportamiento no intuitivo se puede arreglar en una distribución futura.

Ver también exit(), warn() y el módulo Carp.

=item do BLOQUE
X<do> X<block> X<bloque>

=for Pod::Functions turn a BLOCK into a TERM

No es realmente una función.  Devuelve el valor del último comando en la secuencia de comandos indicada por BLOQUE.  Cuando se encuentra acompañado por los modificadores de bucle C<while> o C<until>, ejecuta el BLOQUE una vez antes de comprobar la condición del bucle.  (En otras instrucciones los modificadores de bucle comprueban primero la condición).

C<do BLOQUE> I<no> cuenta como un bucle, así que las instrucciones de control de bucle C<next>, C<last>, o C<redo> no pueden ser usadas para dejar o reiniciar el bloque.
Ver L<perlsyn> para estrategias alternativas.

=item do EXPR
X<do>

Usa el valor de EXPR como el nombre de un archivo y ejecuta los contenidos del archivo como un script Perl.

    do 'stat.pl';

es mayormente como

    eval `cat stat.pl`;

excepto que es más conciso, no ejecuta procesos externos, mantiene el seguimiento del nombre del archivo actual en los mensajes de error, busca en los directorios C<@INC> y actualiza C<%INC> si se encuentra al archivo.  Ver L<perlvar/@INC> y L<perlvar/%INC> por estas variables.  También difiere en que el código evaluado con C<do NOMBREARCHIVO> no puede ver a las variables léxicas en el ámbito en que se ejecuta; C<eval STRING> sí.  Es lo mismo, sin embargo, en que vuelve a interpretar el archivo cada vez que lo llama, así que, probablemente, no querrá hacer esto dentro de un bucle.

Si C<do> puede leer el archivo pero no puede compilarlo, devuelve C<undef> y pone un mensaje de error en C<$@>.  Si C<do> no puede leer el archivo, devuelve undef y pone C<$!> al valor del error.  Siempre revise C<$@> en primer lugar, la compilación puede fallar de una manera que también actualice C<$!>.  Si el archivo se compila bien, C<do> devuelve el valor de la última expresión evaluada.

La inclusión de bibliotecas de módulos es mejor hacerla con los operadores C<use> y C<require>, que también hacen una comprobación automática de errores y generan una excepción si existe algún problema.

Puede usar C<do> para leer en un programa un archivo de configuración.  Comprobación manual de errores se puede hacer así:

    # leer en archivos de configuración: primero el sistema, luego el usuario
    for $archivo ("/share/prog/defaults.rc",
               "$ENV{HOME}/.algunprogramarc")
    {
        unless ($devuelve = do $archivo) {
            warn "no puedo interpretar $archivo: $@" if $@;
            warn "no puedo ejecutar $archivo: $!"    unless defined $devuelve;
            warn "no puedo ejecutar $archivo"        unless $devuelve;
        }
    }

=item dump ETIQUETA
X<dump> X<core> X<undump> X<volcado> X<núcleo>

=item dump EXPR

=item dump

=for Pod::Functions create an immediate core dump

Esta función provoca un volcado inmediato del núcleo de ejecución.  Ver también la opción de línea de comando B<-u> en L<perlrun>, que hace lo mismo.
Principalmente esto se utiliza en conjunción con el programa B<undump> (no suministrado) para convertir tu volcado del núcleo en un binario ejecutable después de haber inicializado todas las variables al comienzo del programa.  Cuando se ejecuta el nuevo binario, comenzará ejecutando un C<goto ETIQUETA> (con todas las restricciones que C<goto> padece).
Piense en él como un goto entre un volcado del núcleo y una reencarnación.
Si se omite C<ETIQUETA>, reinicia el programa desde el principio.  La forma C<dump EXPR>, disponible a partir de Perl 5.18.0, permite que un nombre sea computado en tiempo de ejecución o, de lo contrario, es idéntico a C<dump LABEL>.

B<ATENCIÓN>: Cualquier archivo abierto en el momento del volcado I<no> será abierto mas que cuando el programa sea reencarnado, con una muy posible confusión por parte de Perl.

Esta función es obsoleta desde hace mucho tiempo, en parte porque es muy difícil convertir un volcado del núcleo en un ejecutable.  Y es por esto que debe invocarlo como C<CORE::dump()>, si no quiere recibir un aviso de que posiblemente ha cometido una falta ortográfica.

A diferencia de otros operadores con nombre, tiene la misma precedencia que una asignación.
También está exenta de la regla se-parece-a-una-función, así que C<dump ("foo")."bar"> hará que "bar" sea parte del argumento a C<dump>.

Cuestiones de portabilidad: L<perlport/dump>.

=item each HASH
X<each> X<hash, iterator> X<hash, iterador>

=item each ARRAY
X<array, iterator> X<array, iterador>

=item each EXPR

=for Pod::Functions retrieve the next key/value pair from a hash

Cuando se llama en un hash en contexto de lista, devuelve una lista de dos elementos consistentes en la clave y el valor del siguiente elementos del hash.  En Perl 5.12 y superiores, también devolverá el índice y el valor del siguiente elemento de un array, de modo que puede iterar sobre él; Perl más antiguos consideran esto como un error de sintaxis.  Cuando se le llama en contexto escalar, sólo devuelve la clave (no el valor) del hash, o el índice del array.

Las entradas de un hash son devueltas en un aparente orden aleatorio.  El orden aleatorio real es específico a un hash dado; las mismas series de operaciones en dos hashes pueden resultar en diferentes órdenes para cada hash.  Cualquier inserción en el hash puede cambiar el orden, así como cualquier eliminación, con la excepción de que la clave más reciente devuelta por C<each> o C<keys> puede ser borrada sin que cambie el orden.  Siempre y cuando no se modifique un determinado hash puede confiar en que C<keys>, C<values> y C<each> devuelvan repetidamente lo mismo en el mismo orden.  Vea L<perlsec/"Ataques de complejidad algorítmica"> para los detalles de por qué el orden en un hash se aleatoriza.  Aparte de las garantías proporcionadas aquí los detalles exactos de algoritmo que usa Perl para recorrer un hash está sujeto a cambio en cualquier lanzamiento de Perl.

Después de que C<each> haya devuelto todas las entradas del hash o del array, la siguiente llamada a C<each> devuelve la lista vacía, en contexto lista, y C<undef> en contexto escalar; la siguiente llamada a I<ésa> reiniciará la iteración.
Cada hash o array tiene su propio iterador interno, accedido por C<each>, C<keys>, y C<values>.  El iterador es implícitamente restablecido cuando C<each> ha llegado al final como se acaba de describir; puede ser explícitamente restablecido llamando a C<keys> o C<values> sobre el hash o array.  Si añade o borra un elemento de un hash mientras está iterando sobre él, el efecto sobre el iterador no está especificado; por ejemplo, puede encontrarse con entradas desaparecidas o duplicadas, así que, es mejor que no lo haga.  Excepción: siempre es seguro borrar el último elemento devuelto por C<each()>, por lo que entonces el siguiente código funcionará correctamente:

        while (($clave, $valor) = each %hash) {
          print $clave, "\n";
          delete $hash{$clave};   # Esto es seguro hacerlo
        }

Hash enlazados pueden tener un comportamiento de ordenación diferente a la implementación de los hashes de perl.

Esto imprime su entorno como el programa printenv(1), sólo que en un orden diferente:

    while (($clave,$valor) = each %ENV) {
        print "$clave=$valor\n";
    }

A partir de Perl 5.14, C<each> puede tomar una EXPR escalar, que debe contener la referencia a un hash o un array no bendecido.  El argumento se desreferencia automáticamente.  Este aspecto de C<each> se considera altamente experimental.
El comportamiento exacto puede cambiar en una futura versión de Perl.

    while (($clave,$valor) = each $hashref) { ... }

A partir de Perl 5.18 puede usar un simple C<each> en un bucle C<while>, que actualizará C<$_> en cada iteración.

    while(each %ENV) {
	print "$_=$ENV{$_}\n";
    }

Para no confundir a los posibles usuarios de su código, que ejecuten versiones anteriores de Perl, con errores de sintaxis misteriosos, ponga este tipo de cosas en la parte superior de su archivo para indicar que el código funciona I<sólo> en versiones Perl de cosechas recientes:

    use 5.012;  # así keys/values/each trabajan sobre arrays
    use 5.014;  # así keys/values/each trabajan sobre escalares (experimental)
    use 5.018;  # para que each actualice $_ en un test de un while

Vea también C<keys>, C<values> y C<sort>.

=item eof IDENTIFICADOR_ARCHIVO
X<eof> X<end of file> X<end-of-file> X<fin de archivo>

=item eof ()

=item eof

=for Pod::Functions test a filehandle for its end

Devuelve 1 si la siguiente lectura sobre IDENTIFICADOR_ARCHIVO devolverá un fin-de-archivo, I<o> si IDENTIFICADOR_ARCHIVO no está abierto.  IDENTIFICADOR_ARCHIVO puede ser una expresión cuyo valor da el identificador de archivo real.  (Note que esta función realmente lee un carácter y luego hace un C<ungetc>, así que no es útil en un contexto interactivo).  No lea de un archivo del que se ha llegado al final (o vuelva a llamar a C<eof(IDENTIFICADOR_ARCHIVO)> sobre él) después de haber alcanzado un fin-de-archivo.  Tipos de archivos como por ejemplo terminales pueden perder la condición de fin-de-archivo si lo hace.

Un C<eof> sin argumento usa el último archivo leído.  Usar C<eof()> con paréntesis vacíos es diferente.  Se refiere a un pseudo archivo formado por los archivos listados en la línea de comandos y accedidos vía el operador C<< <> >>.  Como C<< <> >> no es explícitamente abierto, como lo sería un identificador de archivo, un C<eof()> antes de que un C<< <> >> sea usado, causará que C<@ARGV> sea examinado para determinar si la entrada está disponible.   De forma semejante, un C<eof()> después de que un C<< <> >> haya devuelto un fin-de-archivo asumirá que está procesando otra lista C<@ARGV>, y si no ha puesto un nuevo C<@ARGV>, leerá la entrada desde C<STDIN>; ver L<perlop/"Operadores E/S">.

En un bucle C<< while (<>) >>, C<eof> o C<eof(ARGV)> pueden usarse para detectar el fin de un archivo, mientras que C<eof()> sólo detectará el final del último archivo.  Ejemplos:

    # reiniciar el numerado de líneas en cada archivo de entrada
    while (<>) {
        next if /^\s*#/;  # salta los comentarios
        print "$.\t$_";
    } continue {
        close ARGV if eof;  # ¡No eof()!
    }

    # inserta guiones justo antes de la última línea del último archivo
    while (<>) {
        if (eof()) {  # check for end of last file
            print "--------------\n";
        }
        print;
        last if eof();     # necesario si estamos leyendo de una terminal
    }

Truco práctico: casi nunca necesita usar C<eof> en Perl, porque los operadores de entrada normalmente devuelven C<undef> cuando no hay más datos, o si se produce un error.

=item eval EXPR
X<eval> X<try> X<catch> X<evaluate> X<parse> X<execute> X<error, handling> X<exception, handling> X<manejo de excepciones> X<interpretar>

=item eval BLOQUE

=item eval

=for Pod::Functions catch exceptions or compile and run code

En la primera forma, a menudo referido como una "evaluación de cadena de caracteres", el valor devuelto por EXPR es interpretado y ejecutado como si fuera un pequeño programa Perl.  El valor de la expresión (que es en sí mismo determinada en contexto escalar) es primero interpretada, y si no hay ningún error, ejecutada como un bloque dentro del contexto léxico del actual programa Perl.  Esto significa que, en particular, cualquier otra variable léxica externa es visible dentro de ella, y la configuración de variable de paquete o de subrutinas y las definiciones de formato siguen permaneciendo.

Note que el valor se interpreta cada vez que se ejecuta C<eval>.
Si EXPR se omite, se evalúa C<$_>.  Esta forma es típicamente usada para retrasar el interpretado subsecuente ejecución del texto de EXPR hasta el momento de la ejecución.

Si la característica C<unicode_eval> está habilitada (que lo es por defecto con una declaración C<use 5.16> o superior), EXPR o C<$_> se tratan como una cadena de caracteres, así que las declaraciones C<use utf8> no tienen efecto, y los filtros de código fuente quedan prohibidos.  En ausencia de la característica C<unicode_eval>, la cadena a veces será tratada como caracteres y, otras veces como bytes, dependiendo de la codificación interna, y los filtros de código fuente activados dentro de C<eval> muestran el comportamiento errático, pero histórico, de afectar a algún archivo externo que todavía se está compilando.  Vea también la palabra clave L</evalbytes>, que siempre trata su entrada como un flujo de bytes y funciona correctamente con filtros de código fuente, y el pragma L<feature>.

Los problemas pueden surgir si la cadena de caracteres expande a un escalar conteniendo un número
en punto flotante.  El escalar se puede expandir a letras, como en C<"NaN"> o C<"Infinity">; o, dentro del ámbito de un C<use locale>, el punto decimal puede ser otra cosa cualquiera aparte de un punto (como una coma).
Es muy posible que ninguno de estos sean interpretados como se espera.

En la segunda forma, el código en el interior de BLOQUE se interpreta sólo una vez, -al mismo tiempo que el código que rodea al propio C<eval> es interpretado-, y se ejecuta dentro del contexto del actual programa Perl.  Esta forma es típicamente usada para atrapar excepciones más eficientemente que la primera forma (ver arriba), mientras que también provee del beneficio de comprobar el código dentro del BLOQUE en tiempo de compilación.

El último punto y coma, si lo hay, puede ser omitido del valor de EXPR o dentro de BLOQUE.

En ambas formas, el valor devuelto es el valor de la última expresión evaluada dentro del mini-programa; una instrucción return se puede usar también, como si fuera una subrutina.  La expresión que da el valor de retorno se evalúa en contexto vacío (void), escalar o lista, dependiendo del contexto en que se encuentre el C<eval>.  Ver L</wantarray> para saber cómo determinar el contexto de la evaluación.

Si hay algún error de sintaxis o en tiempo de ejecución, o se ejecuta una instrucción C<die>, C<eval> devuelve C<undef> en contexto escalar o una lista vacía en contexto lista, y C<$@> se inicializa al mensaje de error.  (Antes de 5,16, un error causaba que C<undef> era devuelto en contexto de lista para errores de sintaxis, pero no para errores en tiempo de ejecución).
Si no hay errores, se garantiza que C<$@> será una cadena vacía.  Un operador de control de flujo como C<last> o C<goto> puede pasar por alto el valor de C<$@>.  Tenga cuidado porque usar C<eval> ni silencia a Perl a la hora de imprimir avisos al STDERR, ni rellena el texto de los mensajes de aviso dentro de C<$@>.
Para hacer cualquiera de estas dos cosas debe usar C<$SIG{__WARN__}>, o desactivar los avisos dentro del BLOQUE o EXPR usando S<C<no warnings 'all'>>.
Vea L</warn>, L<perlvar>, y L<warnings>.

Note que, como C<eval> atrapa errores considerados fatales, es útil para determinar cuando una característica en particular (como C<socket> o C<symlink>) está implementada.  También es el mecanismo de captura de excepciones, donde el operador die se usa para levantar excepciones.

Si desea capturar los errores cuando se carga un módulo XS, algunos problemas con la interfaz binaria (como el sesgo de versión de Perl) puede ser fatal, incluso con C<eval> a menos que C<$ENV{PERL_DL_NONLAZY}> esté puesto.  Vea L<perlrun>.

Si el código a ser ejecutado no varía, puede usar la forma BLOQUE de eval para atrapar errores en tiempo de ejecución sin incurrir en la penalidad de recompilar cada vez.  El error, si está, es devuelto en C<$@>.
Ejemplos:

    # hace la división-por-cero no fatal
    eval { $respuesta = $a / $b; }; warn $@ if $@;

    # lo mismo, pero menos eficiente
    eval '$respuesta = $a / $b'; warn $@ if $@;

    # un error en tiempo de compilación
    eval { $respuesta = }; # MAL

    # un error en tiempo de ejecución
    eval '$respuesta =';   # actualiza $@

Usar la forma C<eval{}> como una trampa de excepciones en bibliotecas puede tener algunos problemas.  Debido al posible mal estado de la llamada C<__DIE__>, quizás deseé no activar ninguna de las llamadas C<__DIE__> que el código de usuario puede haber instalado.
Puede usar la construcción C<local $SIG{__DIE__}> para este propósito, como muestra este ejemplo:

    # un trampa privada para una excepción de división-por-cero
    eval { local $SIG{'__DIE__'}; $respuesta = $a / $b; };
    warn $@ if $@;

Esto es especialmente significativo, dado que las llamadas C<__DIE__> pueden llamar de nuevo a C<die>, que tiene el efecto de cambiar los mensajes de error:

    # llamadas __DIE__ pueden modificar los mensajes de error
    {
       local $SIG{'__DIE__'} =
              sub { (my $x = $_[0]) =~ s/foo/bar/g; die $x };
       eval { die "foo vive aquí" };
       print $@ if $@;                # imprime "bar vive aquí"
    }

Debido a que provoca una acción extraña a gran distancia, este comportamiento no intuitivo se puede arreglar en una futura distribución.

Dentro de C<eval>, debe, especialmente, recordar que es lo que está haciendo en cada momento:

    eval $x;        # CASO 1
    eval "$x";      # CASO 2

    eval '$x';      # CASO 3
    eval { $x };    # CASO 4

    eval "\$$x++";  # CASO 5
    $$x++;          # CASO 6

Los casos 1 y 2 se comportan idénticamente: ejecutan el código contenido en la variable $x.  (Aunque el caso 2 tiene unas engañosas dobles comillas haciendo maravillar al lector de qué es lo que puede pasar -que es nada-).  Los casos 3 y 4 se comportan de la misma manera: ejecutan el código C<'$x'>, que no hace nada excepto devolver el valor de $x.  (El caso 4 es el preferido por razones puramente visuales, pero también tiene la ventaja de la compilación en tiempo de compilación en lugar de en tiempo de ejecución).  Caso 5 es aquel donde normalmente I<debería> usar dobles comillas, excepto que en esta situación en particular, puede usar en su lugar referencias simbólicas, como en el caso 6.

Antes de Perl 5.14, la asignación a C<$@> ocurría antes de la restauración de las variables localizadas, lo que significa que su código, al ejecutarse en versiones anteriores, requería de una variable temporal si deseaba enmascarar algunos pero no todos los errores:

    # altera $@ solo en una infame repugnancia
    {
       my $e;
       {
         local $@; # proteger el actual $@
         eval { test_repugnancia() };
         # $@ =~ /infame/ and die $@; # sólo en Perl 5.14 y superiores
         $@ =~ /infame/ and $e = $@;
       }
       die $e if defined $e
    }

C<eval BLOQUE> I<no> cuenta como un bucle, así que las instrucciones de control de bucle C<next>, C<last>, o C<redo> no pueden ser usadas para dejar o reiniciar el bloque.

Un C<eval ''> ejecutado dentro de una subrutina definida en el paquete C<DB> no ve el usual ámbito léxico circundante, sino más bien el ámbito de la primera parte del código no-DB que le llamó.  No necesita preocuparse de esto a menos que esté escribiendo un depurador Perl.

=item evalbytes EXPR
X<evalbytes>

=item evalbytes

=for Pod::Functions +evalbytes similar to string eval, but intend to parse a bytestream

Esta función es como L</eval> con un argumento de cadena, excepto que siempre analiza su argumento o C<$_> si EXPR es omitido, como una cadena de bytes.  Una cadena que contenga caracteres cuyo valor ordinal supere el 255 resulta en un error.  Los filtros de código fuente activados dentro del código evaluado se aplican al propio código.

Esta función sólo está disponible bajo la característica C<evalbytes>, una declaración C<use v5.16> (o superior), o con un prefijo C<CORE::>.  Vea L<feature> para más información.

=item exec LISTA
X<exec> X<execute> X<ejecutar>

=item exec PROGRAMA LISTA

=for Pod::Functions abandon this program to run another

La función C<exec> ejecuta un comando del sistema I<y nunca regresa>; use C<system> en lugar de C<exec> si quiere que regrese.  Fallará y devolverá falso sólo si el comando no existe I<y> se ejecuta directamente en lugar de hacerlo con el shell de comandos del sistema (ver abajo).

Como es un error normal usar C<exec> en lugar de C<system>, Perl le avisará si C<exec> es llamado en contexto vacío, y si hay alguna instrucción a continuación que no sea C<die>, C<warn> o C<exit> (si C<-w> está puesto -pero usted, siempre lo tiene así, ¿verdad?-).  Si I<verdaderamente> quiere continuar un C<exec> con otra instrucción, puede usar algunas de estas formas para evitar el aviso:

    exec ('foo')   or print STDERR "no puedo exec foo: $!";
    { exec ('foo') }; print STDERR "no puedo exec foo: $!";

Si hay más de un argumento en LISTA, se llama a execvp(3) con los argumentos de LISTA.  Si sólo hay un elemento en la LISTA, se comprueba si el argumento tiene metacaracteres shell, y si lo hay, el argumento entero es pasado al shell de comandos para que sea interpretado (suele ser C</bin/sh -c> en plataformas Unix, pero varía en otras).  Si no hay metacaracteres shell en el argumento, se divide en palabras y pasadas directamente a C<execvp>, que es más eficiente.  Ejemplos:

    exec '/bin/echo', 'Tus argumentos son: ', @ARGV;
    exec "sort $salida | uniq";

Si de verdad no quiere ejecutar el primer argumento, pero quiere engañar al programa que está ejecutando sobre su propio nombre, puede especificar el programa que realmente quiere ejecutar como un "objeto indirecto" (sin la coma) enfrente de la LISTA, como en C<exec PROGRAMA LISTA>.  (Esto siempre fuerza la interpretación de la LISTA como una lista multievaluada, incluso si sólo hay un único escalar en la lista).  Ejemplo:

    $shell = '/bin/csh';
    exec $shell '-sh';    # finge que es un shell de login

o, más directamente,

    exec {'/bin/csh'} '-sh';  # finge que es un shell de login

Cuando los argumentos se ejecutan por medio del shell del sistema, los resultados están sujetos a sus peculiaridades y capacidades.  Ver L<perlop/"`STRING`"> para los detalles.

Usar un objeto indirecto con C<exec> o C<system> es también más seguro.  Este uso (que también funciona bien con system()) fuerza la interpretación de los argumentos como una lista multievaluada, incluso si la lista sólo tiene un argumento.  De esta forma estará protegido de la expansión de los comodines del shell o de la división en palabras con un espacio en blanco dentro de ellas.

    @args = ( "echo sorpresa" );

    exec @args;                 # sujeto al escapado shell
                                # si @args == 1
    exec { $args[0] } @args;    # seguro incluso con una lista de un argumento

La primera versión, sin el objeto indirecto, ejecuta el programa I<echo>, pasándole C<"sorpresa"> como argumento.  La segunda versión no; intentó ejecutar un programa llamado literalmente I<"echo sorpresa">, no lo encontró, y puso C<$?> a un valor distinto de cero para indicar un error.

En Windows, solo la sintaxis de objetos indirecto en C<exec PROGRAMA LISTA> evitará, de forma efectiva, evitar usar la shell; C<exec LISTA>, incluso con más de un elemento, volverá a usar la shell si falla el primer intento de lanzamiento.

Perl intenta vaciar todos los archivos abiertos para salida antes de ejecutar exec, pero esto puede no estar soportado en algunas plataformas (vea L<perlport>).
Para estar seguros, puede necesitar poner C<$|> ($AUTOFLUSH en el módulo English) o llamar al método C<autoflush()> de C<IO::Handle> en cualquiera de los gestores de archivo abiertos para evitar la pérdida de datos en la salida.

Note que C<exec> no llamará a sus bloques C<END>, ni llamará a ningún método C<DESTROY> de sus objetos.

Cuestiones de portabilidad: L<perlport/exec>.

=item exists EXPR
X<exists> X<autovivification> X<autovivificación>

=for Pod::Functions test whether a hash key is present

Dada una expresión que especifica un elemento de un hash, devuelve verdadero si el elemento especificado en el hash ha sido inicializado, incluso si el correspondiente valor está indefinido.

    print "Existe\n"    if exists  $hash{$clave};
    print "Definido\n"  if defined $hash{$clave};
    print "Verdadero\n" if $hash{$clave};

exists también pueden ser llamado sobre elementos de array, pero su comportamiento es mucho menos evidente, y está fuertemente atado a la utilización de L</delete> en arrays.

B<AVISO:> Se desaconseja fuertemente llamar a C<exists> en valores de array.  La noción de borrar o comprobar la existencia de elementos de arrays de Perl no es conceptualmente coherente, y puede llevar a un comportamiento sorprendente.

    print "Existe\n"    if exists  $array[$indice];
    print "Definido\n"  if defined $array[$indice];
    print "Verdadero\n" if $array[$index];

Un elemento de un hash o de un array puede ser verdadero sólo si está definido, y está definido solo si ya existe, pero lo inverso no es necesariamente cierto.

Dada una expresión que especifica el nombre de una subrutina, devuelve verdadero si la subrutina especificada ha sido declarada, incluso si esta está indefinida.  Mencionar el nombre de una subrutina para saber si existe o está definida no cuenta como si fuera su declaración.  Note que puede llamarse a una subrutina que no existe: su paquete puede tener un método C<AUTOLOAD> que la hace aparecer la primera vez que se le llama; ver L<perlsub>.

    print "Existe\n"   if exists  &subrutina;
    print "Definido\n" if defined &subrutina;

Note que EXPR puede ser todo lo arbitrariamente complicada que se quiera con tal de que la operación final sea un escalar de un hash o de un array o el nombre de una subrutina:

    if (exists $ref->{A}->{B}->{$clave})  { }
    if (exists $hash{A}{B}{$clave})       { }

    if (exists $ref->{A}->{B}->[$i])      { }
    if (exists $hash{A}{B}[$i])           { }

    if (exists &{$ref->{A}{B}{$clave}})   { }

Aunque el array o hash más profundamente anidado no se autovivifique sólo por que su existencia sea comprobada, cualquiera de los niveles intermedios sí que lo hará.
Así. C<< $ref->{"A"} >> y C<< $ref->{"A"}->{"B"} >> aparecerán en la existencia debido al actual test por el elemento $clave.
Esto sucede en cualquier parte en que se use el operador flecha, incluso aquí:

    undef $ref;
    if (exists $ref->{"Alguna clave"})    { }
    print $ref;  # imprime HASH(0x80d3d5c)

Esta sorprendente autovivificación en que al primer vistazo -o incluso al segundo- parece que es un contexto valor-izquierda quizás será arreglado en una futura distribución.

Usar una llamada de subrutina en lugar del nombre de una subrutina como argumento a exists() es un error.

    exists &sub;    # OK
    exists &sub();  # Error

=item exit EXPR
X<exit> X<terminate> X<abort> X<abortar> X<terminar> X<salir>

=item exit

=for Pod::Functions terminate this program

Evalúa EXPR y sale inmediatamente con este valor.    Ejemplo:

    $ans = <STDIN>;
    exit 0 if $ans =~ /^[Xx]/;

Ver también C<die>.  Si EXPR es omitida, sale con estado C<0>.  Los únicos valores universalmente reconocidos para EXPR son C<0> para éxito y C<1> para error; otros valores están sujetos a interpretación dependiendo del entorno en que el programa Perl está corriendo.  Por ejemplo, saliendo con 69 (EX_UNAVAILABLE) desde un filtrado de un correo entrante hacia I<sendmail> hará que el despachador de correo devuelva el elemento sin entregar, pero no siempre es cierto.

No use C<exit> para abortar una subrutina si existe la posibilidad de que alguien pueda capturar el error que ocurrió.  Use en su lugar C<die>, que puede ser atrapado por un C<eval>.

La función exit() no siempre sale de forma inmediata.  exit() llama primero a cualquier rutina definida C<END>, pero estas rutinas C<END> pueden abortar la salida por sí mismas.  Igualmente cualquier destructor de objetos que necesite ser llamado, lo será antes de la salida real.  Las rutinas C<END> y los destructores pueden cambiar el estado de salida modificando C<$?>.  Si esto es un problema, puede llamar a C<POSIX:_exit($estado)> para saltar el procesado de END y de los destructores.
Ver L<perlmod> para los detalles.

Cuestiones de portabilidad: L<perlport/exit>.

=item exp EXPR
X<exp> X<exponential> X<antilog> X<antilogarithm> X<e> X<exponencial> X<anti logaritmo>

=item exp

=for Pod::Functions raise I<e> to a power

Devuelve I<e> (la base natural del logaritmo) a la potencia de EXPR.
Si EXPR se omite, devuelve C<exp($_)>.

=item fc EXPR
X<fc> X<foldcase> X<casefold> X<fold-case> X<case-fold>
X<plegado de caja> X<plegado-caja> X<cambio de caja>

=item fc

=for Pod::Functions +fc return casefolded version of a string

Devuelve la versión de EXPR con los tamaños de caja cambiados.  Esta es la función interna de la secuencia de escapado C<\F> en las cadenas doblemente entrecomilladas.

El plegado de caja es el proceso de trasladar cadenas de una forma donde las diferencias de caja son eliminadas; comparar dos cadenas en sus formas plegadas es una forma efectiva de averiguar si las dos cadenas son iguales, independientemente de su tamaño de caja.

A grandes rasgos, si ha encontrado alguna vez escribiendo algo como esto

    lc($esto) eq lc($eso)    # ¡Incorrecto!
        # o
    uc($esto) eq uc($eso)    # ¡También incorrecto!
        # o
    $esto =~ /^\Q$eso\E\z/i  # ¡Correcto!

Ahora puede escribirlo como

    fc($esto) eq fc($eso)

Y obtener los resultados correctos.

Perl sólo implementa la forma completa de plegado de caja, pero puede realizar plegados sencillas usando L<Unicode::UCD/casefold()> y L<Unicode::UCD/prop_invmap()>.
Para más información sobre plegado de caja, consulte el Estándar Unicode, específicamente las secciones 3.13 C<Default Case Operations>, 4.2 C<Case-Normative>, y 5.18 C<Case Mappings>, disponible en L<http://www.unicode.org/versions/latest/>, así como los C<Case Charts> disponibles en L<http://www.unicode.org/charts/case/>.

Si se omite EXPR, se usa C<$_>.

Esta función se comporta de la misma manera bajo varios pragma, como en S<C<"use feature 'unicode_strings">>, como lo hace L</lc>, con la única excepción de C<fc> de LATIN CAPITAL LETTER SHARP S (U+1E9E) dentro del ámbito de S<C<use locale>>.  El plegado de caja de este carácter normalmente sería C<"ss">, pero como se ha explicado en la sección de L</lc>, los cambios de caja que cruzan la frontera 255/256 son problemáticos bajo los locales, y es por ello que se prohibió.  Por tanto, esta función bajo locale devuelve en su lugar la cadena de caracteres C<"\x{17F}\x{17F}">, la cual es la LATIN SMALL LETTER LONG S. Ya que este carácter se pliega a si mismo a una C<"s">, la cadena de caracteres de dos
de ellas juntas tendría que ser equivalente a un solo U+1E9E cuándo se plegase.

Mientras que el Estándar Unicode define dos formas adicionales de plegado de caja, una para las lenguas turcas y otra que nunca asigna un carácter en múltiples caracteres, éstas no son proporcionadas por el núcleo de Perl; sin embargo, el módulo CPAN C<Unicode::Casing> se puede utilizar para proporcionar una implementación.

Esta palabra clave sólo está disponible cuando la característica C<"fc"> está habilitada, o cuando está prefijada con C<CORE::>. Vea L<feature>.  O de otra forma, incluya un C<use v5.16> o posterior en el ámbito actual.

=item fcntl IDENTIFICADOR_ARCHIVO,FUNCIÓN,ESCALAR
X<fcntl>

=for Pod::Functions file control system call

Implementa la función fcntl(2).  Probablemente escribirá

    use Fcntl;

primero para obtener las definiciones de las constantes.  El procesado de argumentos y el valor devuelto funcionan como C<ioctl>.
Por ejemplo:

    use Fcntl;
    fcntl($identificador, F_GETFL, $búfer_retorno_empaquetado)
        or die "no puedo hacer fcntl F_GETFL: $!";

No necesita comprobar con C<defined> al regreso de C<fcntl>.
Como C<ioctl>, mapea un C<0> devuelto de la llamada del sistema en un C<"0 but true"> ("0 pero cierto") en Perl.  Esta cadena es verdadero en contexto booleano y C<0> en contexto numérico.  También es una excepción en el sistema de avisos B<-w> sobre conversiones numéricas impropias.

Tenga en cuenta que C<fcntl> levanta una excepción si se utiliza en una máquina que no implemente fcntl(2).  Ver el módulo Fcntl o la página de manual fcntl(2) para aprender qué funciones están disponibles en su sistema.

Aquí hay un ejemplo de poner un identificador de archivo llamado C<REMOTE> a no bloqueante a nivel de sistema.  Aunque, tendrá que negociar también con C<$|>.

    use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);

    $flags = fcntl(REMOTE, F_GETFL, 0)
                or die "No puedo obtener los flags para el socket: $!\n";

    $flags = fcntl(REMOTE, F_SETFL, $flags | O_NONBLOCK)
                or die "No puedo poner los flags para el socket: $!\n";

Cuestiones de portabilidad: L<perlport/fcntl>.

=item __FILE__
X<__FILE__>

=for Pod::Functions the name of the current source file

Un I<token> especial que devuelve el nombre del archivo en el que aparece.

=item fileno IDENTIFICADOR_ARCHIVO
X<fileno>

=for Pod::Functions return file descriptor from filehandle

Devuelve el descriptor de archivo para un identificador de archivo, o indefinido si el identificador de archivo no está abierto.  Si no hay un descriptor de archivo real al nivel del sistema operativo, como puede suceder con identificadores de archivo relacionados con objetos de memoria a través de C<open> con una referencia para el tercer argumento, se devuelve -1.

Esto es principalmente útil para construir bitmaps para C<select> y operaciones POSIX de bajo nivel sobre tty.
Si el IDENTIFICADOR_ARCHIVO es una expresión, el valor se toma como un identificador de archivo indirecto, generalmente su nombre.

Puede usar esto para encontrar cuándo dos identificadores de archivos se refieren al mismo descriptor subyacente:

    if (fileno(THIS) != -1 && fileno(THIS) == fileno(THAT)) {
        print "THIS y THAT son duplicados\n";
    } elsif (fileno(THIS) != -1 && fileno(THAT) != -1) {
        print "THIS y THAT son diferentes " .
            "descriptores de archivo subyacentes\n";
    } else {
        print "Al menos uno de THIS o THAT " .
            "no tienen un descriptor a un archivo real\n";
    }

El comportamiento de C<fileno> en un gestor de directorio depende del sistema operativo.  En un sistema con dirfd(3) o similar, C<fileno> en un gestor de directorio devuelve el descriptor de archivo subyacente asociados con el gestor; en sistemas que no lo soportan, devuelve el valor indefinido, y establece C<$!> (errno).

=item flock IDENTIFICADOR_ARCHIVO,OPERACIÓN
X<flock> X<lock> X<locking>

=for Pod::Functions lock an entire file with an advisory lock

Llama a flock(2), o una emulación de ella, sobre IDENTIFICADOR_ARCHIVO.  Devuelve verdadero para éxito, falso en caso de error.  Produce un error fatal si se usa en una máquina que no implemente flock(2), bloqueo fcntl(2), o lockf(3).
C<flock> es el interfaz portable de Perl para e bloqueo de archivo, aunque sólo bloquea archivos enteros, no registros.

Dos, potencialmente no obvias, pero tradicionales semánticas de C<flock> son: que espera indefinidamente hasta que el bloqueo se concede, y que sus cerrojos son B<meramente consultivos>.  Tales bloqueos, discrecionalmente, son más flexibles, pero ofrecen pocas garantías.  Esto significa que los programas que no usen C<flock> pueden modificar archivos bloqueados con C<flock>.  Vea L<perlport>, la documentación específica de su adaptación Perl, y sus páginas de manual locales, para los detalles.  Es mejor asumir el comportamiento tradicional si está escribiendo programas portables.  (Pero si no, puede siempre sentirse libre de escribir sus propias idiosincrasias del sistema (algunas veces llamadas "features" -características-).  Adhesión servil a los requerimientos de portabilidad no debe impedirle obtener el trabajo hecho).

OPERACIÓN es una de LOCK_SH, LOCK_EX, o LOCK_UN, posiblemente combinado con LOCK_NB.  Estas constantes tienen, tradicionalmente, los valores 1, 2, 8 y 4, pero puede usar los nombres simbólicos si los importa con el módulo L<Fcntl>, tanto de forma individual o como un grupo usando la marca C<:flock>.  LOCK_SH solicita un bloqueo compartido, LOCK_EX solicita un bloqueo exclusivo y LOCK_UN devuelve un bloqueo solicitado previamente.  Si LOCK_NB se combina a nivel de bit con 'or' con LOCK_SH o LOCK_EX entonces C<flock> regresa inmediatamente en vez de bloquear esperando por el cerrojo; compruebe el valor de estado devuelto para ver si lo ha conseguido.

Para evitar la posibilidad de descoordinación, Perl ahora vacía el IDENTIFICADOR_ARCHIVO antes de bloquearlo o desbloquearlo.

Note que la emulación integrada con lockf(3) no provee de bloqueos compartidos y requiere que el IDENTIFICADOR_ARCHIVO sea abierto con intención de escribir en el.  Estas son las semánticas que lockf(3) implementa.  La mayor parte si no todos los sistemas implementan lockf(3) en términos de bloqueo con fcntl(2), aunque, las diferencias en la semántica no llame la atención a mucha gente.

Note que la emulación de fcntl(2) de flock(3) requiere que IDENTIFICADOR_ARCHIVO sea abierto con intención de leer para usar LOCK_SH y requiere ser abierto con intención de escribir para usar LOCK_EX.

Note también que algunas versiones de C<flock> no pueden bloquear cosas sobre la red; necesitará usar un C<fcntl> más específico del sistema para hacer esto.  Si le gusta, puede forzar a Perl a que ignore la función de su sistema flock(2) y proveer de su propia emulación basada en fcntl(2), pasando la opción C<-Ud_flock> al programa F<Configure> cuando configure y compile un nuevo Perl.

Esto es un agregador de correo para sistemas BSD.

    # importa constantes LOCK_* y SEEK_END
    use Fcntl qw(:flock SEEK_END);

    sub lock {
        my ($fh) = @_;
        flock($fh, LOCK_EX) or die "No puedo bloquear el buzón - $!\n";

        # y, en caso de que alguien haya añadido algo mientras esperábamos...
        seek($fh, 0, SEEK_END) or die "No puedo posicionarme - $!\n";
    }

    sub unlock {
        my ($fh) = @_;
        flock($fh, LOCK_UN) or die "No puedo desbloquear el buzón - $!\n";
    }

    open(my $mbox, ">>", "/usr/spool/mail/$ENV{'USER'}")
        or die "No puedo abrir el buzón: $!";

    lock($mbox);
    print $mbox $msg,"\n\n";
    unlock($mbox);

En sistemas que soportan un flock(2) de verdad, los bloqueos se heredan a través de las llamadas fork(), teniendo en cuenta que se recurrirá a la caprichosa función fcntl(2) que pierde sus bloqueos, haciendo difícil escribir servidores.

Ver también L<DB_File> para otros ejemplos de flock().

Cuestiones de portabilidad: L<perlport/flock>.

=item fork
X<fork> X<child> X<parent> X<hijo> X<padre>

=for Pod::Functions create a new process just like this one

Hace una llamada del sistema fork(2) para crear un nuevo proceso ejecutando el mismo programa en el mismo punto.  Devuelve el pid del hijo al proceso padre, C<0> al proceso hijo, o C<undef> si no se consiguió el fork.  Descriptores de archivo (y algunas veces bloqueos en estos descriptores) son compartidos, mientras que todo lo demás es copiado.  En la mayoría de los sistemas que soportan fork(), se ha tenido gran cuidado en hacerlo extremadamente eficiente (por ejemplo, usando la tecnología copy-on-write en páginas de datos), haciendo de él el paradigma dominante de la multitarea en las últimas décadas.

Perl intenta vaciar todos los archivos abiertos para salida antes de crear un proceso hijo, pero esto puede no estar soportado en algunas plataformas (vea L<perlport>).  Para estar seguros, puede necesitar poner C<$|> ($AUTOFLUSH en English) o llamar el método C<autoflush()> de C<IO::Handle> en cualquiera de los identificadores de archivo abiertos para evitar duplicación de salida.

Si usted hace un C<fork> sin luego esperar a sus hijos, irá acumulando zombies.  En algunos sistemas, puede evitar esto poniendo C<$SIG{CHLD}> a C<"IGNORE">.  Ver también L<perlipc> para más ejemplos de fork y borrado de hijos moribundos.

Note que si su hijo hereda los descriptores de archivo del sistema como STDIN y STDOUT que estén realmente conectados a una tubería o a un socket, incluso si usted sale del programa, el servidor remoto (por ejemplo, un script CGI o un proceso lanzado en segundo plano desde un shell remoto) no se dará cuenta de que se ha ido.
Deberá reabrirlos a F</dev/null> si eso es un problema.

En algunas plataformas, como Windows, en donde la llamada del sistema fork() no está disponible, Perl se puede compilar para emular fork() en el intérprete de Perl.
La emulación se ha diseñado, en el ámbito del programa Perl, para ser tan compatible como sea posible con el fork() de Unix.
Sin embargo, tiene limitaciones que tienen que ser consideradas en código que pretenda ser portable.
Vea L<perlfork> para más detalles.

Cuestiones de portabilidad: L<perlport/fork>.

=item format
X<format>

=for Pod::Functions declare a picture format with use by the write() function

Declara una imagen de formato para usar con la función C<write>.  Por ejemplo:

    format Algo =
        Test: @<<<<<<<< @||||| @>>>>>
              $str,     $%,    '$' . int($numero)
    .

    $str = "widget";
    $numero = $coste/$cantidad;
    $~ = 'Algo';
    write;

Ver L<perlform> para más detalles y ejemplos.

=item formline CUADRO,LISTA
X<formline>

=for Pod::Functions internal function used for formats

Esta es una función interna usada por C<format>, aunque también puede llamarla.  Formatea (ver L<perlform>) una lista de valores de acuerdo a los contenidos de CUADRO, colocando la salida en el acumulador de salida de format, C<$^A> (o C<$ACCUMULATOR> en English).
Finalmente, cuando se hace un C<write>, los contenidos de C<$^A> se escriben al identificador de archivo.  Puede también leer C<$^A> y volver a ponerla otra vez a C<"">.  Note que un formato típicamente hace un C<formline> por línea del formato, pero a la misma función C<formline> no le preocupa cuántos avances de línea están incluidos en el CUADRO.  Esto significa que los I<tokens> C<~> y C<~~> tratan al CUADRO entero como una única línea.
Puede por eso necesitar usar múltiples formlines para implementar un único registro format, como lo hace el propio compilador de C<format>.

Tenga cuidado si pone dobles comillas alrededor del cuadro, porque un carácter C<@> puede ser tomado como el comienzo del nombre de un array.
C<formline> siempre devuelve verdadero.  Ver L<perlform> para otros ejemplos.

Si está intentando usar esto en lugar de C<write> para capturar la salida, puede encontrar que sea más sencillo abrir un identificador de archivo en un escalar (C<< open $fh, ">", \$salida >>) y escribir en él.

=item getc IDENTIFICADOR_ARCHIVO
X<getc> X<getchar> X<character> X<file, read> X<archivo, lectura> X<carácter>

=item getc

=for Pod::Functions get the next character from the filehandle

Devuelve el siguiente carácter desde el archivo de entrada asociado a IDENTIFICADOR_ARCHIVO, o el valor indefinido al final del archivo, o si ocurrió un error (en este último caso, se actualiza C<$!>).  Si IDENTIFICADOR_ARCHIVO se omite, se lee desde STDIN.  Esto no es particularmente eficiente.  Sin embargo, esto no se puede usar para extraer caracteres sueltos sin esperar a que el usuario pulse la tecla de I<Enter>.  Para esto, intente algo como esto:

    if ($BSD_STYLE) {
        system "stty cbreak </dev/tty >/dev/tty 2>&1";
    }
    else {
        system "stty", '-icanon', 'eol', "\001";
    }

    $tecla = getc(STDIN);

    if ($BSD_STYLE) {
        system "stty -cbreak </dev/tty >/dev/tty 2>&1";
    }
    else {
        system 'stty', 'icanon', 'eol', '^@'; # ASCII NUL
    }
    print "\n";

La determinación de cómo poner $BSD_STYLE se deja como ejercicio al lector.

La función C<POSIX::getattr> puede hacer esto de forma más portable en sistemas compatibles con POSIX.  Vea también el módulo C<Term::ReadKey> desde su sitio L<CPAN|http://www.cpan.org> más cercano.

=item getlogin
X<getlogin> X<login>

=for Pod::Functions return who logged in at this tty

Implementa la función de la biblioteca C del mismo nombre, que en la mayoría de los sistemas devuelve el login actual desde F</etc/utmp>, si existe.  Si devuelve la cadena vacía, utilice C<getpwuid>.

    $login = getlogin || getpwuid($<) || "Kilroy";

No considere usar C<getlogin> para autenticación: no es tan seguro como C<getpwuid>.

Cuestiones de portabilidad: L<perlport/getlogin>.

=item getpeername SOCKET
X<getpeername> X<peer>

=for Pod::Functions find the other end of a socket connection

Devuelve la dirección socket empaquetada del otro extremo de la conexión SOCKET.

    use Socket;
    $hersockaddr    = getpeername(SOCK);
    ($port, $iaddr) = sockaddr_in($hersockaddr);
    $herhostname    = gethostbyaddr($iaddr, AF_INET);
    $herstraddr     = inet_ntoa($iaddr);

=item getpgrp PID
X<getpgrp> X<group> X<grupo>

=for Pod::Functions get process group

Devuelve el actual grupo del proceso especificado por el PID.  Use un PID de C<0> para obtener el grupo del proceso actual.  Elevará una excepción si se usa en una máquina que no implemente getpgrp(2).  Si PID se omite, devuelve el grupo del proceso actual.  Note que la versión POSIX de C<getpgrp> no acepta un argumento PID, por lo que sólo C<PID==0> es verdaderamente portable.

Cuestiones de portabilidad: L<perlport/getpgrp>.

=item getppid
X<getppid> X<parent> X<pid> X<padre>

=for Pod::Functions get parent process ID

Devuelve el identificador de proceso del proceso padre.

Nota para los usuarios de Linux: Entre v5.8.1 y v5.16.0 Perl evitará la semántica de hilos no compatible con POSIX que usan una minoría de sistemas Linux (y sistemas Debian GNU/kFreeBSD) que utilizan LinuxThreads; esta emulación ha sido eliminada.  Vea la documentación de L<$$|perlvar/$$> para más detalles.

Cuestiones de portabilidad: L<perlport/getppid>.

=item getpriority CUÁL,QUIÉN
X<getpriority> X<priority> X<nice> X<prioridad>

=for Pod::Functions get current nice value

Devuelve la prioridad actual de un proceso, un grupo de procesos o un usuario.
(Vea L<getpriority(2)>).  Lanzará una excepción fatal si se usa en una máquina que no implemente getpriority(2).

Cuestiones de portabilidad: L<perlport/getpriority>.

=item getpwnam NOMBRE
X<getpwnam> X<getgrnam> X<gethostbyname> X<getnetbyname> X<getprotobyname>
X<getpwuid> X<getgrgid> X<getservbyname> X<gethostbyaddr> X<getnetbyaddr>
X<getprotobynumber> X<getservbyport> X<getpwent> X<getgrent> X<gethostent>
X<getnetent> X<getprotoent> X<getservent> X<setpwent> X<setgrent> X<sethostent>
X<setnetent> X<setprotoent> X<setservent> X<endpwent> X<endgrent> X<endhostent>
X<endnetent> X<endprotoent> X<endservent> 

=for Pod::Functions get passwd record given user login name

=item getgrnam NOMBRE

=for Pod::Functions get group record given group name

=item gethostbyname NOMBRE

=for Pod::Functions get host record given name

=item getnetbyname NOMBRE

=for Pod::Functions get networks record given name

=item getprotobyname NOMBRE

=for Pod::Functions get protocol record given name

=item getpwuid UID

=for Pod::Functions get passwd record given user ID

=item getgrgid GID

=for Pod::Functions get group record given group user ID

=item getservbyname NOMBRE,PROTO

=for Pod::Functions get services record given its name

=item gethostbyaddr DIRECCIÓN,TIPODIR

=for Pod::Functions get host record given its address

=item getnetbyaddr DIRECCIÓN,TIPODIR

=for Pod::Functions get network record given its address

=item getprotobynumber NÚMERO

=for Pod::Functions get protocol record numeric protocol

=item getservbyport PUERTO,PROTO

=for Pod::Functions get services record given numeric port

=item getpwent

=for Pod::Functions get next passwd record

=item getgrent

=for Pod::Functions get next group record

=item gethostent

=for Pod::Functions get next hosts record

=item getnetent

=for Pod::Functions get next networks record

=item getprotoent

=for Pod::Functions get next protocols record

=item getservent

=for Pod::Functions get next services record

=item setpwent

=for Pod::Functions prepare passwd file for use

=item setgrent

=for Pod::Functions prepare group file for use

=item sethostent SIGUEABIERTO

=for Pod::Functions prepare hosts file for use

=item setnetent SIGUEABIERTO

=for Pod::Functions prepare networks file for use

=item setprotoent SIGUEABIERTO

=for Pod::Functions prepare protocols file for use

=item setservent SIGUEABIERTO

=for Pod::Functions prepare services file for use

=item endpwent

=for Pod::Functions be done using passwd file

=item endgrent

=for Pod::Functions be done using group file

=item endhostent

=for Pod::Functions be done using hosts file

=item endnetent

=for Pod::Functions be done using networks file

=item endprotoent

=for Pod::Functions be done using protocols file

=item endservent

=for Pod::Functions be done using services file

Estas rutinas son las mismas que sus homólogas en la biblioteca del sistema.  En contexto lista, los valores devueltos por varias de ellas son como sigue:

 # 0        1          2           3         4
 ( $nombre, $password, $gid,       $miembros ) = getgr*
 ( $nombre, $alias,    $tipoadr,   $red      ) = getnet*
 ( $nombre, $alias,    $puerto,    $protocolo) = getserv*
 ( $nombre, $alias,    $protocolo            ) = getproto*
 ( $nombre, $alias,    $tipoadr,   $longitud, @direc ) = gethost*
 ( $nombre, $password, $uid,       $gid,     $cuota,
 $comentario,$gcos,    $dir,       $shell,   $expira ) = getpw*
 # 5        6          7           8         9

(Si la entrada no existe, el valor de retorno es un único valor verdadero, sin significado).

El significado exacto del campo $gcos varía pero usualmente contiene el nombre real del usuario (como opuesto al nombre de login) y otra información perteneciente al usuario.  Tenga cuidado, sin embargo, que en muchos sistemas los usuarios son capaces de cambiar esta información y por eso no puede confiarse y por eso el $gcos es considerado como contaminado (ver L<perlsec>).  La $contrasena y el $shell, la contraseña codificada del usuario y el shell del login, están también contaminados, por la misma razón.

En contexto escalar, obtiene el nombre, a menos que la función fuera localizar por nombre, en cuyo caso obtendrá la otra cosa, cualquiera que sea.
(Si la entrada no existe obtendrá el valor indefinido).  Por ejemplo:

    $uid   = getpwnam($nombre);
    $name  = getpwuid($num);
    $name  = getpwent();
    $gid   = getgrnam($name);
    $name  = getgrgid($num);
    $name  = getgrent();
    #etc.

En I<getpw*()> los campos $cuota, $comentario y $expiracion son casos especiales en el sentido que en muchos sistemas no están soportados.  Si la $cuota no está soportada, es un escalar vacío.  Si está soportada, usualmente codifica la cuota de disco.  Si el campo $comentario no está soportado, es un escalar vacío.  Si está soportado usualmente codifica algún comentario administrativo sobre el usuario.  En algunos sistemas el campo $cuota puede ser $cambio o $edad, campos que tienen que ver con la caducidad de la contraseña.  En algunos sistemas el campo $comentario puede ser $clase.  El campo $expira, si está presente, codifica el periodo de expiración de la cuenta o de la contraseña.  Para la disponibilidad y el significado exacto de estos campos, en su sistema, por favor consulte getpwnam(3) y su archivo F<pwd.h>.  Puede también encontrar dentro de Perl que es lo que significan sus campos $cuota, $comentario y $expira usando el módulo C<Config> y los valores C<d_pwquota>, C<d_pwage>, C<d_pwchange>, C<d_pwcomment> y C<d_pwexpire>.  Archivos de contraseñas shadow sólo están soportados si el proveedor los ha implementado con la intuitiva moda de que llamando a las rutinas regulares de la biblioteca C se obtienen las versiones shadow si está corriendo con bajos privilegios o si existe la función shadow(3) tal como se encuentra en System V (esto incluye Solaris y Linux).  Los sistemas que implementen un sistema de contraseñas shadow propietario es impropable que sean soportados.

El valor de $miembros devuelto por I<getgr*()> es una lista separada por espacios de los nombres de login de los miembros del grupo.

Para las funciones I<gethost*()>, si la variable C<h_errno> está soportada en C, será devuelta vía C<$?> si la llamada a la función falla.  El valor devuelto C<@addrs> por una exitosa llamada es una lista de las direcciones en crudo devueltas por la correspondiente llamada a la biblioteca.  En el dominio de Internet, cada dirección son cuatro bytes de longitud; puede desempaquetarlos diciendo algo como:

    ($a,$b,$c,$d) = unpack('W4',$addr[0]);

La biblioteca Socket hace esto ligeramente más fácilmente:

    use Socket;
    $iaddr = inet_aton("127.1"); # o la dirección que sea
    $name  = gethostbyaddr($iaddr, AF_INET);

    # o de otra manera
    $direccion = inet_ntoa($idireccion);

En sentido contrario, para resolver un nombre de host a la dirección IP puede escribir lo siguiente:

    use Socket;
    $packed_ip = gethostbyname("www.perl.org");
    if (defined $packed_ip) {
        $ip_address = inet_ntoa($packed_ip);
    }

Cerciórese de que a C<gethostbyname()> se le llama en contexto ESCALAR y compruebe que su valor de retorno está definido.

La función C<getprotobynumber>, a pesar de que sólo toma un argumento, tiene la precedencia de un operador de lista, así que tenga cuidado:

    getprotobynumber $numero eq 'icmp'   # INCORRECTO
    getprotobynumber($numero eq 'icmp')  # esto es lo que significa
    getprotobynumber($numero) eq 'icmp'  # mejor de esta manera

Si está cansado de recordar qué elemento de la lista devuelta contiene qué valor, existen interfaces por nombre, en módulos estándar: C<File::stat>, C<Net::hostent>, C<Net::netent>, C<Net::protoent>, C<Net::servent>, C<Time::gmtime>, C<Time::localtime> y C<User::grent>.  Estas sobreescriben a las predefinidas, con versiones que devuelven objetos con los nombres apropiados para cada campo.  Por ejemplo:

   use File::stat;
   use User::pwent;
   $is_his = (stat($archivo)->uid == pwent($loquesea)->uid);

Incluso aunque parezcan los mismos métodos (uid), no lo son, porque un objeto C<File::stat> es diferente de un objeto C<User::pwent>.

Cuestiones de portabilidad: L<perlport/getpwnam> a L<perlport/endservent>.

=item getsockname SOCKET
X<getsockname>

=for Pod::Functions retrieve the sockaddr for a given socket

Devuelve la dirección de socket empaquetada de este final de la conexión SOCKET, en el caso de que no conozca la dirección porque tenga diferentes IP por las que la conexión se pudo haber realizado.

    use Socket;
    $mysockaddr = getsockname(SOCK);
    ($port, $myaddr) = sockaddr_in($mysockaddr);
    printf "Conectar a %s [%s]\n",
       scalar gethostbyaddr($myaddr, AF_INET),
       inet_ntoa($myaddr);

=item getsockopt SOCKET,NIVEL,OPCIÓN
X<getsockopt>

=for Pod::Functions get socket options on a given socket

Consulta la opción con nombre OPCIÓN asociada con el SOCKET en un determinado NIVEL.
Opciones pueden existir en múltiples niveles de protocolo dependiendo del tipo de socket, pero al menos existirá el más alto nivel de socket SOL_SOCKET (definido en el módulo C<Socket>).  Para consultar opciones en otro nivel se debe indicar el apropiado número de protocolo que controle a esa opción.  Por ejemplo, para indicar que una opción a de ser interpretada por el protocolo TCP, NIVEL debe ser puesto al número de protocolo del TCP, que puede obtener usando C<getprotobyname>.

La llamada devuelve una cadena empaquetada representando la opción socket solicitada, o C<undef> si hay un error, con la razón del error puesta en C<$!>.  Lo que exactamente esté en la cadena empaquetada depende de NIVEL y OPCIÓN; consulte getsockopt(2) para más detalles.  Un caso común es que la opción sea un entero, en cuyo caso el resultado es un entero empaquetado, que podrá decodificar usando C<unpack> con el formato C<i> (o C<I>).

Aquí hay un ejemplo para comprobar si el algoritmo de Nagle está habilitado en un I<socket>:

    use Socket qw(:all);

    defined(my $tcp = getprotobyname("tcp"))
        or die "No puedo determinar el número de protocolo para tcp";
    # my $tcp = IPPROTO_TCP; # Alternativa
    my $packed = getsockopt($socket, $tcp, TCP_NODELAY)
        or die "getsockopt TCP_NODELAY: $!";
    my $nodelay = unpack("I", $empaquetado);
    print "El algoritmo de Nagle está ",
           $nodelay ? "desactivado\n" : "activado\n";

Cuestiones de portabilidad: L<perlport/getsockopt>.

=item glob EXPR
X<glob> X<wildcard> X<filename, expansion> X<expand> X<archivo, expansión> X<comodín> X<expandir>

=item glob

=for Pod::Functions expand filenames using wildcards

En contecto lista, devuelve una (posiblemente vacía) lista de la expansión de nombres de archivo del valor de EXPR como si el shell estandar Unix F</bin/csh> lo hiciera.  En contexto escalar, glob itera a través de la expansión de nombres de archivo, devolviendo undef cuando se agote la lista.  Esto es la función interna que implementa el operador C<< <*.c> >>, pero puede usarla directamente.  Si la EXPR se omite, se usa C<$_>.  El operador C<< <*.c> >> se discute con más detalle en L<perlop/"Operadores E/S">.

Tenga en cuenta que C<glob> divide sus argumentos por los espacios en blanco y trata a cada segmento como patrones independientes.  En este sentido, C<glob("*.c *.h")> coincide con todos los archivos con una extensión F<.c> o F<.h>.  La expresión C<glob(".* *")> coincide con todos los archivos en el directorio de trabajo actual.
Si quiere expandir nombres de archivo que puedan contener espacios en blanco, tendrá que usar comillas adicionales alrededor del espaciado nombre de archivo, para protegerlo.
Por ejemplo, para expandir nombres de archivo que tienen una C<e>, seguida por un espacio, seguido por una C<f>, utilice uno de estos ejemplos:

    @espacios = <"*e f*">;
    @espacios = glob '"*e f*"';
    @espacios = glob q("*e f*");

Si tuviera que usar una variable, puede usar esto:

    @espacios = glob "'*${var}e f*'";
    @espacios = glob qq("*${var}e f*");

Si los únicos caracteres comodín en C<glob> son llaves, no se coincidirá con ningún archivo, pero, potencialmente, se devuelven muchas cadenas.  Por ejemplo, esto produce nueve cadenas, una por cada par de frutas y colores:

    @muchos =  glob "{manzana,tomate,cereza}={verde,amarilla,roja}";

Este operador está implementado usando la extensión estándar C<File::Glob>.  Ver L<File::Glob> para los detalles, incluyendo C<bsd_glob> que no trata al espacio en blanco como separador de patrones.

Cuestiones de portabilidad: L<perlport/glob>.

=item gmtime EXPR
X<gmtime> X<UTC> X<Greenwich>

=item gmtime

=for Pod::Functions convert UNIX time into record or string using Greenwich time

Funciona igual que L<localtime> pero los valores devueltos son localizados por la zona horaria estándar de Greenwich.

Nota: cuando se le llama en contexto lista, $isdst, el último valor devuelto por gmtime siempre es C<0>.  No hay horario de verano en el horario GMT.

Cuestiones de portabilidad: L<perlport/gmtime>.

=item goto ETIQUETA
X<goto> X<jump> X<jmp>

=item goto EXPR

=item goto &NOMBRE

=for Pod::Functions create spaghetti code

La forma C<goto ETIQUETA> busca la instrucción etiquetada con ETIQUETA y continua la ejecución desde allí.  No se puede utilizar para salir de un bloque o una subrutina pasada a C<sort>.  Se puede utilizar para ir a casi cualquier sitio que esté dentro del ámbito dinámico, incluyendo fuera de las subrutinas, pero es usualmente mucho mejor usar otras construcciones como C<last> o C<die>.
El autor de Perl nunca ha sentido la necesidad de usar esta forma de C<goto> (en Perl, desde luego. C es otra historia).  (La diferencia con C es que no ofrece bucles nominales combinados con control de bucles.  Perl sí, y esto reemplaza a la mayor parte de los usos estructurados de C<goto> en otros lenguajes).

La forma C<goto EXPR> evalúa C<EXPR> a una referencia de código o nombre de etiqueta.  Si evalúa a una referencia de código, será gestionada como el C<goto &NAME> visto antes.  Esto es especialmente útil para implementar colas de recursión con C<goto __SUB__>.

Si la expresión evalúa a un nombre de etiqueta, su ámbito se resolverá dinámicamente.  Esto permite crear C<goto> calculados como en FORTRAN, pero no está necesariamente recomendado si usted está optimizando, durante el mantenimiento:

    goto ("FOO", "BAR", "GLARCH")[$i];

Como se muestra en este ejemplo, C<goto EXPR> está exento de la regla "se parece a una función".  Un par de paréntesis puestos a continuación no (necesariamente) delimitan su argumento.  C<goto("NE")."XT"> es equivalente a C<goto NEXT>.
También, a diferencia de otros operadores con nombre, este tiene la misma precedencia que una asignación.

El uso de C<goto LABEL> o C<goto EXPR> para saltar en una construcción es obsoleto y emitirá una advertencia.  Incluso entonces, no se puede usar para ir a cualquier construcción que requiere inicialización, como una subrutina o un bucle C<foreach>.  Tampoco se puede usar para ir a una construcción que ha sido optimizada.

La forma C<goto &NOMBRE> es muy diferente de las otras formas de C<goto>.  De hecho, no es un goto en el sentido normal y no tiene el estigma asociado con los otros gotos.  En cambio, sale de la subrutina actual (perdiendo cualquier cambio hecho por local()) e inmediatamente llama a la subrutina indicada pasándole el valor actual de @_.  Esto se usa por subrutinas C<AUTOLOAD()> que desean cargar otra subrutina y fingen que ésta otra subrutina ha sido llamada en primer lugar (excepto que cualquier modificación a C<@_> en la subrutina actual se propaga a la otra).
Después del C<goto>, ni siquiera C<caller()> será capaz de decir qué rutina fue llamada en primer lugar.

NOMBRE no necesita ser el nombre de una subrutina; puede ser una variable escalar que contenga una referencia a un código o un bloque que evalúa a una referencia de código.

=item grep BLOQUE LISTA
X<grep>

=item grep EXPR,LISTA

=for Pod::Functions locate elements in a list test true against a given criterion

Es similar en espíritu, pero no lo mismo, que con grep(1) y sus hermanos.  En particular, no está limitado a usar expresiones regulares.

Evalúa el BLOQUE o EXPRE para cada elemento de LISTA (poniendo localmente C<$_> a cada elemento) y devuelve un valor de lista consistente en los elementos por los que la expresión evaluada es verdadera.  En contexto escalar, devuelve el número de veces que la expresión fue verdadera.

    @foo = grep(!/^#/, @bar);    # quitar los comentarios

o equivalentemente,

    @foo = grep {!/^#/} @bar;    # quitar los comentarios

Note que C<$_> es un alias al valor de la lista, por lo que se puede usar para modificar los elementos de la LISTA.  Mientras que esto suele ser útil, puede causar resultados extraños si los elementos de la LISTA no son variables.
De forma semejante, grep devuelve alias de la lista original, como los alias de los elementos de la lista de las variables de los bucles for.  Es decir, modificar un elemento de la lista devuelto por grep (por ejemplo, en un C<foreach>, C<map> u otro C<grep>) modifica realmente el elemento en la lista original.
Esto es algo usualmente a ser evitado cuando se está escribiendo código claro.

Si C<$_> es léxica en el ámbito de aplicación donde C<grep> aparece (porque se ha declarado con la forma obsoleta C<my $_>) entonces, además de ser un alias local a los elementos de la lista, C<$_> se mantiene léxica dentro del bloque; es decir, no puede ser vista desde el exterior, evitando cualquier potencial efecto colateral.

Ver también L</map> para una lista compuesta de los resultados del BLOQUE o EXPR.

=item hex EXPR
X<hex> X<hexadecimal>

=item hex

=for Pod::Functions convert a string to a hexadecimal number

Interpreta EXPR como una cadena en hexadecimal y devuelve el valor correspondiente.
(Para convertir cadenas que pueden comenzar con C<0>, C<0x> o C<0b>, vea L</oct>).  Si se omite EXPR, se usa C<$_>.

    print hex '0xAf'; # imprime '175'
    print hex 'aF';   # lo mismo

Strings hexadecimales sólo pueden representar enteros.  Strings que podrían causar desbordamiento de enteros lanzará un aviso.  Espacios en blanco aledaños, no son eliminados, a diferencia de oct().  Para presentar algo en formato hexadecimal, mire en L</printf>, L</sprintf> o L</unpack>.

=item import LISTA
X<import>

=for Pod::Functions patch a module's namespace into your own

No existe la función C<import>.  Es sólo un método (subrutina) ordinario definido (o heredado) por módulos que desean exportar nombres a otro módulo.  La función C<use> llama al método C<import> del paquete a usar.  Ver también L</use>, L<perlmod> y L<Exporter>.

=item index STRING,SUBSTR,POSICIÓN
X<index> X<indexOf> X<InStr>

=item index STRING,SUBSTR

=for Pod::Functions find a substring within a string

La función index busca por un string dentro de otro, pero sin tener el comportamiento de un sistema de coincidencias basado en expresiones regulares.
Devuelve la posición de la primera ocurrencia de SUBSTR en STRING en o después de POSICIÓN.  Si se omite POSICIÓN, comienza a buscar desde el comienzo del string.  POSICIÓN antes del comienzo del string o después de su final es tratado como si estuviera al principio o al final, respectivamente.  POSICIÓN y el valor de retorno están basados en cero.
Si la subcadena no se encuentra, C<index> devuelve -1.

=item int EXPR
X<int> X<integer> X<truncate> X<trunc> X<floor> X<truncar> X<trunca> X<entero>

=item int

=for Pod::Functions get the integer portion of a number

Devuelve la parte entera de EXPR.  Si se omite EXPR, se usa C<$_>.
No debe usar esta función para redondear: primero, porque trunca hacia C<0> y segundo, porque las representaciones máquina de números en punto flotante puede producir, algunas veces, resultados dispares.  Por ejemplo, C<int(-6.725/0.025)> produce -268 en vez del valor correcto -269; esto es porque el valor realmente es -268.99999999999994315658.  Usualmente, las funciones C<sprintf>, C<printf>, o C<POSIX::floor> y C<POSIX::ceil> le servirán mejor que int().

=item ioctl IDENTIFICADOR_ARCHIVO,FUNCIÓN,ESCALAR
X<ioctl>

=for Pod::Functions system-dependent device control system call

Implementa la función ioctl(2).  Probablemente primero querrá escribir

    require "sys/ioctl.ph";  # probablemente en
                             # $Config{archlib}/sys/ioctl.ph

para obtener las correctas definiciones de la función.  Si F<sys/ioctl.ph> no existe o no tiene las definiciones correctas, tendrá que incorporar las suyas propias, basadas en sus archivos de cabecera C como las de F<< <sys/ioctl.h> >>.
(Existe un script Perl llamado B<h2ph> que viene con el kit Perl que puede ayudarle en esto, pero no es nada trivial).  ESCALAR será leído o escrito dependiendo de la FUNCIÓN; un puntero C al valor de la cadena ESCALAR será pasado como tercer argumento de la llamada real a C<ioctl>.  (Si ESCALAR no tiene un valor de cadena sino que tiene un valor numérico, ese valor será el que se pase, en lugar de un puntero al valor de la cadena.  Para garantizar que esto sea cierto, sume un C<0> al escalar antes de usarlo).  Las funciones C<pack> y C<unpack> pueden ser necesarias para manipular los valores de las estructuras utilizadas por C<ioctl>.

El valor devuelto de C<ioctl> (y C<fcntl>) es como sigue:

    si OS devuelve:    entonces Perl devuelve:
        -1                 valor indefinido
         0                 cadena "0 but true"
    otra cosa              ese número

Así, Perl devuelve verdadero en éxito y falso en caso de error, por lo que aún podemos determinar el valor real devuelto por el sistema operativo:

    $retval = ioctl(...) || -1;
    printf "Sistema devolvió %d\n", $retval;

La cadena especial C<"0 but true"> (0, pero verdadero) es una excepción de los mensajes de aviso activados por B<-w> sobre una conversión numérica impropia.

Cuestiones de portabilidad: L<perlport/ioctl>.

=item join EXPR,LISTA
X<join>

=for Pod::Functions join a list into a string using a separator

Une las cadenas separados de LISTA en una única cadena con campos separados por el valor de EXPR y devuelve la nueva cadena.  Ejemplo:

    $rec = join(':', $login,$passwd,$uid,$gid,$gcos,$home,$shell);

Cuidado que, a diferencia de C<split>, C<join> no toma un patrón como su primer argumento.  Compare con L</split>.

=item keys HASH
X<keys> X<key> X<clave>

=item keys ARRAY

=item keys EXPR

=for Pod::Functions retrieve list of indices from a hash

Llamado en contexto de lista, devuelve una lista consistente en todas las claves del hash indicado, o en Perl 5.12 o posteriores, los índices de un array.  Versiones de Perl anteriores a 5.12 producirán un error de sintaxis si intenta utilizar un array como argumento.  En contexto escalar, devuelve el número de claves o índices.

Las entradas de un hash son devueltas en un aparente orden aleatorio.  El orden aleatorio real es específico a un hash dado; las mismas series de operaciones en dos hashes pueden resultar en diferentes órdenes para cada hash.  Cualquier inserción en el hash puede cambiar el orden, así como cualquier eliminación, con la excepción de que la clave más reciente devuelta por C<each> o C<keys> puede ser borrada sin que cambie el orden.  Siempre y cuando no se modifique un determinado hash puede confiar en que C<keys>, C<values> y C<each> devuelvan repetidamente lo mismo en el mismo orden.  Vea L<perlsec/"Ataques de complejidad algorítmica"> para los detalles de por qué el orden en un hash se aleatoriza.  Aparte de las garantías proporcionadas aquí los detalles exactos de algoritmo que usa Perl para recorrer un hash está sujeto a cambio en cualquier lanzamiento de Perl.  Hashes enlazados pueden comportarse diferentemente a los hashes de Perl con respecto a los cambios en el orden, en la inserción y borrado de los elementos.

Como efecto colateral, llamando a keys() reinicia el iterador interno del HASH o del ARRAY (vea L</each>).  De forma particular, llamando a keys() en contexto nulo (void) resetea el iterador sin otro efecto.

Aquí hay otra forma de imprimir su entorno:

    @keys = keys %ENV;
    @values = values %ENV;
    while (@claves) {
        print pop(@keys), '=', pop(@values), "\n";
    }

o de forma ordenada por la clave:

    foreach $key (sort(keys %ENV)) {
        print $key, '=', $ENV{$key}, "\n";
    }

Los valores devueltos son copias de las claves originales en el hash, así que modificarlas no afectará al hash original.  Compare con L</values>.

Para ordenar un hash por valor, necesitará usar la función C<sort>.
Esto es una ordenación numérica descendente de un hash por sus valores:

    foreach $key (sort { $hash{$b} <=> $hash{$a} } keys %hash) {
        printf "%4d %s\n", $hash{$clave}, $clave;
    }

Usado como valor-izquierda, C<keys> le permite incrementar el número de casillas de memoria hash para el hash indicado.  Puede hacerle ganar más eficiencia si sabe que el hash va a tener un gran tamaño.  (Esto es similar a pre-extender un array asignándole un gran número a $#array).  Si dice

    keys %hash = 200;

entonces C<%hash> tendrá al menos 200 casillas de memoria reservados para él -- 256 de ellos, de hecho, ya que se redondea a la siguiente potencia de dos.  Estas casillas serán mantenidos incluso si hace C<%hash = ()>. Use C<undef %hash> si quiere liberar el almacenamiento mientras mantiene a C<%hash> en el ámbito.
No puede reducir el número de casillas reservados para el hash usando C<keys> de esta manera (pero no necesita preocuparse si hace esto por accidente; intentarlo no tiene ningún efecto).  C<keys @array> en un contexto valor-izquierda es un error de sintaxis.

A partir de Perl 5.14, C<keys> puede tomar una EXPR escalar, que debe contener la referencia a un hash o un array no bendecido.  El argumento es desreferenciado automáticamente.  Este aspecto de C<keys> es considerado altamente experimental.  El comportamiento exacto puede cambiar en una futura versión de Perl.

    for (keys $hashref) { ... }
    for (keys $obj->get_arrayref) { ... }

Para no confundir a los posibles usuarios de su código, que ejecuten versiones anteriores de Perl, con errores de sintaxis misteriosos, ponga este tipo de cosas en la parte superior de su archivo para indicar que el código funciona I<sólo> en versiones Perl de cosechas recientes:

    use 5.012;  # así keys/values/each trabajan sobre arrays
    use 5.014;  # así keys/values/each trabajan sobre escalares (experimental)

Vea también C<each>, C<values> y C<sort>.

=item kill SEÑAL, LISTA

=item kill SEÑAL
X<kill> X<signal> X<señal>

=for Pod::Functions send a signal to a process or process group

Manda una señal a una lista de procesos.  Devuelve el número de argumentos exitosos que fueron utilizados para señalar (que no es necesariamente el mismo número de procesos realmente asesinados, p. ej., cuando se mata a un grupo de procesos).

    $cnt = kill 'HUP', $child1, $child2;
    kill 'KILL', @goners;

SEÑAL puede ser tanto un nombre de señal (una cadena) o un número.  Un nombre de señal puede empezar con un prefijo C<SIG>, así que C<FOO> y C<SIGFOO> refieren a la misma señal.  La forma en cadena de caracteres de SEÑAL es la recomendada para mantener la portabilidad porque la misma señal puede tener números diferentes en diferentes sistemas operativos.

Se puede encontrar una lista de nombres de señales soportadas por la plataforma actual en C<$Config{sig_name}>, incluido en el módulo C<Config>.  Vea L<Config> para más detalles.

Un nombre de señal negativo es igual a un número de señal negativa, en donde se mata grupos de procesos en vez de procesos.  Por ejemplo, C<kill '-KILL', $pgrp> y C<kill -9, $pgrp> enviará C<SIGKILL> al grupo de procesos especificado entero.  Eso significa que, de forma general, deseará utilizar señales positivas, y no negativas.

Si la SEÑAL es cero o la cadena C<ZERO> (o C<SIGZERO>), no se envía ninguna señal al proceso, pero C<kill> comprueba si es I<posible> enviar una señal a la misma (lo que significa, para ser breve, que el proceso es propiedad del mismo usuario, o somos el super-usuario).  Esto es útil para comprobar que un proceso hijo aún está vivo (aunque sólo sea como un zombie) y no ha cambiado su UID.  Ver L<perlport> para notas sobre la portabilidad de esta construcción.

El comportamiento de kill cuando el I<PROCESO> es el número cero o negativo depende del sistema operativo.  Por ejemplo, en los sistemas conformes a POSIX, un cero señalará al grupo del proceso actual y -1 señalará todos los procesos, y cualquier otro número de PROCESO negativo actuará como un número de señal y matará el grupo entero del proceso especificado.

Si tanto la SEÑAL y el PROCESO son negativos, los resultados son indefinidos.
Se puede producir un aviso en una futura versión.

Ver L<perlipc/"Señales"> para más detalles.

En algunas plataformas, como Windows, en donde la llamada del sistema fork() no está disponible, Perl se puede compilar para emular fork() a nivel del intérprete de Perl.
Esta emulación tiene limitaciones relacionadas con la muerte que tienen que ser consideradas, para código que se ejecute en Windows y código que tenga la intención de ser portable.

Vea L<perlfork> para más detalles.

Si no hay ninguna LISTA de procesos, no se envía ninguna señal, y el valor de retorno es 0.  Sin embargo, esto se utiliza a veces, debido a que causa la ejecución de controles de contaminación.  Pero vea L<perlsec/Aclarado y detección de datos contaminados>.

Cuestiones de portabilidad: L<perlport/kill>.

=item last ETIQUETA
X<last> X<break>

=item last EXPR

=item last

=for Pod::Functions exit a block prematurely

El comando C<last> es como la instrucción C<break> del C (usada en bucles); inmediatamente sale del bucle en cuestión.  Si la ETIQUETA se omite, el comando se refiere al bucle más interior en que se encuentre.  La forma C<last EXPR>, disponible a partir de Perl 5.18.0, permite que se compute un nombre de etiqueta en tiempo de ejecución; de lo contrario es idéntico a C<last ETIQUETA>.  El bloque C<continue>, si está, no se ejecuta:

    LINEA: while (<STDIN>) {
        last LINE if /^$/;  # salir cuando se termine la cabecera
        #...
    }

C<last> no puede usarse para salir de un bloque que devuelve un valor como en C<eval {}>, C<sub {}> o C<do {}>, y no debe ser usado para salir de una operación grep() o map().

Note que un bloque por sí mismo es semánticamente idéntico a un bucle que se ejecuta una vez.  Así, C<last> se puede usar para salir prematuramente de este bloque.

Ver también L</continue> para una ilustración de cómo funcionan C<last>, C<next> y C<redo>.

A diferencia de otros operadores con nombre, tiene la misma precedencia que una asignación.
También está exenta de la regla se-parece-a-una-función, así que C<last ("foo")."bar"> hará que "bar" sea parte del argumento a C<last>.

=item lc EXPR
X<lc> X<lowercase> X<minúscula>

=item lc

=for Pod::Functions return lower-case version of a string

Devuelve una versión de EXPR, en minúsculas.  Esta es la función interna que implementa el escapado C<\L> en las cadenas entre comillas dobles.

Si se omite EXPR, se usa C<$_>.

Lo que se devuelve depende de varios factores:

=over

=item Si C<use bytes> está activo:

Los resultados siguen las reglas ASCII.  Sólo los caracteres C<A-Z> cambian, a C<a-z>, respectivamente.

=item De lo contrario, si está activo C<use locale> para C<LC_CTYPE>:

Respeta la configuración regional C<LC_CTYPE> actual de los códigos de carácter < 256; y utiliza las reglas Unicode para los códigos de carácter restantes (esto último sólo puede ocurrir si también está establecida la bandera UTF8).  Vea L<perllocale>.

A partir de v5.20, Perl usa todas las reglas Unicode si la configuración regional es UTF-8.  Por contra, hay una deficiencia en este esquema, y es que los cambios de tamaños de caja que cruzan el límite 255/256 no están bien definidos.  Por ejemplo, la minúscula de LATIN CAPITAL LETTER SHARP S (U+1E9E) en las reglas Unicode es U+00DF (en las plataformas ASCII).   Pero bajo C<use locale> (antes de v5.20 o no está activa la localización UTF-8), la minúscula de U+1E9E es ella misma, porque 0xDF quizás no sea LATIN SMALL LETTER SHARP S en la configuración regional actual, y Perl no tiene forma de saber incluso si existe el carácter en la configuración regional, y aún menos qué código de carácter es.  Perl devuelve un resultado que está por encima de 255 (casi siempre el carácter de entrada sin cambiar, para todas los casos (y no hay muchos) donde el límite 255/256, de otro modo, sería traspasado; y a partir de v5.22, lanza una advertencia L<locale|perldiag/Can't do %s("%s") on non-UTF-8 locale; resolved to "%s".>.

=item De otra forma, si EXPR tiene la bandera UTF8 puesta:

Se utilizan las reglas Unicode para el cambio de tamaño de caja.

=item De otra forma, si C<use feature 'unicode_strings'> o C<use locale ':not_characters'> están habilitados:

Se utilizan las reglas Unicode para el cambio de tamaño de caja.

=item De lo contrario:

Se utilizan las reglas ASCII para el cambio de tamaño de caja.  La minúscula de cualquier carácter fuera del rango ASCII es el propio carácter.

=back

=item lcfirst EXPR
X<lcfirst> X<lowercase> X<minúscula>

=item lcfirst

=for Pod::Functions return a string with just the next letter in lower case

Devuelve el valor de EXPR con el primer carácter en minúsculas.  Esta es la función interna que implementa el escapado C<\l> en las cadenas entre comillas dobles.

Si se omite EXPR, se usa C<$_>.

Esta función se comporta de la misma manera bajo varios pragma, como por ejemplo en una configuración regional, como lo hace L</lc>.

=item length EXPR
X<length> X<size> X<longitud> X<tamaño>

=item length

=for Pod::Functions return the number of characters in a string

Devuelve la longitud en I<caracteres> del valor de EXPR.  Si EXPR se omite, devuelve la longitud de C<$_>.  Si EXPR es indefinido, devuelve C<undef>.

Esta función no puede utilizarse en un array o hash para averiguar cuántos elementos tienen.  Para ello, utilice C<scalar @array> y C<scalar keys %hash>, respectivamente.

Al igual que todas las operaciones Perl, de caracteres, length() normalmente trata con caracteres lógicos, no bytes físicos.  Para saber la cantidad de bytes que una cadena codificada como UTF-8 ocupa, utilice C<length(Encode::encode_utf8(EXPR))> (tendrá que poner C<use Encode> primero).  Ver L<Encode> y L<perlunicode>.

=item __LINE__
X<__LINE__>

=for Pod::Functions the current source line number

Un I<token> especial que compila al actual número de línea.

=item link ARCHIVO_VIEJO,ARCHIVO_NUEVO
X<link>

=for Pod::Functions create a hard link in the filesystem

Crea un nuevo nombre de archivo enlazado con el nombre del archivo antiguo.  Devuelve verdadero en caso de éxito, o falso en caso contrario.

Cuestiones de portabilidad: L<perlport/link>.

=item listen SOCKET,TAMAÑO_COLA
X<listen>

=for Pod::Functions register your socket as a server

Hace lo mismo que la llamada del sistema listen(2).  Devuelve verdadero si tiene éxito; de lo contrario, falso.  Ver el ejemplo en L<perlipc/"Sockets: Comunicación Cliente/Servidor">.

=item local EXPR
X<local>

=for Pod::Functions create a temporary value for a global variable (dynamic scoping)

Lo que realmente querrá usar es C<my>, debido a que C<local> no es lo que la mayoría de la gente piensa en algo "local".  Ver L<perlsub/"Variables privadas con my()"> para más detalles.

Un local() modifica las variables listadas para que sean locales en el bloque que les rodea, un archivo o un eval().  Si se lista más de un valor, esa lista debe ser puesta entre paréntesis.  Ver L<perlsub/"Valores temporales con local()"> para más detalles, incluidas las cuestiones relativas a arrays y hash atados.

La construcción C<delete local EXPR> también se puede utilizar para localizar la supresión de elementos de un array o hash en el bloque actual.
Ver L<perlsub/"Eliminación local de elementos de tipos compuestos">.

=item localtime EXPR
X<localtime> X<ctime>

=item localtime

=for Pod::Functions convert UNIX time into record or string using local time

Convierte un tiempo devuelto por la función time() en una lista de 9 elementos según la zona horaria local.  Típicamente se usa como sigue:

    #  0    1    2     3     4    5     6     7     8
    ($seg,$min,$hora,$mdia,$mes,$anno,$sdia,$ydia,$esdst) =
                                                localtime(time);

Todos los elementos de la lista son numéricos y derivan de la 'struct tm' de C.  $seg, $min y $hora son los segundos, minutos y horas del tiempo especificado.

C<$mdia> es el día del mes, y C<$mes> es el mes en el rango C<0..11>, con 0 indicando enero, y 11, diciembre.
Esto hace que sea fácil obtener un nombre de mes desde una lista:

    my @abbr = qw(Ene Feb Mar Abr May Jun Jul Ago Sep Oct Nov Dic);
    print "$abbr[$mes] $mdia";
    # $mes=9, $mdia=18 da "Oct 18"

C<$anno> contiene el número de años desde 1900.  Para obtener un año de 4 dígitos, escriba:

    $anno += 1900;

Para obtener los dos últimos dígitos del año (ej., "01" en 2001) hacer:

    $anno = sprintf("%02d", $anno % 100);

C<$sdia> es el día de la semana, con 0 indicando domingo y 3 indicando miércoles.  C<$ydia> es el día del año, en el rango C<0..364> (o C<0..365> en los años bisiestos).

C<$isdst> es verdadero si el tiempo especificado se produce durante el horario de verano; en caso contrario, falso.

Si EXPR se omite, C<localtime()> utiliza la hora actual (devuelta por time(3)).

En contexto escalar, C<localtime()> devuelve el valor de ctime(3):

    $ahora = gmtime;  # ej., "Thu Oct 13 04:54:34 1994"

El formato de este valor escalar B<no> es dependiente de la configuración regional, sino que viene predefinido en Perl.  Para GMT, en lugar de la hora local, use la función predefinida L</gmtime>.  Vea también el módulo C<Time::Local> (para convertir los segundos, minutos, horas, etc, de nuevo al valor entero devuelto por time()), y las funciones strftime(3) y mktime(3) del módulo L<POSIX>.

Para obtener algo similar, pero con cadenas de fecha dependiente de la configuración región, ajuste apropiadamente sus variables de entorno a la región (por favor, vea L<perllocale>) e intente, por ejemplo:

    use POSIX qw(strftime);
    $ahora = strftime "%a %b %e %H:%M:%S %Y", localtime;
    # o para GMT formateado a su región:
    $ahora = strftime "%a %b %e %H:%M:%S %Y", gmtime;

Note que C<%a> y C<%b>, las formas cortas del día de la semana y el mes del año, pueden no ser necesariamente de tres caracteres de ancho.

Los módulos L<Time::gmtime> y L<Time::localtime> proporcionan convenientes mecanismos de acceso por nombres para las funciones gmtime() y localtime(), respectivamente.

Para una completa y actualizada representación del tiempo mire en el módulo L<DateTime> en CPAN.

Cuestiones de portabilidad: L<perlport/localtime>.

=item lock COSA
X<lock>

=for Pod::Functions +5.005 get a thread lock on a variable, subroutine, or method

Esta función coloca un bloqueo sobre una variable compartida, o un objeto referenciado contenido en I<COSA> hasta que el bloqueo salga del ámbito.

El valor devuelto es el mismo escalar, si el argumento es un escalar, o una referencia, si el argumento es un hash, array o subrutina.

lock() es una "palabra clave débil": significa que si usted ha definido una función con este nombre (antes de cualquier llamada a ella), esa función es la que se llamará.  Si no está bajo C<use threads::shared>, no hará nada.
Ver L<threads::shared>.

=item log EXPR
X<log> X<logarithm> X<e> X<ln> X<base> X<logaritmo>

=item log

=for Pod::Functions retrieve the natural logarithm for a number

Devuelve el logaritmo natural (base I<e>) de EXPR.  Si EXPR se omite, devuelve el logaritmo de C<$_>.  Para obtener el logaritmo de otra base, use álgebra básica: el logaritmo de base N de un número es igual al logaritmo natural de ese número dividido por el logaritmo natural de N. Por ejemplo:

    sub log10 {
        my $n = shift;
        return log($n)/log(10);
    }

Vea también L</exp> para la operación inversa.

=item lstat IDENTIFICADOR_ARCHIVO
X<lstat>

=item lstat EXPR

=item lstat IDENTIFICADOR_DIR

=item lstat

=for Pod::Functions stat a symbolic link

hace lo mismo que la función C<stat> (incluyendo el establecimiento del identificador de archivo especial C<_>) pero de un enlace simbólico en lugar del archivo apuntado por el enlace simbólico.  Si los enlaces simbólicos no están implementados en su sistema, se hace un C<stat> normal.  Para más información más detallada, por favor consulte la documentación de C<stat>.

Si EXPR se omite, stats C<$_>.

Cuestiones de portabilidad: L<perlport/lstat>.

=item m//

=for Pod::Functions match a string with a regular expression pattern

El operador de emparejamiento.  See L<perlop/"Operadores I<Regex>">.

=item map BLOQUE LISTA
X<map>

=item map EXPR,LISTA

=for Pod::Functions apply a change to a list to get back a new list with the changes

Evalúa el BLOQUE o EXPR para cada elemento de LISTA (poniendo localmente C<$_> a cada elemento) y devuelve una lista de valores compuesta de los resultados de cada evaluación.  En contexto escalar, devuelve el número total de elementos generados.  Evalúa BLOQUE o EXPR en contexto lista, de manera que cada elemento de la LISTA puede producir cero, uno o más elementos en el valor devuelto.

    @caracteres = map(chr, @numeros);

traduce una lista de números a sus caracteres correspondientes.

    my @cuadrados = map { $_ * $_ } @numeros;

traduce una lista de números a sus valores al cuadrado.

    my @cuadrados = map { $_ > 5 ? ($_ * $_) : () } @numeros;

demuestra que el número de elementos devueltos pueden diferir de la cantidad de elementos de la entrada.  Para omitir un elemento, devuelva una lista vacía ().
Esto también puede lograrse escribiendo

    my @cuadrados = map { $_ * $_ } grep { $_ > 5 } @numeros;

lo que hace más clara nuestras intenciones.

Map siempre devuelve una lista, que puede ser asignada a un hash de tal manera que los elementos serán parejas de claves y valores.  Ver L<perldata> para más detalles.

    %hash = map { una_clave_para($_) => $_ } @array;

es sólo una manera divertida de escribir

    %hash = ();
    foreach (@array) {
        $hash{una_clave_para($_)} = $_;
    }

Note que C<$_> es un alias al valor de la lista, por lo que se puede usar para modificar los elementos de la LISTA.  Mientras que esto suele ser útil, puede causar resultados extraños si los elementos de la LISTA no son variables.
El uso de un bucle C<foreach> normal para este propósito sería más claro en la mayoría de los casos.  Vea también L</grep> para un array compuesto por los elementos de la lista original en que el BLOQUE o EXPR se evalúa como verdadero.

Si C<$_> es léxica en el ámbito de aplicación donde C<map> aparece (porque se ha declarado con la forma obsoleta C<my $_>) entonces, además de ser un alias local a los elementos de la lista, C<$_> se mantiene léxica dentro del bloque; es decir, no puede ser vista desde el exterior, evitando cualquier potencial efecto colateral.

C<{> comienza tanto una referencia a hash como bloques, por lo que C<map { ...> podría ser tanto el comienzo de map BLOQUE LISTA o map EXPR, LISTA.  Debido a que Perl no mira, por adelantado, por el cierre C<}>, tiene que hacer una conjetura basándose en lo que encuentra justo después de <C{>.  Por lo general, lo hace bien, pero si no, no se dará cuenta de que algo anda mal hasta que llega a la C<}> y se encuentra con la omisión de (o inesperada) coma.  El error de sintaxis estará indicado cerca de C<}>, pero tendrá que cambiar algo cerca de C<{>, como en el uso de un C<+> unario o un punto y coma, para darle un poco de ayuda a Perl:

    %hash = map {  "\L$_" => 1  } @array # perl supone EXPR. mal
    %hash = map { +"\L$_" => 1  } @array # perl supone BLOQUE. bien
    %hash = map {; "\L$_" => 1  } @array # esto también funciona
    %hash = map { ("\L$_" => 1) } @array # como esto también
    %hash = map {  lc($_) => 1  } @array # y esto.
    %hash = map +( lc($_) => 1 ), @array # esto es EXPR ¡y funciona!

    %hash = map  ( lc($_), 1 ),   @array # evalúa a (1, @array)

o para forzar a un constructor de un hash anónimo use C<+{>:

    @hashes = map +{ lc($_) => 1 }, @array # EXPR, así que necesita
                                           # una coma al final

para obtener una lista de hashes anónimos, cada uno con sólo una entrada cada uno.

=item mkdir ARCHIVO,MÁSCARA
X<mkdir> X<md> X<directory, create> X<directorio, crear>

=item mkdir ARCHIVO

=item mkdir

=for Pod::Functions create a directory

Crea el directorio especificado por el nombre de ARCHIVO, con permisos especificados por la MÁSCARA (y modificada por C<umask>).  Si tiene éxito devuelve verdadero; en caso contrario devuelve falso y asigna C<$!> (errno).
MÁSCARA está puesto por defecto a 0777, si no se indica, y ARCHIVO es por defecto C<$_>, si no se indica, también.

En general, es mejor crear directorios con una MÁSCARA permisiva y dejar que el usuario lo modifique con su C<umask> que suministrar una MÁSCARA restrictiva y no darle al usuario una forma de ser más permisivo.
Las excepciones a esta regla son cuando el archivo o directorio debe mantenerse privados (archivos de correo, por ejemplo).  La entrada perlfunc(1) sobre C<umask> discute la elección de la máscara con más detalles.

Tenga en cuenta que de acuerdo con POSIX 1.003.1-1996, el nombre de archivo puede tener cualquier número de barras diagonales.  Algunos sistemas operativos y de sistemas de archivos no interpretan esto de forma correcta, por lo que Perl automáticamente elimina todas las barras diagonales finales para tener a todo el mundo feliz.

Para, recursivamente, crear una estructura de directorios, mire la función C<make_path> del módulo L<File::Path>.

=item msgctl ID,CMD,ARG
X<msgctl>

=for Pod::Functions SysV IPC message control operations

Llama a la función System V IPC msgctl(2).  Probablemente escribirá

    use IPC::SysV;

primero para obtener las definiciones de las constantes.  Si CMD es C<IPC_STAT>, entonces ARG debe ser una variable que contendrá la estructura C<msqid_ds> devuelta.  Devuelve lo mismo que C<ioctl>: el valor indefinido para error, C<"0 but true"> para el cero, o el valor de retorno real, en caso contrario.  Vea también la documentación de L<perlipc/"SysV IPC"> y C<IPC::SysV> y C<IPC::Semaphore>.

Cuestiones de portabilidad: L<perlport/msgctl>.

=item msgget KEY,FLAGS
X<msgget>

=for Pod::Functions get SysV IPC message queue

Llama a la función System V IPC msgget(2).  Devuelve el identificador de una cola de mensajes, o el valor C<undef> si hay un error.  Vea también la documentación de L<perlipc/"SysV IPC"> y C<IPC::SysV> y C<IPC::Msg>.

Cuestiones de portabilidad: L<perlport/msgget>.

=item msgrcv ID,VAR,SIZE,TYPE,FLAGS
X<msgrcv>

=for Pod::Functions receive a SysV IPC message from a message queue

Llama a la función System V IPC msgrcv para recibir un mensaje desde la cola de mensaje ID en la variable VAR con un tamaño máximo de mensaje.  Note que en cuanto se recibe un mensaje, el tipo de mensaje, en formato de un entero largo en forma nativa, será la primera cosa almacenada en VAR, seguida por el mensaje real.  Este empaquetado se puede abrir con C<unpack("l! a*")>.
Contamina la variable.  Devuelve verdadero si tuvo éxito, falso en caso de error.  Vea también la documentación de L<perlipc/"SysV IPC"> y C<IPC::SysV> y C<IPC::SysV::Msg>.

Cuestiones de portabilidad: L<perlport/msgrcv>.

=item msgsnd ID,MSG,FLAGS
X<msgsnd>

=for Pod::Functions send a SysV IPC message to a message queue

Llama a la función msgsnd de System V IPC para enviar el mensaje MSG a la cola de mensajes ID.  MSG debe comenzar con un tipo de mensaje, contenido en un entero nativo largo, seguido por la longitud del mensaje real, y finalmente el mensaje mismo.  Este tipo de empaquetado se puede lograr con C<pack("l! a*", $tipo, $mensaje)>.  Devuelve verdadero si tuvo éxito, falso en caso de error.  Vea también la documentación de C<IPC::SysV> y C<IPC::SysV::Msg>.

Cuestiones de portabilidad: L<perlport/msgsnd>.

=item my VARLIST
X<my>

=item my TIPO VARLIST

=item my VARLIST : ATRIBUTOS

=item my TIPO VARLIST : ATRIBUTOS

=for Pod::Functions declare and assign a local variable (lexical scoping)

Un C<my> declara las variables enumeradas como locales (léxicamente) en el bloque, archivo, o C<eval>.  Si se lista más de una variable, la lista debe ser puesta entre paréntesis.

La semántica exacta e interfaz de TIPO y ATRIBUTOS están aún en evolución.  TIPO puede ser una palabra simple, una constante declarada con C<use constant>, o C<__PACKAGE__>.  Está vinculado al uso del pragma C<fields>, y los atributos se manejan con el pragma C<attributes>, o a partir de Perl 5.8.0 también a través del módulo C<Attribute::Handlers>.  Ver L<perlsub/"Variables privadas vía my()"> para más detalles, y L<fields>, L<attributes>, y L<Attribute::Handlers>.

Note que con una lista entre paréntesis, se puede utilizar C<undef> como un marcador de posición, por ejemplo para saltar la asignación de valores iniciales:

    my ( undef, $min, $hora ) = localtime;

=item next ETIQUETA
X<next> X<continue>

=item next EXPR

=item next

=for Pod::Functions iterate a block prematurely

El comando C<next> es como la instrucción C<continue> en C; comienza la siguiente iteración del bucle:

    LINEA: while (<STDIN>) {
        next LINEA if /^#/;  # descartar comentarios
        #...
    }

Note que si hubiera un bloque C<continue> a continuación del anterior, se ejecutaría incluso en las líneas descartadas.  Si la ETIQUETA se omite, el comando se refiere al bucle más interior en que se encuentre.  La forma C<next EXPR>, disponible a partir de Perl 5.18.0, permite que se compute un nombre de etiqueta en tiempo de ejecución; de lo contrario es idéntico a C<next ETIQUETA>.

C<next> no se puede utilizar para salir de un bloque que devuelve un valor, como en C<eval {}>, C<sub {}> o C<do {}>, y no debe ser utilizado para salir de una operación grep() o map().

Note que un bloque por sí mismo es semánticamente idéntico a un bucle que se ejecuta una vez.  Por lo tanto C<next> saldrá del primer bloque.

Ver también L</continue> para una ilustración de cómo funcionan C<last>, C<next> y C<redo>.

A diferencia de otros operadores con nombre, tiene la misma precedencia que una asignación.
También está exenta de la regla se-parece-a-una-función, así que C<next ("foo")."bar"> hará que "bar" sea parte del argumento a C<next>.

=item no MÓDULO VERSIÓN LISTA
X<no declarations> X<unimporting> X<declaraciones no> X<desimportando>

=item no MÓDULO VERSIÓN

=item no MÓDULO LISTA

=item no MÓDULO

=item no VERSIÓN

=for Pod::Functions unimport some module symbols or semantics at compile time

Ver la función C<use>, de la cuál C<no> es lo opuesta.

=item oct EXPR
X<oct> X<octal> X<hex> X<hexadecimal> X<binary> X<bin> X<binario>

=item oct

=for Pod::Functions convert a string to an octal number

Interpreta EXPR como una cadena en octal y devuelve el valor correspondiente.  (Si EXPR comienza con C<0x>, se interpreta como una cadena en hexadecimal.  Si EXPR empieza con C<0b>, se interpreta como una cadena binaria.  El espacio en blanco que le rodea es ignorado en los tres casos).
Lo que le sigue se interpretará como un decimal, binario, octal y hexadecimal en la notación estándar de Perl:

    $val = oct($val) if $val =~ /^0/;

Si se omite EXPR, se usa C<$_>.   Para hacer lo contrario (producir un número en octal), use sprintf() o printf():

    $dec_perms = (stat("archivo"))[2] & 07777;
    $oct_perm_str = sprintf "%o", $permisos;

La función oct() es de uso común cuando una cadena como C<644> tiene que ser convertida en un modo de archivo, por ejemplo.  Aunque Perl convierte automáticamente las cadenas en números según sea necesario, esta conversión automática asume que es en base 10.

El espacio en blanco que le rodea es ignorado sin avisar, como también cualquier otro carácter que no sea un dígito, como un punto decimal (C<oct> sólo maneja números enteros no negativos, no enteros negativos o en punto flotante).

=item open IDENTIFICADOR_ARCHIVO,EXPR
X<open> X<pipe> X<file, open> X<fopen> X<archivo, open>

=item open IDENTIFICADOR_ARCHIVO,MODO,EXPR

=item open IDENTIFICADOR_ARCHIVO,MODO,EXPR,LISTA

=item open IDENTIFICADOR_ARCHIVO,MODO,REFERENCIA

=item open IDENTIFICADOR_ARCHIVO

=for Pod::Functions open a file, pipe, or descriptor

Abre el archivo cuyo nombre viene dado por EXPR, y lo asocia con IDENTIFICADOR_ARCHIVO.

Ejemplos sencillos para abrir un archivo en modo lectura:

    open(my $fh, "<", "input.txt") 
	or die "cannot open < input.txt: $!";

y para escritura:

    open(my $fh, ">", "output.txt") 
	or die "cannot open > output.txt: $!";

(Lo siguiente es una referencia general a open(): para una introducción más suave puede considerar L<perlopentut>).

Si IDENTIFICADOR_ARCHIVO es una variable escalar indefinida (o array o elemento hash), un nuevo identificador de archivo es autovivificado, significando que a la variable es asignada una referencia a un nuevo, anónimo y reservado identificador de archivo.  De lo contrario, si IDENTIFICADOR_ARCHIVO es una expresión, su valor es el identificador de archivo real.  (Esto se considera una referencia simbólica, por lo que C<use strict "refs"> I<no> debe estar activado).

Si se especifican tres (o más) argumentos, es tomado el modo de apertura (incluyendo un codificado opcional) del segundo argumento, a diferencia del nombre del archivo, que estará en el tercer argumento.  Si MODO es C<< < >> o nada, el archivo se abre para lectura.
Si MODO es C<< > >>, el archivo es abierto para salida. Los archivos que ya existan serán truncados ("sobreescritos"); y los que no existan serán creados como nuevos archivos.
Si MODO es C<<< >> >>>, el archivo es abierto en modo añadir, y de nuevo, será creado si es necesario.

Puede poner un C<+> en frente de C<< > >> o C<< < >> para indicar que desea acceder al archivo tanto en lectura como en escritura; así, C<< +< >> casi siempre es la forma preferida para la lectura/escritura de actualizaciones -el modo C<< +> >> primero sobreescribirá el archivo-.  Por lo general, no puede utilizar el modo de lectura y escritura para la actualización de archivos de texto, ya que tienen registros de longitud variable.  Ver la opción B<-i> en L<perlrun> para una mejor aproximación.  El archivo se crea con permisos de C<0666> modificados por el valor de C<umask> del proceso.

Estos prefijos se corresponden con los modos de la función fopen(3) de C<r>, C<r+>, C<w>, C<w+>, C<a> y C<a+>.

En las formas de la llamada de uno y de dos argumentos, el modo y el nombre del archivo debe ser concatenados (en ese orden), preferiblemente separados por espacio en blanco.  Puede -pero no debe- omitir el modo en estos formatos cuando ese modo sea C<< < >>.  Siempre es más seguro utilizar el formato de dos argumentos de C<open> si el argumento con el nombre de archivo es un literal bien visible.

Para tres o más argumentos, cuando MODO es C<|->, el nombre del archivo se interpreta como un comando cuya salida va a ser entubada, y si MODO es <-|>, el nombre del archivo se interpreta como un comando que entuba la salida hacia nosotros.  En la forma de dos argumentos (y un argumento), debe sustituir el guión (C<->) por el comando.
Ver L<perlipc/"Usando open() por IPC"> para más ejemplos de sobre esto.
(No se le permite hacer un C<open> a un comando que entube tanto en la entrada I<como> en la salida, pero vea L<IPC::Open2>, L<IPC::Open3>, y L<perlipc/"Comunicación bidireccional con otro proceso"> para alternativas sobre esto).

En la forma de tubería tomando tres o más argumentos, si se especifica LISTA (argumentos adicionales después del nombre del comando) entonces LISTA son los argumentos para el comando invocado, si la plataforma lo soporta.  El significado de C<open> con más de tres argumentos para modos no entubados aún no está definido, pero "capas" experimentales puede dar significados adicionales a la LISTA de argumentos adicionales.

En la forma de dos argumentos (y de un argumento), abriendo C<< <- >> o C<-> abre STDIN, y abriendo C<< >- >> abre STDOUT.

Puede (y normalmente debería) usar la forma de tres argumentos de open para especificar capas E/S (algunas veces referidas como "disciplinas") para aplicarlas al identificador, afectando al modo en que la entrada y salida son procesadas (vea L<open> y L<PerlIO> para más detalles).  Por ejemplo:

  open(my $fh, "<:encoding(UTF-8)", "archivo")
    || die "no puedo abrir archivo codificado en UTF-8: $!";

abre el archivo codificado en UTF-8 que contiene caracteres Unicode; vea L<perluniintro>.  Tenga en cuenta que si las capas se especifican en la forma de tres argumentos, entonces las capas por defecto almacenadas en ${^OPEN} (ver L<perlvar>; normalmente fijados por el pragma B<open> o la opción B<-CioD>) son ignoradas.
Esas capas también se ignorarán si especifica un carácter de dos puntos sin que le siga ningún nombre.  En ese caso, se usa la capa predeterminada para el sistema operativo (:raw en Unix, :crlf en Windows).

open() devuelve un valor distinto de cero en caso de éxito, indefinido en otro caso.  Si el C<open> contiene una tubería, el valor de retorno pasa a ser el pid del subproceso.

Si está usando Perl en un sistema que distingue entre archivos de texto y archivos binarios, entonces debería consultar L</binmode> para ver sugerencias para tratar con esto.  La distinción clave entre los sistemas que requieren C<binmode> y los que no, es en sus formatos de archivo de texto.  Los sistemas como Unix, Mac OS, y Plan 9, cuyos finales de línea terminan con un único carácter y codifican ese carácter en C como C<"\n"> no necesitan C<binmode>.  El resto lo necesita.

Al abrir un archivo, es difícil que sea una buena idea seguir si la solicitud ha fallado, por lo que C<open> se utiliza con frecuencia con C<die>.  Incluso si C<die> no hace lo que usted quiere (por ejemplo, en un script CGI, en la que desea dar formato a un mensaje de error apropiado (aunque existen módulos que pueden ayudar con ese problema)) controle siempre el valor de retorno de la apertura de un archivo.  

Se cerrará el gestor de archivo cuando su contador de referencias llegue a cero.
Si es una variable declarada en un ámbito léxico con C<my>, normalmente significa el final del ámbito que la encierra.  Sin embargo, este cierre automático no comprueba errores, así que es mejor cerrar explícitamente los gestores de archivo, especialmente aquellos que se usaron para escribir:

    close($handle)
       || warn "close falló: $!";

Un estilo más viejo es utilizar una palabra simple como gestor de archivo, así

    open(FH, "<", "input.txt")
       or die "cannot open < input.txt: $!";

Entonces puedes usar C<FH> como gestor de archivo, en C<< close FH >> y C<< <FH> >> y demás.  Note que es una variable global, así que esta forma no es la recomendada en código nuevo.

Como atajo, la llamada con un solo argumento toma el nombre del archivo de la variable escalar global del mismo nombre que el gestor de archivo:

    $ARTICULO = 100;
    open(ARTICULO) or die "No puedo encontrar el artículo $ARTICULO: $!\n";

Aquí, C<$ARTICULO> debe ser una variable escalar global (paquete), no declarada con C<my> o C<state>.

Como un caso especial, la forma de tres argumentos con un modo de lectura/escritura y el tercer argumento siendo C<undef>:

    open(my $tmp, "+>", undef) or die ...

abre un identificador de archivo a un archivo anónimo temporal.  También, usando C<< +< >> trabaja de forma simétrica, pero debe considerar, escribir antes algo en el archivo temporal.  Necesitará usar seek() para hacer la lectura.

Perl se compila, por defecto, con PerlIO; A menos que lo haya cambiado (como compilar Perl con C<Configure -Uuseperlio>), puede abrir identificadores de archivo directamente a escalares Perl de esta forma:

    open($fh, ">", \$variable) || ..

Para (re)abrir C<STDOUT> o C<STDERR> como un archivo en memoria, primero, cierrelos:

    close STDOUT;
    open(STDOUT, ">", \$variable)
	or die "No puedo abrir STDOUT: $!";

Ejemplos generales:

    open(LOG, ">>/usr/spool/news/twitlog");  # (log es palabra reservada)
    # si open falla, la salida es descartada

    open(my $dbase, "+<", "dbase.mine")      # abrir para actualizar
        or die "No puedo abrir 'dbase.mine' para actualizar: $!";

    open(my $dbase, "+<dbase.mine")          # lo mismo
        or die "No puedo abrir 'dbase.mine' para actualizar: $!";

    open(ARTICULO, "-|", "caesar <$articulo")  # decodificar el artículo
        or die "No puedo iniciar caesar: $!";

    open(ARTICLE, "caesar <$article |")      # lo mismo
        or die "No puedo iniciar caesar: $!";

    open(EXTRACT, "|sort >Tmp$$")            # $$ es nuestro proceso id
        or die "No puedo iniciar sort: $!";

    # archivos en memoria
    open(MEMORIA, ">", \$var)
        or die "No puedo abrir el archivo en memoria: $!";
    print MEMORIA "foo!\n";             # la salida aparecerá en $var

    # procesa la lista de archivos pasados como argumentos junto con cualquier archivo a incluir

    foreach $archivo (@ARGV) {
        procesa($archivo, "fh00");
    }

    sub procesa {
        my($archivo, $entrada) = @_;
        $entrada++;    # esto es un incremento de cadena
        unless (open($input, "<", $archivo)) {
            print STDERR "No puedo abrir $archivo: $!\n";
            return;
        }

        local $_;
        while (<$input>) {    # note el uso de la indirección
            if (/^#include "(.*)"/) {
                process($1, $input);
                next;
            }
            #...          # lo que sea
        }
    }

Ver L<perliol> para información detallada sobre PerlIO.

Puede también, en la tradición de Bourne shell, especificar una EXPR comenzando con C<< >& >>, en cuyo caso el resto de la cadena se interpreta como el nombre de un identificador de archivo (o descriptor de archivo, si es numérico) para que sea duplicado (con C<dup(2)>) y luego abierto.  Puede usar C<&> después de C<< > >>, C<<< >> >>>, C<< < >>, C<< +> >>, C<<< +>> >>>, y C<< +< >>.
El modo que especifique debe coincidir con el modo del identificador de archivo original.
(Duplicar un identificador de archivo no tiene en cuenta ningún contenido actual de los búfer de E/S).   Si utiliza la forma de tres argumentos, entonces puede pasar un número, el nombre de un identificador de archivo o la normal "referencia a un glob".

Aquí hay un script que salva, redirecciona, y restaura C<STDOUT> y C<STDERR> usando varios métodos:

    #!/usr/bin/perl
    open(my $oldout, ">&STDOUT")     or die "No puedo duplicar STDOUT: $!";
    open(OLDERR,     ">&", \*STDERR) or die "No puedo duplicar STDERR: $!";

    open(STDOUT, '>', "foo.out") or die "No puedo redirigir STDOUT: $!";
    open(STDERR, ">&STDOUT")     or die "No puedo duplicar STDOUT: $!";

    select STDERR; $| = 1;  # hacerlo sin búfer
    select STDOUT; $| = 1;  # hacerlo sin búfer

    print STDOUT "stdout 1\n";  # esto funciona
    print STDERR "stderr 1\n";  # también para subprocesos

    open(STDOUT, ">&", $oldout) or die "No puedo duplicar \$oldout: $!";
    open(STDERR, ">&OLDERR")    or die "No puedo duplicar OLDERR: $!";

    print STDOUT "stdout 2\n";
    print STDERR "stderr 2\n";

Si especifica C<< '<&=X' >>, donde C<X> es un número de descriptor de archivo o un identificador de archivo, entonces Perl hará un equivalente de C de C<fdopen> de ese descriptor de archivo (y no llamar a C<dup(2)>).  Por ejemplo:

    # abrir para lectura, reutilizando el número de descriptor de $fd
    open(FILEHANDLE, "<&=$fd")

o bien

    open(FILEHANDLE, "<&=", $fd)

o bien

    # Abrir para añadir, usando el número de descriptor de OLDFH
    open(FH, ">>&=", OLDFH)

o bien

    open(FH, ">>&=OLDFH")

Ser parco en identificadores de archivo también es útil (además de ser parsimoniosos), por ejemplo cuando algo depende de descriptores de archivo, como por ejemplo, el uso del bloqueo flock().  Si hace sólo C<< open(A, ">>&B") >>, el identificador de archivo A no tendrá el mismo descriptor de archivo que B, y por lo tanto flock(A) no hará un flock(B), y viceversa.  Pero con C<< open(A, ">>&=B") >>, los identificadores de archivo compartirán el mismo descriptor de archivo subyacente.

Tenga en cuenta que si está usando un Perl más viejo que 5.8.0, Perl usa las bibliotecas estándar C de fdopen() para implementar la funcionalidad de C<=>.  En muchos sistemas Unix, fdopen() falla cuando los descriptores de archivo exceden de un valor determinado, por lo general, 255.
Para las versiones de Perl 5.8.0 y posteriores, PerlIO es (casi siempre) el valor predeterminado.

Puede ver cuándo su Perl se ha compilado con PerlIO ejecutando C<perl -V> y buscando por la línea C<useperlio=>.  Si C<useperlio> está C<definido>, tiene PerlIO activado; de lo contrario, no.

Si abre una tubería en el comando C<-> (es decir, ya sea C<|-> o C<-|> con la forma de uno o dos argumentos de C<open>), entonces se crea un C<fork> implícito, y C<open> regresa dos veces: en el proceso padre devuelve el PID del proceso hijo, y el proceso hijo devuelve un (definido valor) C<0>.
Use C<defined($pid)> o C<//> para determinar cuándo el open se realizó correctamente.

Por ejemplo, utilice esto

    $child_pid = open(DESDE_HIJO, "|-")      // die "no puedo hacer fork: $!";

o bien

    $child_pid = open(AL_HIJO, "|-")         // die "no puedo hacer fork: $!";

seguido por 

    if ($child_pid) {
	# soy el padre:
	# o escribo AL_HIJO o leo DESDE_HIJO
	...
       waitpid $child_pid, 0;
    } else {
	# soy el hijo; use STDIN/STDOUT de forma normal
	...
	exit;
    } 

El identificador de archivo se comporta de forma normal para el padre, pero la E/S del identificador de archivo es entubada desde/hacia el STDOUT/STDIN del proceso hijo.
En el proceso hijo, el identificador de archivo no se abre: la E/S sucede desde/hasta el nuevo STDOUT/STDIN.  Habitualmente esto se usa como el open entubado cuando quiere ejercer más control sobre cómo el comando entubado es ejecutado, como cuando se ejecuta con setuid y no quiero tener que escanear comandos del shell buscando metacaracteres.

Los siguientes bloques son, más o menos, equivalentes:

    open(FOO, "|tr '[a-z]' '[A-Z]'");
    open(FOO, "|-", "tr '[a-z]' '[A-Z]'");
    open(FOO, "|-") || exec 'tr', '[a-z]', '[A-Z]';
    open(FOO, "|-", "tr", '[a-z]', '[A-Z]');

    open(FOO, "cat -n '$archivo'|");
    open(FOO, "-|", "cat -n '$archivo'");
    open(FOO, "-|") || exec "cat", "-n", $archivo;
    open(FOO, "-|", "cat", "-n", $archivo);

Los dos últimos ejemplos de cada bloque muestra la tubería como "en forma de lista", que todavía no está soportado en todas las plataformas.  Una buena regla general es que si su plataforma tiene una verdadera función C<fork()> (en otras palabras, si su plataforma es Unix, incluyendo Linux y MacOS X), puede utilizar la forma de lista.  Querrá usar la forma de lista de la tubería para que pueda pasar argumentos literales al comando sin el riesgo de que el shell interprete cualquier posible metacarácter que hubiera en ellos.  Sin embargo, esto también le impedirá la apertura de tuberías a comandos que, intencionalmente, contenga metacaracteres shell, tales como:

    open(FOO, "|cat -n | expand -4 | lpr")
	// die "No puedo entubar hacia lpr: $!";

Ver L<perlipc/"Aperturas seguras de tuberías"> para más ejemplos sobre esto.

Perl intentará vaciar todos los archivos abiertos para la salida antes de cualquier operación que pueda hacer un fork, pero esto quizás no esté soportado en algunas plataformas (vea L<perlport>).  Para estar seguro, es posible que necesite el conjunto C<|> ($AUTOFLUSH en English) o llame al método C<autoflush()> de C<IO::Handle> en cualquier controlador abierto.

En sistemas que soportan la bandera B<close-on-exec> (I<cerrar en ejecución>) en archivos, esta bandera se establecerá para el descriptor de archivo abierto recientemente según lo determinado por el valor de C<$^F>.  Ver L<perlvar/$^F>.

Cerrando cualquier identificador de archivo entubado hace que el proceso padre espere a que el hijo termine, y devuelva el valor de estado en C<$?> y en C<${^CHILD_ERROR_NATIVE}>.

Al nombre del archivo pasado a las formas de uno y dos argumentos de open() se le eliminarán los espacios en blanco iniciales y finales, y se activará la redirección por parte de los caracteres especiales.  Esta propiedad, conocida como "open() mágico", a menudo se puede utilizar con buenos resultados.  Un usuario podría especificar un nombre de archivo como F<"rsh cat archivo |">, o podría cambiar ciertos nombres de archivo, según lo que necesite:

    $archivo =~ s/(.*\.gz)\s*$/gzip -dc < $1|/;
    open(FH, $archivo) or die "No puedo abrir $archivo: $!";

Use la forma de tres argumentos para abrir un archivo con una cantidad arbitraria de caracteres extraños, en su nombre,

    open(FOO, "<", $archivo)
	|| die "no puedo abrir < $archivo: $!";

de lo contrario es necesario proteger los espacios en blanco iniciales y finales:

    $archivo =~ s#^(\s)#./$1#;
    open(FOO, "< $archivo\0")
	|| die "falló el open: $!";

(esto quizás no funcione en algunos sistemas de archivos extraños).  Uno debe elegir escrupulosamente entre la I<magia> y la forma de I<tres argumentos> de open():

    open(IN, $ARGV[0]) || die "no puedo abrir $ARGV[0]: $!";

permitirá al usuario especificar un argumento de la forma C<"rsh cat archivo |">, pero no funcionará en un nombre de archivo que tenga un espacio al final, mientras que

    open(IN, "<", $ARGV[0])
	|| die "no puedo abrir < $ARGV[0]: $!";

tendrá exactamente las restricciones contrarias.

Si busca un "auténtico" C<open> como en C (vea C<open(2)> en su sistema), entonces debe usar la función C<sysopen>, que no incluye ninguna magia (pero puede utilizar, sutilmente, diferentes modos de acceso a archivos que con el open() de Perl, que se asigna a la función del C fopen()).  Esta es otra manera de proteger los nombres de archivo de su interpretación.  Por ejemplo:

    use IO::Handle;
    sysopen(HANDLE, $ruta, O_RDWR|O_CREAT|O_EXCL)
        or die "sysopen $ruta: $!";
    $anterior_fh = select(HANDLE); $| = 1; select($anterior_fh);
    print HANDLE "algo $$\n";
    seek(HANDLE, 0, 0);
    print "El archivo contiene: ", <HANDLE>;

Ver L</seek> para más detalles acerca de mezclar lectura y escritura.

Cuestiones de portabilidad: L<perlport/open>.

=item opendir IDENTIFICADOR_DIR,EXPR
X<opendir>

=for Pod::Functions open a directory

Abre un directorio llamado EXPR para ser procesado por C<readdir>, C<telldir>, C<seekdir>, C<rewinddir>, y C<closedir>.  Devuelve verdadero si tuvo éxito.
IDENTIFICADOR_DIR puede ser una expresión cuyo valor se puede usar como un identificador de directorio indirecto, normalmente el nombre real del identificador.  Si IDENTIFICADOR_DIR es una variable escalar indefinida (o elemento array o hash), a la variable se le asigna una referencia a un nuevo identificador de directorio anónimo; es decir, es autovivificado.
Los IDENTIFICADOR_DIR tienen su propio espacio de nombres separados de los IDENTIFICADORes de archivo.

Vea el ejemplo en C<readdir>.

=item ord EXPR
X<ord> X<encoding> X<codificación>

=item ord

=for Pod::Functions find a character's numeric representation

Devuelve el valor numérico del primer carácter de EXPR.
Si EXPR es una cadena vacía, devuelve 0.  Si se omite EXPR, se usa C<$_>.
(Note que es un I<carácter>, no un byte).

Para lo contrario, vea L</chr>.
Vea L<perlunicode> para más información acerca de Unicode.

=item our VARLIST
X<our> X<global>

=item our TIPO VARLIST

=item our VARLIST : ATRIBUTOS

=item our TIPO VARLIST : ATRIBUTOS

=for Pod::Functions +5.6.0 declare and assign a package variable (lexical scoping)

C<our> crea un alias léxico a una variable de paquete (es decir, global) con el mismo nombre en el paquete actual, para usarla dentro del ámbito léxico actual.

C<our> tiene las mismas reglas de ámbito que C<my> o C<state>, significando que solo es válido dentro de un ámbito léxico.  A diferencia de C<my> o C<state>, que declaran nuevas variables (léxicas), solo C<our> crea un alias a una variable existente: una variable de paquete del mismo nombre.

Esto significa que cuando C<use strict 'vars'> está activo, C<our> le permite usar una variable de paquete sin cualificarla con el nombre de paquete, pero sólo en el ámbito léxico de la declaración C<our>.  Esto se aplica inmediatamente, incluso en la misma sentencia.

    package Foo;
    use strict;

    $Foo::foo = 23;

    {
        our $foo;   # alias de $Foo::foo
        print $foo; # imprime 23
    }

    print $Foo::foo; # imprime 23

    print $foo; # ERROR: requiere un nombre explícito de paquete

Esto funciona incluso si la variable de paquete no se haya usado antes, como si las variables de paquete aparecieran a la existencia la primera vez que se usen.

    package Foo;
    use strict;

    our $foo = 23;   # igual que $Foo::foo = 23

    print $Foo::foo; # imprime 23

Ya que la variable se vuelve legal inmediatamente bajo C<use strict 'vars'>, así que mientras no exista una variable con ese nombre en ese ámbito, puede entonces referirse a la variable de paquete dentro de la misma sentencia.

    package Foo;
    use strict;

    my  $foo = $foo; # error, el $foo de la parte derecha no está declarado
    our $foo = $foo; # sin errores

Si se lista más de una variable, la lista debe ser puesta entre paréntesis.

    our($bar, $baz);

Una declaración C<our> declara un alias para una variable de paquete que será visible en todo su ámbito léxico, incluso a través de las fronteras del paquete.  El paquete en el que se introduce la variable se determina en el punto de la declaración, no en el momento de ser usada.  Esto significa que el siguiente comportamiento cumple que:

    package Foo;
    our $bar;      # declara $Foo::bar para el resto del ámbito léxico
    $bar = 20;

    package Bar;
    print $bar;    # pinta 20, porque se refiere a $Foo::bar

Múltiples declaraciones C<our> con el mismo nombre en el mismo ámbito léxico son permitidas si están en diferentes paquetes.  Si están en el mismo paquete, Perl emitirá mensajes de advertencia si los tiene activados, al igual que múltiples declaraciones de C<my>.  A diferencia de una segunda declaración de C<my>, que unirá el nombre a una nueva variable, una segunda declaración de C<our> en el mismo paquete, en el mismo ámbito, es simplemente redundante.

    use warnings;
    package Foo;
    our $bar;      # declara $Foo::bar para el resto del ámbito léxico
    $bar = 20;

    package Bar;
    our $bar = 30; # declara $Bar::bar para el resto del ámbito léxico
    print $bar;    # pinta 30

    our $bar;      # emite una advertencia pero no tiene otro efecto
    print $bar;    # sigue pintando 30

Una declaración C<our> también puede tener una lista de atributos asociados a ella.

La semántica exacta e interfaz de TIPO y ATRIBUTOS están aún en evolución.  TIPO está vinculado al uso del pragma C<fields>, y los atributos se manejan con el pragma C<attributes>, o a partir de Perl 5.8.0 también a través del módulo C<Attribute::Handlers>.  Ver L<perlsub/"Variables privadas vía my()"> para más detalles, y L<fields>, L<attributes>, y L<Attribute::Handlers>.

Note que con una lista entre paréntesis, se puede utilizar C<undef> como un marcador de posición, por ejemplo para saltar la asignación de valores iniciales:

    our ( undef, $min, $hora ) = localtime;

C<our> difiere de C<use vars>, que permite usar un nombre no calificado I<sólo> dentro del paquete afectado, pero sí en diversos ámbitos.

=item pack PLANTILLA,LISTA
X<pack>

=for Pod::Functions convert a list into a binary representation

Toma una LISTA de valores y la convierte en una cadena usando las reglas dadas por la PLANTILLA.  La cadena resultante es la concatenación de los valores convertidos.  Normalmente, cada valor convertido se parece a su representación a nivel de máquina.  Por ejemplo, en máquinas de 32 bits, un entero se puede representar por una secuencia de 4 bytes, que en Perl se presentará como una cadena de cuatro caracteres de longitud. 

Vea L<perlpacktut> para una introducción a esta función.

La PLANTILLA es una secuencia de caracteres que dan el orden y el tipo de los valores, de la siguiente manera:

    a  Una cadena con datos binarios arbitrarios, serán rellenados con nulos.
    A  Una cadena de texto (ASCII), será rellenada con espacios.
    Z  Una cadena terminada en cero (ASCIZ), será rellenada con nulos.

    b  Una cadena de bit (en orden de bit ascendente dentro de cada byte,
       like vec()).
    B  Un cadena de bit (en orden de bit descendente dentro de cada byte).
    h  Una cadena hexadecimal (primero el nibble bajo).
    H  Una cadena hexadecimal (primero el nibble alto).

    c  Un valor de un carácter con signo (8 bit).
    C  Un valor de un carácter sin signo (octeto).
    W  Un valor de un carácter sin signo (puede ser mayor de 255).

    s  Un valor de un corto con signo (16 bit).
    S  Un valor de un corto sin signo.

    l  Un valor de un largo con signo (32 bit).
    L  Un valor de un largo sin signo.

    q  Un valor cuádruplo con signo (64 bit).
    Q  Un valor cuádruplo sin signo.
         (Quads están disponibles sólo si su sistema soporta valores de 64-bit
          enteros _y_ si Perl se compiló para soportar
          aquello.  En caso contrario, lanza una excepción).

    i  Un valor entero con signo.
    I  Un valor entero sin signo.
         (Este 'entero' es _al_menos_, de 32 bit de ancho.  Su exacto
          tamaño depende de lo que un compilador C local llame 'int').

    n  Un corto sin signo (16 bit) en orden "red" (big-endian).
    N  Un largo sin signo (32 bit) en orden "red" (big-endian).
    v  Un corto sin signo (16 bit) en orden "VAX" (little-endian).
    V  Un largo sin signo (32 bit) en orden "VAX" (little-endian).

    j  Un valor entero Perl interno con signo (IV).
    J  Un valor entero Perl interno sin signo (UV).

    f  Un flotante en simple precisión en formato nativo.
    d  Un flotante en doble precisión en formato nativo.

    F  Un valor Perl interno de punto flotante (NV) en formato nativo
    D  Un flotante en doble-largo precisión en formato nativo.
         (Dobles largos están disponibles sólo si su sistema soporta
          valores doble largos _y_ si Perl se compiló para
          soportarlo.  En caso contrario, lanza una excepción.
          Note que existen diferentes formatos de dobles largos).

    p  Un puntero a una cadena terminada en nulo.
    P  Un puntero a una estructura (una cadena de longitud fija).

    u  Una cadena codificada con uuencode.
    U  Un número de un carácter Unicode.  Codifica a un carácter en modo ca-
       rácter y UTF-8 (o UTF-EBCDIC en plataformas EBCDIC) en
       modo byte.

    w  Un entero comprimido en BER (no en ASN.1 BER, vea perlpacktut
       para detalles).  Sus bytes representan un entero sin signo en
       base 128, primero los dígitos más significativos, con el menor número de dígitos
       que sea posible.  El octavo bit (el bit más alto) es puesto en cada byte
       excepto el último.

    x  Un byte nulo (es decir, ASCII NUL, "\000", chr(0))
    X  Retrocede un byte.
    @  Relleno con nulos o truncar a una posición absoluta, contado desde el
       inicio del grupo () más interno.
    .  Relleno con nulos o truncado a una posición absoluta especificada por
       el valor.
    (  Inicia un grupo ().

Uno o más de los modificadores siguientes pueden, opcionalmente, seguir a ciertas letras en la PLANTILLA (la segunda columna enumeran las letras para las cuales el modificador es válido):

    !   sSlLiI     Fuerza a tamaños nativos (short, long, int) en lugar
                   de tamaños fijos (16-/32-bit).

    !   xX         Hace x y X actuar como comandos de alineamiento.

    !   nNvV       Trata a enteros como con signo, en lugar de sin signo.

    !   @.         Especifica una posición como desplazamiento de byte en la interna
                   representación de la cadena empaquetada.  Eficiente
                   pero peligroso.

    >   sSiIlLqQ   Fuerza un orden de bytes en big-endian.
        jJfFdDpP   (El "big end" toca la construcción).

    <   sSiIlLqQ   Fuerza un orden de bytes en little-endian.
        jJfFdDpP   (El "little end" toca la construcción).

Los modificadores C<< > >> y C<< < >> también se pueden utilizar en los grupos C<()> para obligar a un particular orden de bytes en todos los componentes de ese grupo, que incluye todos sus subgrupos.

=begin comment

Larry recuerda que los formatos de cadena hex y bit (H, h, B, b) se añadieron para empaquetar el procesamiento de datos de la sonda Magallanes de la NASA.  Magallanes estaba en una órbita elíptica, utilizando la antena para el mapeo de radar cuándo se acercaba a Venus y para comunicarse con la Tierra en el resto de la órbita.
Había dos unidades de transmisión, pero uno de estos falló, y luego el otro desarrolló un error por el cual, aleatoriamente cambiaba el sentido de todos los bits. Fue fácil detectar automáticamente registros completos con el sentido correcto, y completar registros con todos los bits cambiados. Aun así, esto no recuperó los registros donde el sentido cambiaba a la mitad. Un colega de Larry fue capaz de darse cuenta donde los registros cambiaban, así que escribieron un editor llamado kybble (una broma sobre la comida de perro Kibbles 'n Bits) para ayudarle corregir a mano los registros y recuperar los datos. Fue para este propósito por el que pack tiene los especificadores de formato de cadena hex y bit.

git muestra que fueron añadidos a perl 3.0 en el parche #44 (enero 1991, envío 27e2fb84680b9cc1), pero la descripción del parche no hace ninguna mención de su adición, olvidando la historia que hubo detrás de ellos.

=end comment

Se aplica las siguientes reglas:

=over 

=item *

Cada letra puede, opcionalmente, estar seguida por un número que indica el número de repeticiones.  Un número de repeticiones podría estar opcionalmente encerrada entre paréntesis, como en C<pack("C[80]", @arr)>.  El número de repeticiones engulle a tantos valores de la LISTA cuando se usa con todos los tipos de formato que no sean C<a>, C<A>, C<Z>, C<b>, C<B>, C<h>, C<H>, C<@>, C<.>, C<x>, C<X> y C<P>, donde significa otra cosa, descrita abajo.  El suministro de un C<*> para el número de repeticiones en lugar de un número significa usar tantos elementos como queden, a excepción de:

=over 

=item * 

C<@>, C<x> y C<X>, donde es equivalente a C<0>.

=item * 

<.>, donde significa relativo al inicio de la cadena.

=item * 

C<u>, donde es equivalente a 1 (o 45, que aquí es equivalente).

=back 

Se puede reemplazar un número de repeticiones con una plantilla de letras encerrada entre corchetes para utilizar la longitud en bytes empaquetada de la plantilla entre corchetes para indicar ese número de repeticiones.

Por ejemplo, la plantilla C<x[L]> salta tantos bytes como en un largo empaquetado, y la plantilla C<"$t X[$t] $t"> desempaqueta dos veces lo que $t desempaquete (cuando se expanda la variable).  Si la plantilla que figura entre corchetes contiene los comandos de alineación (como C<x![d]>), su longitud se calculará como si el comienzo de la plantilla tuviera la máxima alineación posible.

Cuando se utiliza con C<Z>, un C<*> como el número de repeticiones, está garantizado que añadirá un byte nulo final, por lo que la cadena resultante es siempre un byte más largo que la longitud en bytes del propio elemento.

Cuando se utiliza con C<@>, el número de repeticiones representa un desplazamiento desde el inicio del grupo C<()> más interior.

Cuando se utiliza con C<.>, el número de repeticiones determina la posición de partida para calcular el valor de desplazamiento de la siguiente manera:

=over 

=item *

Si el número de repeticiones es C<0>, es relativa a la posición actual.

=item *

Si el número de repeticiones es C<*>, el desplazamiento es relativo al inicio de la cadena empaquetada.

=item *

Y si es un número entero I<n>, el desplazamiento es relativo al inicio del I<n>-ésimo grupo C<()> más interno, o al inicio de la cadena si I<n> es más grande que el número de grupos.

=back

El número de repeticiones para C<u> se interpreta como el número máximo de bytes para codificar por línea de salida, con 0, 1 y 2 sustituidos por 45.</u>  El número de repeticiones no debe ser mayor de 65.

=item *

Los tipos C<a>, C<A>, y C<Z> absorben un solo valor, pero se empaqueta como una cadena de longitud indicada, rellenada con nulos o espacios según sea necesario.  Al desempaquetar, C<A> elimina el espacio en blanco y nulos sobrantes del final, C<Z> elimina todo después del primer nulo, y C<a> devuelve los datos sin ningún tipo de recorte.

Si el valor a empaquetar es demasiado largo, el resultado se trunca.  Si es demasiado largo y se indica un contador explícito, C<Z> empaqueta solo C<$contador-1> bytes, seguido por un byte nulo.  Por lo tanto C<Z> siempre empaqueta un valor nulo adicional, excepto cuando el contador es 0.

=item *

Del mismo modo, los formatos C<b> y C<B> empaquetan una cadena con una dada longitud de bits.
Cada uno de estos formatos genera un bit del resultado.  Estos suelen ser seguidos por un número de repetición, como C<B8> o C<B64>.

Cada bit resultante se basa en el bit menos significativo del correspondiente carácter de la entrada, es decir, en C<ord($carácter)%2>.  En particular, los caracteres C<"0"> y C<"1"> generan los bits 0 y 1, al igual que los caracteres C<"\000"> y C<"\001">.

A partir del comienzo de la cadena de entrada, cada 8-tupla de caracteres se convierte en un carácter de la salida.  Con el formato C<b>, el primer carácter de la 8-tupla determina el bit menos significativo de un carácter; con el formato C<B>, se determina el bit más significativo de un carácter.

Si la longitud de la cadena de entrada no es divisible por 8, el resto se rellena como si la cadena de entrada estuviera completada con caracteres nulos hasta el final.  Del mismo modo durante el desempaquetado, los bits "extra" se ignoran.

Si la cadena de entrada es más larga de lo necesario, los caracteres sobrantes se ignoran.

Un C<*> como contador de repetición utiliza todos los caracteres del campo de entrada.  
Al desempaquetar, los bits se convierten a una cadena de C<0> y C<1>.

=item *

El formato C<h> y C<H> empaqueta una cadena con tantos nibles (grupos de 4 bits, representables como dígitos hexadecimales, C<"0" .. "9"> C<"a" .. "f">) contenga.

Para cada formato así, pack() genera 4 bits del resultado.
Con caracteres no-alfabéticos, el resultado se basa en los 4 bits menos significativos del carácter de entrada, es decir, en C<ord($carácter)%16>.  En particular, los caracteres C<"0"> y C<"1"> generan los nibles 0 y 1, así como los bytes C<"\000"> y C<"\001">.  Para los caracteres C<"a".."f"> y C<"A".."F">, el resultado es compatible con los dígitos hexadecimales acostumbrados, de modo que C<"a"> y C<"A"> generan ambos el nible C<0xA==10>.  Utilice sólo estos caracteres hexadecimales con este formato.

A partir del comienzo de la plantilla a pack(), cada par de caracteres se convierte en un carácter en la salida.  Con el formato C<h>, el primer carácter del par determina el nible menos significativo de la salida de caracteres; con el formato C<H>, determina el nible más significativo.

Si la longitud de la cadena de entrada no es par, se comporta como si estuviera rellenada con un carácter nulo al final.  Del mismo modo, los nibles "extra" son ignorados durante el desempaquetado.

Si la cadena de entrada es más larga de lo necesario, los caracteres sobrantes se ignoran.

Un C<*> como contador de repetición utiliza todos los caracteres del campo de entrada.  Para unpack(), los nibles se convierten en una cadena de dígitos hexadecimales.

=item *

El formato C<p> empaqueta un puntero a una cadena terminada en nulo.  Usted es responsable de asegurarse que la cadena no es un valor temporal, ya que podría quedar desasignado antes de poder usar el resultado empaquetado.  El formato C<P> empaqueta un puntero a una estructura del tamaño indicado por la longitud.  Un puntero nulo es creado si el valor correspondiente para C<p> o C<P> es C<undef>; de forma similar con unpack(), donde un puntero nulo se descomprime en C<undef>.

Si su sistema tiene un tamaño de puntero extraño -lo que significa que un puntero no es ni tan grande como un int, ni tan grande como un long- quizás no pueda ser posible empaquetar o desempaquetar punteros en orden big-endian o little-endian.  Intentarlo, lanza una excepción.

=item *

La plantilla C</> permite empaquetar y desempaquetar una secuencia de elementos en donde la estructura empaquetada contiene un contador de elementos empaquetados seguido por los propios elementos empaquetados.  Esto es útil cuando la estructura que está desempaquetando tiene codificados los tamaños o recuentos de repetición para algunos de sus campos dentro de la propia estructura como campos separados.

Para C<pack>, escriba I<longitud-item>C</>I<secuencia-item>, y la I<longitud-item> indica el valor de la longitud de lo que está empaquetado.  Formatos de mayor uso son los empaquetados de enteros como C<n> para las cadenas de Java, C<w> de ASN.1 o SNMP, y C<N> de XDR de Sun

Para C<pack>, I<secuencia-item> puede tener un contador de repeticiones, en cuyo caso el mínimo de él y del número de elementos disponibles se usa como el argumento para <longitud-item>.  Si no tiene contador de repeticiones o utiliza un '*', se utiliza el número de elementos disponibles.

Para C<unpack>, se usa una pila interna de argumentos enteros desempaquetados.  Escriba C</>I<secuencia-item> y el contador de repeticiones se obtiene extrayéndolo del último elemento de la pila.  La I<secuencia-item> no debe tener un contador de repeticiones.

Si I<secuencia-item> se refiere a un tipo de cadena de caracteres (C<"A">, C<"a">, o C<"Z">), la I<longitud-item> es la longitud de la cadena, no el número de cadenas.  Con un contador de repeticiones explícito para el empaquetado, la cadena de empaquetado se ajusta a esa longitud.  Por ejemplo:

 Este código:                           da este resultado:

 unpack("W/a", "\004Gurusamy")          ("Guru")
 unpack("a3/A A*", "007 Bond  J ")      (" Bond", "J")
 unpack("a3 x2 /A A*", "007: Bond, J.") ("Bond, J", ".")

 pack("n/a* w/a","hola,","mundo")      "\000\004hola,\005mundo"
 pack("a/W2", ord("a") .. ord("z"))    "2ab"

La I<longitud-item> no se devuelve de forma explícita desde C<unpack>.

Indicando un contador al formato I<longitud-item> solo es útil para C<A>, C<a>, o C<Z>.  Empaquetando con un I<longitud-item> de C<a> o C<Z> puede introducir caracteres C<"\000">, que Perl no considerará como legal en cadenas numéricas.

=item *

Los tipos enteros C<s>, C<S>, C<l>, y C<L> pueden ser seguidos por un modificar C<!> para especificar un corto (short) o largo (long) nativos.  Como se muestra en el ejemplo anterior, una simple C<l> significa exactamente 32 bits, aunque el C<long> nativo, tal como lo ve el compilador de C local, puede ser mayor.  Esto es sobre todo un problema en plataformas de 64-bits.  Se puede ver si usando C<!> provoca alguna diferencia, de esta manera:

    printf "formato s es %d, s! es %d\n", 
	length pack("s"), length pack("s!");

    printf "formato l es %d, l! es %d\n", 
	length pack("l"), length pack("l!");


C<i!> y C<I!> también están permitidos, pero solo a efectos de completar: son idénticos a C<i> y C<I>.

Los tamaños reales (en bytes) de short, int, long y long largos nativos en la plataforma donde Perl fue compilado también están disponibles desde la línea de comandos:

    $ perl -V:{short,int,long{,long}}size
    shortsize='2';
    intsize='4';
    longsize='4';
    longlongsize='8';

o programáticamente vía el módulo C<Config>:

       use Config;
       print $Config{shortsize},    "\n";
       print $Config{intsize},      "\n";
       print $Config{longsize},     "\n";
       print $Config{longlongsize}, "\n";

C<$Config{longlongsize}> es indefinido en sistemas sin soporte de long largo.

=item *

Los formatos enteros C<s>, C<S>, C<i>, C<I>, C<l>, C<L>, C<j>, y C<J> inherentemente no portátiles entre procesadores y sistemas operativos porque siguen el orden nativo de los bytes.  Por ejemplo, un entero de 4 bytes 0x12345678 (305419896 en decimal) se ordenaría nativamente (dispuesto en y manejado por los registros de la CPU) en bytes como

    0x12 0x34 0x56 0x78  # big-endian    (byte superior antes)
    0x78 0x56 0x34 0x12  # little-endian (byte inferior antes

Básicamente, Intel y VAX son little-endian, mientras que todos los demás, incluyendo Motorola m68k/88k, PPC, Sparc, HP PA, Power y Cray, son big-endian.  Alpha y MIPS pueden ser: Digital/Compaq utilizados (bueno usados) en modo I<little-endian>, pero SGI/Cray los usa en modo I<big-endian>.

Los nombres I<big-endian> y I<little-endian> son referencias cómicas a los hábitos alimenticios de comer huevos por el extremo pequeño de los Liliputienses y por el extremo grande de los Blefuscudianos de la clásica sátira de Jonathan Swift, I<Los Viajes de Gulliver> .
Esto entró en la jerga informática a través del documento "On Holy Wars and a Plea for Peace" (De las Guerras Santas y un llamamiento por la Paz), de Danny Cohen, USC/ISI IEN 137, 1 de abril de 1980.

Algunos sistemas pueden tener ordenaciones de byte aún más raras.

   0x56 0x78 0x12 0x34
   0x34 0x12 0x78 0x56

Se llaman mid-endian, middle-endian, mixed-endian, o solo algo raro.

Puede determinar la ordenación de bytes de su sistema con este conjuro:

   printf("%#02x ", $_) for unpack("W*", pack L=>0x12345678); 

El orden de los bytes en la plataforma donde Perl fue compilado está también disponible vía L<Config>:

    use Config;
    print "$Config{byteorder}\n";

o desde la línea de comandos:

    $ perl -V:byteorder

Las ordenaciones C<"1234"> y C<"12345678"> son little-endian; C<"4321"> y C<"87654321"> son big-endian.  Sistemas con binarios multiarquitectura serán C<"ffff">, indicando que la información estática no funciona, y que se deben hacer pruebas en tiempo de ejecución.

Para enteros empaquetados de forma portátil, o bien usar los formatos C<n>, C<N>, C<v>, y C<V> o bien los modificadores C<< > >> y C<< < >> descritos inmediatamente abajo.  Vea también L<perlport>.

=item *

También los números en punto flotante tienen distintas ordenaciones.  Normalmente (pero no siempre) coincide con la ordenación de los enteros.  Incluso aunque la mayor parte de las plataformas de nuestros días usan el formato binario IEEE 754, hay diferencias, especialmente si están implicados los dobles largos.  Puede consultar las variables de C<Config>, C<doublekind> y C<longdblkind> (también C<doublesize>, C<longdblsize>): la "clase" de valores son enumerados, a diferencia de C<byteorder>.

La mejor opción para una buena portabilidad es, probablemente, mantener los dobles de 64 bit IEEE 754, y seguir la ordenación de los bytes del sistema.  Otra posibilidad es el formato C<"%a">) de C<printf>.

=item *

A partir de Perl 5.10.0, los formatos enteros y de punto flotante, junto con los formatos C<p> y C<P> y los grupos C<()>, podrán ser seguidos por los modificadores de ordenación de bytes C<< > >> o C<< < >>, para forzar, respectivamente, el orden de bytes big-endian o little-endian.  Estos modificadores son especialmente útiles dado que C<n>, C<N>, C<v> y C<V> no cubren valores enteros con signo, enteros de 64 bits, o de punto flotante.

Éstas son algunas de las preocupaciones a tener en cuenta cuando se usa un modificador de ordenación:

=over

=item * 

Intercambiando enteros con signo entre distintas plataformas funciona sólo cuando todas las plataformas los almacenan en el mismo formato.  La mayoría de las plataformas almacenan enteros con signo en notación de complemento a dos, así que por lo general esto no es ningún problema.

=item * 

Los modificadores C<< > >> o C<< < >> solo pueden ser usados con formatos de punto flotante en máquinas con ordenación big-endian o little-endian.  De lo contrario, al tratar de usarlos lanzará una excepción.

=item * 

Forzar una ordenación de bytes en valores de punto flotante para el intercambio de datos sólo puede funcionar si todas las plataformas utilizan la misma representación binaria de punto flotante IEEE.  Incluso si todas las plataformas usan IEEE, todavía puede haber diferencias sutiles.  El ser capaz de usar C<< > >> o C<< < >> en valores de punto flotante puede ser útil, pero también peligroso si no sabe exactamente lo que está haciendo.
No es una forma general de almacenar de forma portátil los valores de punto flotante.

=item * 

Cuando se usa C<< > >> o C<< < >> en un grupo C<()>, afecta a todos los tipos dentro del grupo que acepten a los modificadores de ordenación de bytes, incluyendo a todos los subgrupos.  Se ignora silenciosamente todos los demás tipos.  No está autorizado a anular la ordenación de bytes dentro de un grupo que ya tenga un sufijo de modificador de ordenación de bytes.

=back

=item *

Los números reales (float y double) solo están en formato nativo de la máquina.
Debido a la multiplicidad de formatos de punto flotante y la falta de una norma de representación en la "red" para ellos, no hay ninguna facilidad para el intercambio de datos.  Esto significa que datos empaquetados de punto flotante escritos en una máquina quizás no puedan ser leídos en otra, aunque ambas utilizan aritmética IEEE de punto flotante (porque la ordenación de bytes de la representación en memoria no es parte de la especificación IEEE).  Vea también L<perlport>.

Si sabe I<exactamente> lo que está haciendo, puede usar los modificadores C<< > >> o C<< < >> para forzas una ordenación de bytes de los valores.

Debido a Perl utiliza dobles (o dobles largos, si está configurado) internamente para todos cálculos numéricos, convirtiendo de doble en flotante y de allí a doble de nuevo, pierde precisión, por lo que C<unpack("f", pack("f", $foo)>) no será, generalmente, igual a $foo.

=item *

pack y unpack pueden funcionar de dos modos: modo de caracteres (modo C<C0>) donde la cadena empaquetada se procesa por cada carácter, y el modo byte UTF-8 (modo C<U0>) donde la cadena empaquetada se procesa en su formato codificado en UTF-8, byte a byte.  El modo carácter es el predeterminado a menos que la cadena de formato empiece con C<U>.  Siempre puede cambiar de modo con un explícito C<C0> o C<U0> en mitad del formato.  Este modo permanece activo hasta el cambio del modo siguiente, o hasta el final del grupo C<()> en que se aplicó directamente.

Usar C<C0> para obtener los caracteres Unicode mientras se utiliza C<U0> para obtener bytes I<no> Unicode, no es necesariamente obvio.   Probablemente le valga con algunos de estos ejemplos:

    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
      perl -CS -ne 'printf "%v04X\n", $_ for unpack("C0A*", $_)'
    03B1.03C9
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
      perl -CS -ne 'printf "%v02X\n", $_ for unpack("U0A*", $_)'
    CE.B1.CF.89
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
      perl -C0 -ne 'printf "%v02X\n", $_ for unpack("C0A*", $_)'
    CE.B1.CF.89
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
      perl -C0 -ne 'printf "%v02X\n", $_ for unpack("C0A*", $_)'
    C3.8E.C2.B1.C3.8F.C2.89

Estos ejemplos también ilustran que no debería tratar de usar C<pack>/C<unpack> como un sustituto del módulo L<Encode>.

=item *

Debe hacer cualquier alineamiento o rellenado, insertando, por ejemplo, suficientes C<"x">, mientras desempaqueta.  No hay forma, para un pack() y unpack(), saber qué caracteres van o vienen, por lo que controlan su salida y entrada como secuencias planas de caracteres.

=item *

Un grupo C<()> es una sub-PLANTILLA encerrada entre paréntesis.  Un grupo puede tener un contador de repeticiones, ya sea de forma postfija, o para unpack(), también a través del carácter de plantilla C</>.  Dentro de cada repetición de un grupo, posicionarse con C<@> comienza de nuevo en 0.  Por lo tanto, el resultado de

    pack("@1A((@2A)@3A)", qw[X Y Z])

es la cadena C<"\0X\0\0YZ">.

=item *

C<x> y C<X> aceptan el modificar C<!> para actuar como comando de alineamiento: saltan hacia adelante o atrás a la posición más cercana alineada a un múltiplo de C<contador> caracteres.  Por ejemplo, para pack() o unpack() una estructura en C como

    struct {
	char   c;    /* uno con signo, carácter 8-bit */
	double d; 
	char   cc[2];
    }

puede tener que usar la plantilla C<c x![d] d c[2]>.  Esto supone que los dobles deben estar alineados con el tamaño de un doble.

Para los comandos de alineación, un C<contador> de 0 es equivalente a un C<contador> de 1; ambos son instrucciones no efectivas.

=item *

C<n>, C<N>, C<v> y C<V> aceptan el modificador C<!> para representar enteros de 16-/32-bit con signo en distinta ordenación de bytes.
Esto es portátil solo cuando todas las plataformas compartiendo datos empaquetados usa la misma representación binaria de enteros con signo; por ejemplo, cuando todas las plataformas utilizan la representación de complemento a dos.

=item *

Comentarios pueden ser integrados en una PLANTILLA usando C<#> hasta el final de la línea.
El espacio en blanco puede separar los códigos de empaquetado, pero los modificadores y los contadores de repetición deben seguir de inmediato.  Rompiendo plantillas complejas en líneas individuales, debidamente comentadas, puede servir para mejorar la legibilidad y facilitar el mantenimiento de los formatos pack/unpack, como C</x> lo es para las expresiones regulares complicadas.

=item *

Si PLANTILLA requiere más argumentos de los que se pasan a pack(), éste asume argumentos adicionales iguales a C<"">.  Si PLANTILLA requiere menos argumentos de los que se le dan, los argumentos adicionales son ignorados.

=item *

Intentar empaquetar los valores especiales de punto flotante C<Inf> y C<NaN> (infinito, también en negativo), y no-es-un-número) en valores enteros empaquetados (como C<"L">) es un error fatal.  La razón de esto es que, sencillamente, no existe ningún mapeo sensato para estos valores especiales, en enteros.

=back

Ejemplos:

    $foo = pack("WWWW",65,66,67,68);
    # foo es "ABCD"
    $foo = pack("W4",65,66,67,68);
    # lo mismo
    $foo = pack("W4",0x24b6,0x24b7,0x24b8,0x24b9);
    # lo mismo con letras Unicode acentuadas.
    $foo = pack("U4",0x24b6,0x24b7,0x24b8,0x24b9);
    # lo mismo con letras Unicode acentuadas.  No obtiene
    # los bytes UTF-8 porque la U al principio del formato causó
    # un cambio al modo U0, así que los bytes UTF-8 se han unido en
    # caracteres
    $foo = pack("C0U4",0x24b6,0x24b7,0x24b8,0x24b9);
    # foo es "\xe2\x92\xb6\xe2\x92\xb7\xe2\x92\xb8\xe2\x92\xb9"
    # Esta es la codificación UTF-8 de la cadena en el 
    # ejemplo anterior

    $foo = pack("ccxxcc",65,66,67,68);
    # foo es "AB\0\0CD"

    # NOTA: Los ejemplos anteriores de "W" y "c" son correctos
    # solo en sistemas ASCII y derivados, como ISO Latin 1
    # y UTF-8.  En sistemas EBCDIC, el primer ejemplo sería
    #      $foo = pack("WWWW",193,194,195,196);

    $foo = pack("s2",1,2);
    # "\001\000\002\000" en little-endian
    # "\000\001\000\002" en big-endian

    $foo = pack("a4","abcd","x","y","z");
    # "abcd"

    $foo = pack("aaaa","abcd","x","y","z");
    # "axyz"

    $foo = pack("a14","abcdefg");
    # "abcdefg\0\0\0\0\0\0\0"

    $foo = pack("i9pl", gmtime);
    # una auténtica struct tm (en mi sistema)

    $utmp_template = "Z8 Z8 Z16 L";
    $utmp = pack($utmp_template, @utmp1);
    # una struct utmp (del BSD)

    @utmp2 = unpack($utmp_template, $utmp);
    # "@utmp1" eq "@utmp2"

    sub bintodec {
        unpack("N", pack("B32", substr("0" x 32 . shift, -32)));
    }

    $foo = pack('sx2l', 12, 34);
    # un 12 short, dos bytes cero de relleno, un 34 long
    $bar = pack('s@4l', 12, 34);
    # un 12 short, relleno con ceros a la posición 4, un 34 long
    # $foo eq $bar
    $baz = pack('s.l', 12, 4, 34);
    # un 12 short, relleno con ceros a la posición 4, un 34 long

    $foo = pack('nN', 42, 4711);
    # empaqueta 16 y 32-bit enteros sin signo, en big-endian
    $foo = pack('S>L>', 42, 4711);
    # exactamente lo mismo
    $foo = pack('s<l<', -42, 4711);
    # empaqueta 16 y 32-bit enteros con signo, en little-endian
    $foo = pack('(sl)<', -42, 4711);
    # exactamente lo mismo

La misma plantilla se puede usar, generalmente, con unpack().

=item package ESPACIO_NOMBRES

=item package ESPACIO_NOMBRES VERSIÓN
X<package> X<module> X<namespace> X<version>
X<paquete> X<módulo> X<espacio de nombres> X<versión>

=item package ESPACIO_NOMBRES BLOQUE

=item package ESPACIO_NOMBRES VERSIÓN BLOQUE
X<package> X<module> X<namespace> X<version>
X<paquete> X<módulo> X<espacio de nombres> X<versión>

=for Pod::Functions declare a separate global namespace

Declara el BLOQUE o el resto de la unidad de compilación como pertenecientes al espacio de nombres especificado.  El alcance de la declaración del paquete es, tanto el BLOQUE indicado o, en ausencia de un BLOQUE, desde la misma declaración hasta el final del ámbito actual (el bloque, archivo o C<eval> que lo engloba).  Es decir, las formas sin un BLOQUE son operativas hasta el final del ámbito actual, al igual que los operadores C<my>, C<state> y C<our>.
Todos los identificadores dinámicos no cualificados en este ámbito pertenecerán al espacio de nombres indicado, salvo cuando sea reemplazado por otra declaración C<package> o cuando sean uno de los identificadores especiales que cualifican dentro de C<main::>, al igual que C<STDOUT>, C<ARGV>, C<ENV>, y las variables especiales de caracteres de puntuación.

Una instrucción package afecta sólo a las variables dinámicas, incluyendo las que haya usado con C<local>, pero I<no> a las variables de ámbito léxico, que se crean con C<my>, C<state> o C<our>.  Normalmente será la primera declaración en un archivo incluido por medio de un C<require> o C<use>.  Usted puede cambiar en un paquete en más de un lugar, ya que esto sólo determina qué tabla de símbolos por defecto será utilizada por el compilador para el resto de ese bloque.  Puede hacer referencia a los identificadores de otros paquetes distintos del actual anteponiendo el identificador con el nombre del paquete y un dos puntos doble, como en C<$AlgunPaquete::var> o C<EstePaquete::CONTROLADOR_ENTRADA>.  Si el nombre del paquete se omite, se asume que es C<main>.  Es decir, C<$::sail> es equivalente a C<$main::sail> (y también a C<$main'sail>, algo que se puede ver en código muy antiguo, escrito en su mayoría en Perl 4).

Si se indica VERSIÓN, C<package> inicializa la variable C<$VERSION> en el espacio de nombres indicado a un objeto L<version> con la VERSIÓN indicada.  VERSIÓN debe ser un número de versión al estilo "estricto", según lo define el módulo L<version>: un número decimal positivo (entero o decimal) sin exponentes o una v-cadena con una 'v' precedente con al menos tres componentes.  Debe ajustar el valor de C<$VERSION> solo una vez por paquete.

Ver L<perlmod/"Paquetes"> para más información sobre paquetes, módulos y clases.  Ver L<perlsub> para otras cuestiones sobre el ámbito o contexto.

=item __PACKAGE__
X<__PACKAGE__>

=for Pod::Functions +5.004 the current package

Un I<token> especial que devuelve el nombre del paquete en el que aparece.

=item pipe CONTROLADOR_LECTURA,CONTROLADOR_ESCRITURA
X<pipe> X<tubería>

=for Pod::Functions open a pair of connected filehandles

Abre un par de tuberías conectadas como lo hace correspondiente llamada al sistema.
Tenga en cuenta que si se establece un circuito de procesos entubados, puede producirse un bloqueo mortal a menos que sea muy cuidadoso.  Además, tenga en cuenta que las tuberías de Perl utilizan el búfer de E/S, así que puede que necesite establecer C<$|> para limpiar su CONTROLADOR_ESCRITURA después de cada comando, dependiendo de la aplicación.

Devuelve verdadero en caso de éxito.

Ver L<IPC::Open2>, L<IPC::Open3>, y L<perlipc/"Comunicación Bidireccional con otro proceso"> para ejemplos de estas cosas.

En los sistemas que soportan las banderas cerrado-en-ejecución en los archivos, esas banderas se encuentran en todos los nuevos descriptores de archivos abiertos cuyo C<fileno> sean más I<altos> que el valor actual de $^F (por defecto 2 para C<STDERR>).  Ver L<perlvar/$^F>.

=item pop ARRAY
X<pop> X<stack> X<pila>

=item pop EXPR

=item pop

=for Pod::Functions remove the last element from an array and return it

Extrae y devuelve el último valor del array, acortando el array en un elemento.

Devuelve el valor indefinido si el array está vacío, aunque esto también puede suceder en otras situaciones.  Si ARRAY se omite, se extrae desde el array C<@ARGV> en el programa principal, y del array C<@_> en subrutinas, igual que C<shift>.

A partir de Perl 5.14, C<pop> puede tomar una EXPR escalar, que debe contener la referencia a un hash o un array no bendecido.  El argumento se desreferencia automáticamente.  Este aspecto de C<pop> es considerado altamente experimental.
El comportamiento exacto puede cambiar en una futura versión de Perl.

Para no confundir a los posibles usuarios de su código, que ejecuten versiones anteriores de Perl, con errores de sintaxis misteriosos, ponga este tipo de cosas en la parte superior de su archivo para indicar que el código funciona I<sólo> en versiones Perl de cosechas recientes:

    use 5.014;	# así, push/pop/etc trabajan sobre escalares (experimental)

=item pos ESCALAR
X<pos> X<match, position> X<coincidencia, posición>

=item pos

=for Pod::Functions find or set the offset for the last/next m//g search

Devuelve el desplazamiento donde la última búsqueda C<m//g> terminó para la variable en cuestión (C<$_> se usa cuando no se especifica ninguna variable).  Tenga en cuenta que 0 es un desplazamiento válido de la coincidencia.  C<undef> indica que la posición de búsqueda se restablece (generalmente debido a un error de coincidencia, pero también puede ser porque aún no ha sido ejecutada la coincidencia sobre el escalar).

C<pos> accede directamente a la ubicación utilizada por el motor de expresiones regulares para almacenar el desplazamiento, por lo que asignar a C<pos> cambiará ese desplazamiento, por lo que también influirá en la aserción de ancho cero C<\G> en las expresiones regulares.  Estos dos efectos toman lugar en la siguiente coincidencia, por lo que no puede afectar a la posición con C<pos> durante la coincidencia actual, como en C<(?{pos() = 5})> o C<s//pos() = 5/e>.

Actualizando C<pos> también reinicializa la bandera I<coincide con longitud cero>, descrita en L<perlre/"Coincidiendo con patrones repetidos en una cadena de longitud cero">.

Debido a que una coincidencia C<m//gc> fallida no reinicia el desplazamiento, el retorno de C<pos> no cambiará en ningún caso.  Ver L<perlre> y L<perlop>.

=item print IDENTIFICADOR_ARCHIVO LISTA
X<print>

=item print IDENTIFICADOR_ARCHIVO

=item print LISTA

=item print

=for Pod::Functions output a list to a filehandle

Imprime una cadena o una lista de cadenas.  Devuelve verdadero si tuvo éxito.
IDENTIFICADOR_ARCHIVO puede ser una variable escalar conteniendo el nombre de o una referencia al identificador de archivo, introduciendo así un nivel más de indirección.  (NOTA: Si IDENTIFICADOR_ARCHIVO es una variable y el siguiente I<token> es un término, se puede malinterpretar como un operador a menos que interponga un C<+> o ponga los argumentos entre paréntesis).  Si se omite IDENTIFICADOR_ARCHIVO, se imprime al canal de salida seleccionado por última vez (vea L</select>).  Si la LISTA se omite, se imprime C<$_> al actual canal de salida seleccionado.  Para utilizar solamente IDENTIFICADOR_ARCHIVO para imprimir en él, el contenido de C<$_>, debe ser un identificador de archivo real, como C<FH>, no uno indirecto como C<$fh>.  Para configurar el controlador de salida predeterminado a otro valor distinto que STDOUT, use el operador C<select>.

El valor actual de C<$,> (si lo tiene) es impreso entre cada elemento de la LISTA.  El valor actual de C<$\> (si lo tiene) es impreso después de que toda la LISTA haya sido impresa.  Debido a que print toma una LISTA, cualquier cosa en la LISTA se evalúa en contexto de lista, incluyendo cualquier subrutina que devuelva listas.  Tenga cuidado de no seguir la palabra clave print con un paréntesis de apertura a menos que desee que el correspondiente paréntesis de cierre ponga fin a los argumentos de la impresión; ponga paréntesis alrededor de todos los argumentos (o interponga un C<+>, pero esto no parece tan bonito).

Si está almacenando identificadores en un array o hash, o en general, en cualquier expresión más compleja que un simple identificador o una sencilla variable escalar sin subíndice, para acceder a él, tendrá que utilizar un bloque que retorne el valor del identificador de archivo, en cuyo caso la LISTA no se puede omitir:

    print { $archivos[$i] } "cosas\n";
    print { $OK ? STDOUT : STDERR } "cosas\n";

Imprimir a una tubería o socket cerrados generará una señal SIGPIPE.  Ver L<perlipc> para más información sobre el manejo de señales.

=item printf IDENTIFICADOR_ARCHIVO FORMATO, LISTA
X<printf>

=item printf IDENTIFICADOR_ARCHIVO

=item printf FORMATO, LISTA

=item printf

=for Pod::Functions output a formatted list to a filehandle

Equivalente a C<print IDENTIFICADOR_ARCHIVO sprintf(FORMATO, LISTA)>, excepto que C<$\> (el separador de registro a la salida) no es añadida.  El FORMATO y la LISTA son, de hecho, interpretados como una sola lista.  El primer argumento de la lista será interpretado como el formato para C<printf>.  Esto significa que C<printf(@_)> utilizará C<$_[0]> como el formato.  Vea L<sprintf|/sprintf FORMATO, LISTA> para una explicación del argumento de formato.  Si C<use locale> para C<LC_NUMERIC> Busca por esto en este pod está activo y se ha llamado a POSIX::setlocale(), el carácter utilizado para el separador decimal en números formateados en punto flotante se ve afectado por la configuración regional de C<LC_NUMERIC>.  Vea L<perllocale> y L<POSIX>.

Por razones históricas, si omite la lista, se usará C<$_> como formato; para usar un IDENTIFICADOR_ARCHIVO sin una lista, debe usar un identificador de archivo real, como C<FH>, no uno indirecto como C<$fh>.  Aun así, esto raramente será lo que quiera hacer; si $_ contiene códigos de formateo, serán reemplazados con la cadena vacía y se emitirá un aviso, si los avisos están habilitados.  Use un solo C<print> si quiere imprimir los contenidos de $_.

No caiga en la trampa de utilizar un C<printf> cuando un simple C<print> valdría.  El C<print> es más eficiente y menos propenso a errores.

=item prototype FUNCIÓN
X<prototype> X<prototipo>

=item prototipo

=for Pod::Functions +5.002 get the prototype (if any) of a subroutine

Devuelve el prototipo de una función como una cadena (o C<undef> si la función no tiene ningún prototipo).  FUNCIÓN es una referencia a, o el nombre de, la función cuyo prototipo se desea recuperar.  Si se omite FUNCTION, se usa $_.

Si FUNCIÓN es una cadena que comienza con C<CORE::>, el resto es tomado como un nombre para una función predefinida de Perl.  Si los argumentos de la función predefinida no pueden ser adecuadamente expresados por un prototipo (como en C<system>), prototype() devuelve C<undef>, porque la orden interna en realidad no se comporta como una función de Perl.  De lo contrario, se devuelve la cadena que describe el prototipo equivalente.

=item push ARRAY,LISTA
X<push> X<stack> X<pila>

=item push EXPR,LISTA

=for Pod::Functions append one or more elements to an array

Considera a ARRAY como una pila añadiendo los valores de LISTA al final de ARRAY.  La longitud de ARRAY se incrementa por la misma cantidad que la longitud de LISTA.  Tiene el mismo efecto que

    for $valor (LISTA) {
        $ARRAY[++$#ARRAY] = $valor;
    }

pero es más eficiente.  Devuelve el número de elementos en el ARRAY tras la llamada a C<push>.

A partir de Perl 5.14, C<push> puede tomar una EXPR escalar, que debe contener la referencia a un hash o un array no bendecido.  El argumento se desreferencia automáticamente.  Este aspecto de C<push> está considerado altamente experimental.
El comportamiento exacto puede cambiar en una futura versión de Perl.

Para no confundir a los posibles usuarios de su código, que ejecuten versiones anteriores de Perl, con errores de sintaxis misteriosos, ponga este tipo de cosas en la parte superior de su archivo para indicar que el código funciona I<sólo> en versiones Perl de cosechas recientes:

    use 5.014;	# así, push/pop/etc trabajan sobre escalares (experimental)

=item q/STRING/

=for Pod::Functions singly quote a string

=item qq/STRING/

=for Pod::Functions doubly quote a string

=item qw/STRING/

=for Pod::Functions quote a list of words

=item qx/STRING/

=for Pod::Functions backquote quote a string

Comillas generales.  Ver L<perlop/"Operadores entrecomillados">.

=item qr/STRING/

=for Pod::Functions +5.005 compile pattern

Entrecomillado de expresión regular.  See L<perlop/"Operadores I<Regex>">.

=item quotemeta EXPR
X<quotemeta> X<metacharacter> X<metacarácter>

=item quotemeta

=for Pod::Functions quote regular expression magic characters

Devuelve el valor de EXPR con todos los caracteres ASCII que no formen parte de una "palabra" escapados con una barra diagonal inversa.  (Es decir, todos los caracteres ASCII que no se ajusten a C</[A-Za-z_0-9]/> serán precedidos por una barra diagonal inversa en la cadena devuelta, con independencia de cualquier configuración regional).
Esta es la función interna que implementa el escapado de C<\Q> en las cadenas con doble entrecomillado.
(Vea más abajo para el comportamiento en códigos de carácter que no son ASCII).

Si se omite EXPR, se usa C<$_>.

quotemeta (y C<\Q> ... C<\E>) son útiles cuando se interpolan cadenas en expresiones regulares, porque por defecto una variable interpolada será considerada una mini expresión regular.  Por ejemplo:

    my $instruccion = 'El rápido zorro marrón saltó sobre el perezoso perro';
    my $subcadena = 'rápido.*?zorro';
    $instruccion =~ s{$subcadena}{gran lobo malo};

Hará que C<$instruccion> se convierta en C<'El gran lobo malo saltó sobre ...'>.

De otra forma:

    my $instruccion = 'El rápido zorro marrón saltó sobre el perezoso perro';
    my $subcadena = 'rápido.*?zorro';
    $instruccion =~ s{\Q$subcadena\E}{gran lobo malo};

o:

    my $instruccion = 'El rápido zorro marrón saltó sobre el perezoso perro';
    my $subcadena = 'rápido.*?zorro';
    my $subcadena_escapada = quotemeta($subcadena);
    $instruccion =~ s{$subcadena_escapada}{gran lobo malo};

Ambas dejará la instrucción como estaba.
Normalmente, quotemeta() o C<\Q> deben ser usados al aceptar cadenas de entrada provenientes del usuario.

En Perl 5.14, todos los caracteres no ASCII se marcan con caracteres de escape en las cadenas no codificadas como UTF-8; en las cadenas UTF-8 no se marcan.

A partir de Perl v5.16, Perl adopta una estrategia definida en Unicode en el escapado de caracteres no ASCII; el escapado de caracteres ASCII no ha cambiado.

Se sigue aplicando el escapado de cadenas no UTF-8 cuando se esté encuentre fuera del ámbito de C<use feature 'unicode_strings'>, que consiste en escapar a todos los caracteres del rango superior de Latin1.  Esto proporciona una completa compatibilidad hacia atrás para los programas antiguos que no utilizan Unicode.  (Tenga en cuenta que C<unicode_strings> se activa automáticamente en el ámbito de S<C<use v5.12>> o mayor).

Dentro del ámbito de C<use locale>, todos los códigos de carácter que no sean ASCII Latin1 son escapados tanto si la cadena está codificada como UTF-8 como si no.  Como se mencionó anteriormente, la configuración regional no afecta al escapado de caracteres del rango ASCII.
Esto protege contra configuraciones regionales con caracteres como C<"|"> que son considerados como caracteres que forman parte de las palabras.

De lo contrario, Perl escapa caracteres no ASCII utilizando una adaptación de Unicode (vea L<http://www.unicode.org/reports/tr31/>).
Los únicos códigos de carácter que son escapados son los que tienen alguna de las propiedades Unicode: Pattern_Syntax, Pattern_White_Space, White_Space, Default_Ignorable_Code_Point o General_Category=Control.

	De estas propiedades, los dos más importantes son Pattern_Syntax y Pattern_White_Space.  Han sido creadas por Unicode para, exactamente, este propósito de decidir qué caracteres en un patrón de expresión regular debe ser escapado.  Ningún carácter que puede ir en un identificador tiene estas propiedades.

Perl promete, que si alguna vez añadimos metacaracteres de patrones de expresión regular a la docena que ya está definida (C<\ E<verbar> ( ) [ { ^ * $ + ?  .>), sólo usaremos aquellos que tengan la propiedad Pattern_Syntax.  Perl también promete, que si alguna vez añadimos caracteres que han de ser considerados como espacio en blanco en las expresiones regulares (actualmente, las más afectadas serán las que tengan el C</x>), todos ellos tendrán la propiedad Pattern_White_Space.

Unicode promete que el conjunto de códigos de carácter que tienen estas dos propiedades nunca cambiará, así que algo que no se escape en v5.16 nunca tendrá que ser escapado en cualquier futura versión de Perl.  (No todos los códigos de carácter que coinciden con Pattern_Syntax tienen realmente caracteres asignados a ellos; así que hay espacio para crecer, pero son desactivados tanto si están asignados como si no.  Perl, por supuesto, nunca usaría un punto de código asignado como un metacarácter real).

Escapar caracteres que tienen las otras 3 propiedades se hace para mejorar la legibilidad de la expresión regular y no porque realmente se necesita que estén escapados para los fines de las expresiones regulares (caracteres con la propiedad White_Space es probable que sean indistinguibles en la página o en la pantalla de los que tienen la propiedad Pattern_White_Space; y las otras dos propiedades contienen caracteres no imprimibles).

=item rand EXPR
X<rand> X<random> X<aleatorio>

=item rand

=for Pod::Functions retrieve the next pseudorandom number

Devuelve un número decimal aleatorio mayor o igual a C<0> y menor que el valor de EXPR.  (EXPR debe ser positiva).  Si la EXPR se omite, se usa C<1>.  Actualmente EXPR con el valor de C<0> es también un caso especial como el de C<1> (no estaba documentado esto antes de Perl 5.8.0
y está sujeto a cambios en futuras versiones de Perl).  Automáticamente llama a C<srand> a menos que C<srand> ya haya sido llamado.  Ver también C<srand>.

Aplique C<int()> al valor devuelto por C<rand()> si quiere obtener enteros aleatorios en lugar de fraccionarios.  Por ejemplo,

    int(rand(10))

devuelve un número entero aleatorio entre C<0> y C<9>, inclusive.

(Nota: si su función rand devuelve constantemente números demasiado grandes o demasiado pequeños, entonces su versión de Perl fue, probablemente, compilada con un número incorrecto de RANDBITS).

B<C<rand()> no es criptográficamente seguro.  No debe confiar en él en situaciones delicadas de seguridad.> Al escribir estas líneas, una serie de módulos de CPAN de terceros ofrecen generadores de números aleatorios destinados, por sus autores, a ser criptográficamente seguros, incluyendo L<Data::Entropy>, L<Crypt::Random>, L<Math::Random::Secure> y L<Math::TrulyRandom>.

=item read IDENTIFICADOR_ARCHIVO,ESCALAR,LONGITUD,DESPLAZAMIENTO
X<read> X<file, read> X<archivo, leer>

=item read IDENTIFICADOR_ARCHIVO,ESCALAR,LONGITUD

=for Pod::Functions fixed-length buffered input from a filehandle

Intento de leer LONGITUD I<caracteres> de datos en la variable ESCALAR del IDENTIFICADOR_ARCHIVO especificado.  Devuelve el número de caracteres realmente leídos, C<0> al final del archivo, o undef si hubo un error (en este último caso se actualiza el valor de C<$!>).  ESCALAR crecerá o se reducirá de manera que el último carácter realmente leído es el último carácter del escalar después de la lectura.

Un DESPLAZAMIENTO se puede especificar para colocar los datos leídos en algún otro lugar de la cadena, distinto del principio.  Un DESPLAZAMIENTO negativo especifica el desplazamiento en número de caracteres contando desde el final de la cadena.  Un DESPLAZAMIENTO positivo mayor que la longitud de ESCALAR resulta en un cadena rellenada al tamaño requerido con bytes C<"\0"> antes de que el resultado de la lectura sea añadido.

La llamada se implementa en términos de Perl o de la función nativa fread(3) de su sistema.  Para obtener una auténtica llamada del sistema read(2), vea L<sysread|/sysread IDENTIFICADOR_ARCHIVO,ESCALAR,LONGITUD,DESPLAZAMIENTO>.

Note los I<caracteres>: dependiendo del estado del identificador de archivo, son leídos bytes (8-bit) o caracteres.  Por defecto, todos los identificadores de archivo operan en bytes, pero por ejemplo, si el identificador ha sido abierto con la capa de E/S C<:utf8> (vea L</open>, y el pragma C<open>, L<open>), la E/S operará en caracteres codificados en UTF-8, no bytes.  Del mismo modo, para el pragma C<:encoding>: en este caso casi todos los caracteres se pueden leer.

=item readdir IDENTIFICADOR_DIR
X<readdir>

=for Pod::Functions get a directory from a directory handle

Devuelve la siguiente entrada de directorio de un directorio abierto con C<opendir>.
Si se usa en contexto de lista, devuelve el resto de las entradas en el directorio.  Si no hay más entradas, devuelve el valor indefinido en el contexto escalar y la lista vacía en el contexto de lista.

Si está planeando hacer test de archivos de los valores retornados por un C<readdir>, más le vale anteponer el directorio en cuestión.  De lo contrario, porque no hicimos un C<chdir> antes, se estará probando en un archivo incorrecto.

    opendir(my $dh, $algun_dir) || die "no puedo opendir $algun_dir: $!";
    @dots = grep { /^\./ && -f "$algun_dir/$_" } readdir($dh);
    closedir $dh;

A partir de Perl 5.12 puede usar un simple C<readdir> en un bucle C<while>, que actualizará C<$_> en cada iteración.

    opendir(my $dh, $algun_dir) || die;
    while(readdir $dh) {
        print "$algun_dir/$_\n";
    }
    closedir $dh;

Para no confundir a los posibles usuarios de su código, que ejecuten versiones anteriores de Perl, con errores misteriosos, ponga este tipo de cosas en la parte superior de su archivo para indicar que el código funciona I<sólo> en versiones Perl de cosechas recientes:

    use 5.012; # así, readdir asigna a $_ en un solitario test del while

=item readline EXPR

=item readline
X<readline> X<gets> X<fgets>

=for Pod::Functions fetch a record from a file

Lee del identificador de archivo cuyo I<typeglob> esté contenido en EXPR (o desde C<*ARGV> si se omite EXPR).  En contexto escalar, cada llamada lee y devuelve la siguiente línea hasta que se alcance el final del archivo, en cuyo caso la ulterior llamada devuelve C<undef>.  En contexto de lista, lee hasta el final de archivo y devuelve una lista de líneas.  Note que la noción de "línea" usada aquí es según tenga definido C<$/> o C<$INPUT_RECORD_SEPARATOR>.  Ver L<perlvar/"$/">.

Cuando C<$/> tenga un valor de C<undef>, cuando C<readline> esté en contexto escalar (es decir, modo de absorción completa de archivo), y cuando se esté leyendo un archivo vacío, devuelve C<''> la primera vez, seguido a continuación de C<undef>.

Esto es la función interna que implementa el operador C<< <EXPR> >>, pero puede usarla directamente.  El operador C<< <EXPR> >> se discute con más detalle en L<perlop/"Operadores E/S">.

    $linea = <STDIN>;
    $linea = readline(*STDIN);    # lo mismo

Si C<readline> encuentra un error del sistema operativo, C<$!> será puesto al correspondiente mensaje de error.  Puede ser útil comprobar C<$!> cuando está leyendo de identificadores de archivo en los que no confía, como tty o un socket.  En el ejemplo siguiente se utiliza la forma del operador de C<readline> y muere si el resultado no está definido.

    while ( ! eof($fh) ) {
        defined( $_ = <$fh> ) or die "readline falló: $!";
        ...
    }

Note que no puede manejar errores de C<readline> de esta manera con el identificador de archivo C<ARGV>.  En este caso, tiene que abrir cada elemento de C<@ARGV> debido a que C<eof> maneja C<ARGV> de otra manera.

    foreach my $arg (@ARGV) {
        open(my $fh, $arg) or warn "No puedo abrir $arg: $!";

        while ( ! eof($fh) ) {
            defined( $_ = <$fh> )
                or die "readline falló para $arg: $!";
            ...
        }
    }

=item readlink EXPR
X<readlink>

=item readlink

=for Pod::Functions determine where a symbolic link is pointing

Devuelve el valor de un enlace simbólico, si los enlaces simbólicos están implementados.  Si no, lanza una excepción.  Si hay un error del sistema, devuelve el valor indefinido y actualiza C<$!> (errno).  Si se omite EXPR, se usa C<$_>.

Cuestiones de portabilidad: L<perlport/readlink>.

=item readpipe EXPR

=item readpipe
X<readpipe>

=for Pod::Functions execute a system command and collect standard output

EXPR es ejecutada como un comando del sistema.
Todo lo que salga por la salida estándar del comando se devuelve.
En contexto escalar, se devuelve como una sola cadena (potencialmente multi-línea).  En contexto lista, devuelve una lista de líneas (según haya definido lo que son líneas con C<$/> o C<$INPUT_RECORD_SEPARATOR>).
Esto es la función interna que implementa el operador C<qx/EXPR/>, pero puede usarla directamente.  El operador C<qx/EXPR/> se discute con más detalle en L<perlop/"Operadores E/S">.
Si se omite EXPR, se usa C<$_>.

=item recv SOCKET,ESCALAR,LONGITUD,BANDERAS
X<recv>

=for Pod::Functions receive a message over a Socket

Recibe un mensaje de un socket.  Intenta leer LONGITUD I<caracteres> de datos en la variable ESCALAR del identificador de archivo SOCKET especificado.
ESCALAR crecerá o se reducirá a la longitud de la lectura real.  Toma las mismas banderas que la llamada al sistema del mismo nombre.  Devuelve la dirección del remitente si el protocolo del SOCKET lo soporta; de otra manera, devuelve una cadena vacía.  Si hay un error, devuelve el valor indefinido.
Esta llamada está implementada realmente en términos de la llamada del sistema recvfrom(2).
Ver L<perlipc/"UDP: Paso de mensajes"> para ejemplos.

Note los I<caracteres>: dependiendo del estado del socket, son leídos bytes (8-bit) o caracteres.  Por defecto todos los I<sockets> operan en bytes, pero por ejemplo si el I<socket> ha sido cambiado usando binmode() para operar con la capa de E/S C<:encoding(utf8)> (ver el pragma C<open>, L<open>), la E/S operará en caracteres codificados en UTF-8, no bytes.  Del mismo modo, para el pragma C<:encoding>: en este caso casi todos los caracteres se pueden leer.

=item redo ETIQUETA
X<redo>

=item redo EXPR

=item redo

=for Pod::Functions start this loop iteration over again

El comando C<redo> reinicia la iteración sin evaluar de nuevo la condición.  El bloque C<continue>, si está, no es ejecutado:  Si la ETIQUETA se omite, el comando se refiere al bucle más interior en que se encuentre.  La forma C<redo EXPR>, disponible a partir de Perl 5.18.0, permite que se compute un nombre de etiqueta en tiempo de ejecución; de lo contrario es idéntico a C<redo ETIQUETA>.  Los programas que quieren engañarse a sí mismos acerca de lo que se acaba de introducir suelen utilizar este comando:

    # elimina ingenuamente comentarios Pascal
    # (aviso: asumes que no hay { o } en cadenas)
    LINEA: while (<STDIN>) {
        while (s|({.*}.*){.*}|$1 |) {}
        s|{.*}| |;
        if (s|{.*| |) {
            $frente = $_;
            while (<STDIN>) {
                if (/}/) {  # ¿fin de comentario?
                    s|^|$frente\{|;
                    redo LINEA;
                }
            }
        }
        print;
    }

C<redo> no puede usarse para reiniciar un bloque que devuelve un valor, como C<eval {}>, C<sub {}> o C<do {}>, y no debe ser usado para salir de una operación grep() o map().

Note que un bloque por sí mismo es semánticamente idéntico a un bucle que se ejecuta una vez.  Por lo tanto C<redo> dentro de un bloque lo convertirá de forma efectiva en una construcción de bucle.

Ver también L</continue> para una ilustración de cómo funcionan C<last>, C<next> y C<redo>.

A diferencia de otros operadores con nombre, tiene la misma precedencia que una asignación.
También está exenta de la regla se-parece-a-una-función, así que C<redo ("foo")."bar"> hará que "bar" sea parte del argumento a C<redo>.

=item ref EXPR
X<ref> X<reference> X<referencia>

=item ref

=for Pod::Functions find out the type of thing being referenced

Devuelve una cadena no vacía si EXPR es una referencia; de otra manera, devuelve una cadena vacía.  Si EXPR no se especifica, se comprobará C<$_>.  El valor devuelto depende del tipo de cosa que la referencia indique como referencia.

Tipos predefinidos incluyen:

    SCALAR
    ARRAY
    HASH
    CODE
    REF
    GLOB
    LVALUE
    FORMAT
    IO
    VSTRING
    Regexp

Puede pensar en C<ref> como un operador C<typeof>.

    if (ref($r) eq "HASH") {
        print "r es una referencia a un hash.\n";
    }
    unless (ref($r)) {
        print "r no es una referencia.\n";
    }

El valor de retorno C<LVALUE> indica una referencia a un valor-izquierda que no es una variable.  Obtiene esto de la referencia a las llamadas a funciones como C<pos()> o C<substr()>.  C<VSTRING> se devuelve si la referencia apunta a una L<version string|perldata/"Cadenas de versión">.

El resultado C<Regexp> indica que el argumento es una expresión regular como resultado de C<qr//>.

Si el objeto referenciado ha sido bendecido en un paquete, entonces se devuelve el nombre de ese paquete.  Pero no use esto, ya que se considera que es una "mala práctica".  Primero, porque un objeto podría usar una clase llamada C<Regexp> o C<IO>, o incluso C<HASH>.  También, porque C<ref> no tiene en cuenta a las subclases, como hace C<isa>.

En lugar de eso, use C<blessed> (en el módulo L<Scalar::Util>) para comprobaciones booleanas, C<isa> para comprobaciones de una clase específica y C<reftype> (también en L<Scalar::Util>) para comprobaciones de tipo.  (Vea L<perlobj> para más detalles y un ejemplo de C<blessed/isa>).

Ver también L<perlref>.

=item rename NOMBRE_VIEJO,NOMBRE_NUEVO
X<rename> X<move> X<mv> X<ren> X<mover> X<renombra>

=for Pod::Functions change a filename

Cambia el nombre de un archivo; un archivo existente que se llame NOMBRE_NUEVO será sobreescrito.  Devuelve verdadero en caso de éxito, o falso en caso contrario.

El comportamiento de esta función varía enormemente dependiendo de la implementación de su sistema.  Por ejemplo, normalmente no funcionará a través de los límites del sistema de archivos, a pesar de que el comando del sistema I<mv> a veces lo compense.  Otras restricciones incluyen si funciona en directorios, archivos abiertos, o archivos pre-existentes.  Compruebe L<perlport> y, o bien la página de manual de rename(2) o documentación equivalente del sistema para más detalles.

Para una función independiente de la plataforma vea C<move> en el módulo L<File::Copy>.

Cuestiones de portabilidad: L<perlport/rename>.

=item require VERSIÓN
X<require>

=item require EXPR

=item require

=for Pod::Functions load in external functions from a library at runtime

Exige una versión de Perl especificada por VERSIÓN, o exige una semántica especificada por EXPR, o por C<$_> si EXPR se omite.

VERSIÓN puede ser un argumento numérico, como 5.006, que será comparado con C<$]>, o un literal de la forma v5.6.1, que será comparado con C<$^V> (alias de $PERL_VERSION).  Se genera una excepción si VERSIÓN es mayor que la versión actual del intérprete de Perl.
Compare con L</use>, que puede hacer un control similar en tiempo de compilación.

Especificando VERSIÓN como un literal de la forma v5.6.1, debe, generalmente, evitarse, porque lleva crear mensajes de error equívocos en las versiones anteriores de Perl que no admiten esta sintaxis.  Se debe usar en su lugar la versión equivalente numérica.

    require v5.6.1;     # comprobación de versión en tiempo de ejecución
    require 5.6.1;      # ídem
    require 5.006_001;  # idem; preferido para mantener
                          la compatibilidad

De lo contrario, C<require> demanda que un archivo de biblioteca sea incluido si no se hubiera incluido ya.  El archivo es incluido a través del mecanismo do ARCHIVO, que es esencialmente lo mismo que una variedad de C<eval> con la advertencia de que las variables léxicas en la secuencia de comandos del programa serán invisibles para el código incluido.  Si estuviera implementado en puro Perl, podría tener una semántica similar a lo siguiente:

    use Carp 'croak';
    use version;

    sub require {
        my ($nombrearchivo) = @_;
        if ( my $version = eval { version->parse($nombrearchivo) } ) {
            if ( $version > $^V ) {
               my $vn = $version->normal;
               croak "Se requiere Perl $vn; éste es sólo $^V. Programa parado";
            }
            return 1;
        }

        if (exists $INC{$nombrearchivo}) {
            return 1 if $INC{$nombrearchivo};
            croak "Falló la compilación en el require";
        }

        foreach $prefijo (@INC) {
            if (ref($prefijo)) {
                #... hacer otras cosas - vea texto más abajo ....
            }
            # (vea texto más abajo sobre la posible añadidura del sufijo .pmc
            # al $nombrearchivo)
            my $nombrearchivoreal = "$prefijo/$nombrearchivo";
            next if ! -e $nombrearchivoreal || -d _ || -b _;
            $INC{$nombrearchivo} = $nombrearchivoreal;
            my $resultado = do($nombrearchivoreal);
                         # pero se ejecuta en el espacio de nombres del llamante

            if (!defined $resultado) {
                $INC{$nombrearchivo} = undef;
                croak $@ ? "$@Compilación falló en require"
                         : "No puedo localizar $nombrearchivo: $!\n";
            }
            if (!$resultado) {
                delete $INC{$nombrearchivo};
                croak "$nombrearchivo no devuelve un valor verdadero";
            }
            $! = 0;
            return $resultado;
        }
        croak "No puedo localizar $nombrearchivo en \@INC ...";
    }

Tenga en cuenta que el archivo no será incluido dos veces con el mismo nombre especificado.

El archivo debe devolver verdadero como última instrucción para indicar una ejecución exitosa de cualquier código de inicialización, por lo que es habitual a tal efecto que un archivo termine con un C<1;> a menos que esté seguro de que devolverá cierto, de otra manera.  Pero es mejor sólo para poner C<1;>, en caso de que añada más instrucciones.

Si EXPR es una simple palabra, el require asume una extensión "F<.pm>" y le reemplaza "F<::>" con "F</>" en el nombre del archivo, para que sea fácil cargar módulos estándar.  Esta forma de cargar módulos no tiene el riesgo de alterar el espacio de nombres propio.

En otras palabras, si intenta esto:

        require Foo::Bar;     # algo atractivo

La función require realmente buscará el archivo "F<Foo/Bar.pm>" en los directorios especificados en el array C<@INC>.

Pero si intenta esto:

        $clase = 'Foo::Bar';
        require $clase;       # $clase no es una palabra suelta
    # o
        require "Foo::Bar";   # no una palabra suelta por las ""

La función require buscará por el archivo "F<Foo::Bar>" en los directorios especificados por el array C<@INC> y se quejará de que no lo encuentra.  En este caso puede hacer:

        eval "require $clase";

Ahora que sabe cómo C<require> busca archivos con un argumento simple, hay una funcionalidad extra que pasa por detrás de las cámaras.  Antes de C<require> busque una extensión "F<.pm>", en primer lugar, buscará un nombre de archivo similar con una extensión "F<.pmc>".  Si este archivo es encontrado, se cargará en lugar de cualquier archivo que termine en una extensión "F<.pm>".

También puede insertar enganches en la facilidad C<import> poniendo código Perl directamente en el array @INC.  Hay tres formas de enganches: referencias a subrutinas, referencias a arrays y objetos bendecidos.

Referencias a subrutinas son el caso más simple.  Cuando el sistema de inclusión recorre C<@INC> y se encuentra con una subrutina, esta subrutina es llamada con dos parámetros; el primero, una referencia a sí mismo; y el segundo, el nombre del archivo que se incluirá (por ejemplo, "F<Foo/Bar.pm>").  La subrutina debe devolver, o nada, o bien una lista de hasta cuatro valores en el orden siguiente:

=over

=item 1

Una referencia a un escalar, conteniendo cualquier código de fuente inicial para ser agregado antes del
archivo o salida del generador.

=item 2

Un identificador de archivo, desde el cual, el archivo será leído.  

=item 3

Una referencia a una subrutina.  Si no hay un identificador de archivo (punto anterior), entonces de esta subrutina se espera que genere una línea de código fuente por llamada, escribiendo la línea en C<$_> y devolviendo 1, para luego, finalmente, devolver un 0 al final del archivo.  Si hay un identificador de archivo, a continuación, la subrutina será llamada a actuar como un simple filtro de código fuente, con la línea leída en C<$_>.
De nuevo, devuelve 1 para cada línea válida y 0 después de que todas las líneas han sido devueltas.

=item 4

Estado opcional para la subrutina.  El estado es pasado en C<$_[1]>.  Una referencia a la propia subrutina es pasada en C<$_[0]>.

=back

Si se devuelve una lista vacía, C<undef>, o nada que coincida con los tres primeros valores anteriores, entonces C<require> mira en los elementos restantes de @INC.
Tenga en cuenta que este identificador de archivo debe ser un identificador de archivo real (en sentido estricto un C<typeglob> o una referencia a un C<typeglob>, bendecido o no); identificadores de archivo atados serán ignorados y el procesado terminará ahí.

Si el enganche es una referencia de array, su primer elemento debe ser una referencia a una subrutina.  Esta subrutina se llama como antes, pero el primer parámetro es la referencia al array.  Esto le permite pasar argumentos indirectamente a la subrutina.

En otras palabras, puede escribir:

    push @INC, \&mi_sub;
    sub mi_sub {
        my ($coderef, $archivo) = @_;  # $coderef is \&mi_sub
        ...
    }

o:

    push @INC, [ \&mi_sub, $x, $y, ... ];
    sub mi_sub {
        my ($arrayref, $archivo) = @_;
        # Recupera $x, $y, ...
        my @parametros = @$arrayref[1..$#$arrayref];
        ...
    }

Si el enganche es un objeto, debe proporcionar un método INC que será llamado como antes, el primer parámetro siendo el objeto mismo.  (Tenga en cuenta que debe cualificar completamente el nombre de la subrutina, así como un no cualificado C<INC> está siempre forzado en el paquete C<main>).  Este es un diseño de código típico:

    # En Foo.pm
    package Foo;
    sub new { ... }
    sub Foo::INC {
        my ($self, $archivo) = @_;
        ...
    }

    # En el programa principal
    push @INC, Foo->new(...);

Estos enganches también están autorizados para establecer la entradas %INC correspondientes a los archivos que se hayan cargado.  Ver L<perlvar/%INC>.

Para una más-que-poderosa facilidad de importación, ver L</use> y L<perlmod>.

=item reset EXPR
X<reset>

=item reset

=for Pod::Functions clear all variables of a given name

Generalmente se usa en un bloque C<continue>, al final de un bucle para limpiar variables y reinicializar las búsquedas C<??>, para que funcionen de nuevo.  La expresión se interpreta como una lista de caracteres simples (guiones permitidos para indicar rangos).  Todas las variables y arrays que comiencen con una de esas letras son restablecidas a su estado prístino.  Si la expresión se omite, las búsquedas de una sola coincidencia (C<?pattern?>) son reinicializadas para que vuelvan a hacer el trabajo de coincidencia.  
Sólo se restablecen variables o búsquedas en el paquete actual.  Siempre devuelve 1.  Ejemplos:

    reset 'X';      # reinicia todas las variables X
    reset 'a-z';    # reinicia las variables con minúsculas
    reset;          # sólo reinicia las ?una-vez? búsquedas

El restablecimiento de C<"A-Z"> no es recomendable porque limpiará sus arrays C<@ARGV> y C<@INC> y su hash C<%ENV>.  Restablece sólo las variables del paquete; las variables léxicas no se ven afectadas, pero ellas mismas se limpiarán, de todos modos, a la salida de su ámbito, por lo que probablemente querrá usarlas en su lugar.
Ver L</my>.

=item return EXPR
X<return>

=item return

=for Pod::Functions get out of a function early

Regresa de una subrutina, C<eval> o C<do ARCHIVO>, con el valor indicado en EXPR.  La evaluación de EXPR puede estar en contexto lista, escalar, o vacío, dependiendo de cómo el valor de retorno será utilizado, y el contexto puede variar de una ejecución a la siguiente (vea L<wantarray>).  Si no se indica EXPR, devuelve una lista vacía en contexto de lista, el valor indefinido en el contexto escalar, y (por supuesto) nada en absoluto en el contexto vacío.

(En ausencia de un C<return> explícito, una subrutina, eval, o do ARCHIVO, automáticamente devuelve el valor de la última expresión evaluada).

A diferencia de la mayor parte de operadores con nombre, esto también está exento de la regla se-parece-a-una-función, así que C<return ("foo")."bar"> hará que "bar" sea parte del argumento a C<return>.

=item reverse LISTA
X<reverse> X<rev> X<invert> X<invertir>

=for Pod::Functions flip a string or a list

En contexto de lista, devuelve una lista de valores consistente en los elementos de LISTA en el orden opuesto.  En contexto escalar, concatena los elementos LISTA y devuelve un valor de cadena con todos los caracteres en orden inverso.

    print join(", ", reverse "mundo", "Hola"); # Hola, mundo

    print scalar reverse "odnum ,", "aloH";    # Hola, mundo

Si se utiliza sin argumentos en contexto escalar, reverse() invierte C<$_>.

    $_ = "odnum ,aloH";
    print reverse;                         # No hay salida, contexto lista
    print scalar reverse;                  # Hola, mundo

Tenga en cuenta que invertir un array en sí mismo (como en C<@a = reverse @a>) preservará los elementos inexistentes mientras le sea posible, es decir, para arrays no mágicos o arrays enlazados con métodos C<EXISTS> y C<DELETE>.

Este operador también es útil para invertir un hash, aunque existen algunas salvedades.  Si un valor está duplicado en el hash original, sólo uno de ellos se puede representar como clave en el hash invertido.  Además, esto tiene el efecto de desmontar un hash y construir uno nuevo, algo que puede tardar algún tiempo en un hash grande, como en un archivo DBM.

    %por_nombre = reverse %por_direccion;  # Invierte el hash

=item rewinddir IDENTIFICADOR_DIR
X<rewinddir>

=for Pod::Functions reset directory handle

Establece la posición actual al comienzo del directorio para la rutina C<readdir> en IDENTIFICADOR_DIR.

Problemas de adaptación: L<perlport/rewinddir>.

=item rindex CADENA,SUBCADENA,POSICIÓN
X<rindex>

=item rindex CADENA,SUBCADENA

=for Pod::Functions right-to-left substring search

Funciona igual que index() excepto que devuelve la posición de la I<última> ocurrencia de SUBCADENA en CADENA.  Sí POSICIÓN es especificada, devuelve la última ocurrencia comenzando en o antes de esta posición.

=item rmdir NOMBRE_DIRECTORIO
X<rmdir> X<rd> X<directory, remove> X<directorio, eliminar>

=item rmdir

=for Pod::Functions remove a directory

Elimina el directorio especificado por NOMBRE_DIRECTORIO si ese directorio está vacío.  Si tiene éxito devuelve verdadero; en caso contrario devuelve falso y asigna C<$!> (errno).  Si se omite NOMBRE_DIRECTORIO, utiliza C<$_>.

Para eliminar un árbol de directorio recursivamente (C<rm -rf> en Unix) mire la función C<rmtree> del módulo L<File::Path>.

=item s///

=for Pod::Functions replace a pattern with a string

El operador de sustitución.  See L<perlop/"Operadores I<Regex>">.

=item say IDENTIFICADOR_ARCHIVO LISTA
X<say>

=item say IDENTIFICADOR_ARCHIVO

=item say LISTA

=item say

=for Pod::Functions +say output a list to a filehandle, appending a newline

Igual que C<print>, pero implícitamente añade un carácter de nueva línea.  C<say LISTA> es simplemente una abreviatura de C<{ local $\ = "\n"; print LISTA }>.  Para utilizar IDENTIFICADOR_ARCHIVO sin LISTA para imprimir el contenido de C<$_>, debe usar un identificador de archivo real, como C<FH>, no uno indirecto como C<$fh>.

Esta palabra clave sólo está disponible cuando la característica C<"say"> está habilitada, o cuando está prefijada con C<CORE::>. Vea L<feature>.  O de otra forma, incluya un C<use v5.10> o posterior, al ámbito actual.

=item scalar EXPR
X<scalar> X<context> X<escalar> X<contexto>

=for Pod::Functions force a scalar context

Fuerza EXPR a ser interpretada en contexto escalar y devuelve el valor de EXPR.

    @contadores = ( scalar @a, scalar @b, scalar @c );

No hay un operador equivalente que fuerce a una expresión a ser interpolada en contexto de lista, ya que en la práctica, esto nunca es necesario.  Sin embargo, si realmente quiere hacer eso, puede usar la construcción  C<@{[ (una expresión) ]}>, pero por lo general un simple C<(una expresión)> basta.

Dado que C<scalar> es un operador unario, si, accidentalmente, usa para EXPR una lista entre paréntesis, esto se comportará como una expresión escalar con comas, evaluando todos, menos el último elemento, en contexto vacío, y devolviendo el elemento final evaluado en contexto escalar.  Es muy raro que quiera hacerlo.

La simple declaración siguiente:

    print uc(scalar(&foo,$bar)),$baz;

es el equivalente moral de estos dos:

    &foo;
    print(uc($bar),$baz);

Ver L<perlop> para más detalles en operadores unarios y el operador coma.

=item seek IDENTIFICADOR_ARCHIVO,POSICIÓN,DESDE
X<seek> X<fseek> X<filehandle, position> X<identificador de archivo, posición>

=for Pod::Functions reposition file pointer for random-access I/O

Establece la posición de IDENTIFICADOR_ARCHIVO, igual que la llamada C<fseek> de C<stdio>.
IDENTIFICADOR_ARCHIVO puede ser una expresión cuyo valor da el nombre del identificador de archivo.  Los valores de DÓNDE son C<0> para poner la nueva posición I<en bytes> a POSICIÓN; C<1> para poner la posición actual más POSICIÓN; y C<2> para ponerlo a EOF más POSICIÓN, normalmente negativo.  Para DÓNDE puede usar las constantes C<SEEK_SET>, C<SEEK_CUR> y C<SEEK_END> (inicio del archivo, posición actual y fin de archivo) desde el módulo L<Fcntl>.  Devuelve C<1> en caso de éxito; falso en caso contrario.

Nota sobre lo de I<en bytes>: incluso si el identificador de archivo se ha puesto para operar en caracteres (por ejemplo usando la capa de open C<:encoding(utf8)>), tell() devolverá desplazamientos en bytes, no en caracteres (porque implementando esto convertirían en lentas a seek() y tell()).

Si desea posicionar el archivo para las funciones C<sysread> o C<syswrite>, no utilice C<seek>, porque hace impredecible y no portátil la posición de lectura/escritura del archivo a causa del efecto del búfer del archivo.  Use en su lugar C<sysseek>.

Debido a las normas y rigores de la norma ANSI C, en algunos sistemas tendrá que hacer una búsqueda cada vez que alterne entre la lectura y la escritura.  Entre otras cosas, esto puede tener el efecto de llamar a los clearerr(3) de stdio.
Un DONDE de C<1> (C<SEEK_CUR>) es útil para no mover la posición del archivo:

    seek(TEST,0,1);

Esto también es útil para aplicaciones que emulen C<tail -f>.  Una vez que llegue al EOF en lectura y si se echa a dormir por un tiempo, (probablemente) tendrá que tocarlo con un ficticio seek() para restablecer las cosas.  El C<seek> no cambia la posición, pero I<borra> la condición de final de archivo en el identificador de archivo, para que el próximo C<< <FILE> >> haga que Perl intente de nuevo leer algo.  (Esperamos).

Si eso no funciona (algunas implementaciones de E/S son particularmente irritables), puede que tenga que hacer algo como esto:

    for (;;) {
        for ($curpos = tell(FILE); $_ = <FILE>;
             $curpos = tell(FILE)) {
            # buscar por algo y ponerlo en el archivo
        }
        sleep($por_un_rato);
        seek(FILE, $curpos, 0);
    }

=item seekdir IDENTIFICADOR_DIR,POS
X<seekdir>

=for Pod::Functions reposition directory pointer

Establece la posición actual de la rutina C<readdir> en IDENTIFICADOR_DIR.  POS debe ser un valor devuelto por C<telldir>.  C<seekdir> también tiene las mismas advertencias sobre la posible compactación del directorio como la correspondiente rutina del sistema.

=item select IDENTIFICADOR_ARCHIVO
X<select> X<filehandle, default> X<identificador de archivo, por defecto>

=item select

=for Pod::Functions reset default output or do I/O multiplexing

Devuelve el identificador de archivo seleccionado.  Si se indica un IDENTIFICADOR_ARCHIVO, se establece un nuevo identificador de archivo predeterminado para la salida.  Esto tiene dos efectos: primero, un C<write> o un C<print> sin un identificador de archivo será por defecto este IDENTIFICADOR_ARCHIVO.  En segundo lugar, las referencias a variables relacionadas con la salida se referirán a este canal de salida.  

Por ejemplo, si tiene que fijar la parte superior del formato de un formulario para más de un canal de salida, puede hacer lo siguiente:

    select(INFORME1);
    $^ = 'informe1_top';
    select(INFORME2);
    $^ = 'informe2_top';

IDENTIFICADOR_ARCHIVO puede ser una expresión cuyo valor da el nombre del identificador de archivo real.  Por lo tanto:

    $oldfh = select(STDERR); $| = 1; select($oldfh);

Algunos programadores prefieren pensar en identificadores de archivo como objetos con métodos, prefiriendo escribir el último ejemplo como:

    use IO::Handle;
    STDERR->autoflush(1);

Cuestiones de portabilidad: L<perlport/select>.

=item select RBITS,WBITS,EBITS,TIEMPO_ESPERA
X<select>

Esto llama a la función del sistema select(2) con las máscaras de bits especificadas, que pueden ser construidas usando C<fileno> y C<vec>, como muestran estas líneas:

    $rin = $win = $ein = '';
    vec($rin, fileno(STDIN),  1) = 1;
    vec($win, fileno(STDOUT), 1) = 1;
    $ein = $rin | $win;

Si desea seleccionar en muchos identificadores de archivo, puede desear escribir una subrutina de esta manera:

    sub fhbits {
        my @fhlist = @_;
        my $bits = "";
        for my $fh (@fhlist) {
            vec($bits, fileno($fh), 1) = 1;
        }
        return $bits;
    }
    $rin = fhbits(*STDIN, *TTY, *MYSOCK);

El modismo habitual es:

    ($n_encontrados,$tiempo_restanto) =
      select($rout=$rin, $wout=$win, $eout=$ein, $tiempo_espera);

o bloquear hasta que algo esté preparado, sólo hacemos esto

    $n_encontrados = select($rout=$rin, $wout=$win, $eout=$ein, undef);

La mayoría de los sistemas no se molestan en devolver nada útil en $tiempo_restante, así que llamando select() en contexto escalar sólo devuelve $n_encontrados.

Cualquiera de las máscaras de bits también puede ser undef.  El tiempo de espera, si se especifica, en segundos, puede ser decimal.  Nota: no todas las implementaciones son capaces de devolver $tiempo_restante.  Si no, siempre devuelven $tiempo_restante igual a $tiempo_espera indicado.

Puede efectuar una espera de 250 milisegundos de esta manera:

    select(undef, undef, undef, 0.25);

Tenga en cuenta que cuando C<select> es reiniciado después de señales (por ejemplo, SIGALRM) es algo dependiente de la implementación.  Vea también L<perlport> para las notas sobre la portabilidad de C<select>.

En caso de error, C<select> se comporta como select(2): devuelve -1 y actualiza C<$!>.

En algunos sistemas Unix, select(2) puede informar de un descriptor de archivo I<socket> como "listo para leer" incluso cuando no hay datos disponibles, y por lo tanto un posterior C<read> producirá un bloqueo.  Esto puede evitarse si siempre utiliza O_NONBLOCK en el I<socket>.  Vea select(2) y fcntl(2) para más detalles.

El módulo estándar C<IO::Select> proporciona una interfaz fácil de utilizar para C<select>, sobre todo porque hace todo el trabajo de la máscara de bits, por usted.

B<AVISO> : No debe tratar de mezclar el E/S con buferes (como C<read> o <FH>) con C<select>, excepto lo autorizado por POSIX, e incluso entonces sólo en sistemas POSIX.  Tiene que usar en su lugar C<sysread>.

Cuestiones de portabilidad: L<perlport/select>.

=item semctl ID,SEMNUM,CMD,ARG
X<semctl>

=for Pod::Functions SysV semaphore control operations

Llama a la función System V IPC semctl(2).  Probablemente escribirá

    use IPC::SysV;

primero para obtener las definiciones de las constantes.  Si CMD es IPC_STAT o GETALL, entonces ARG debe ser una variable que contendrá la estructura semid_ds devuelta o el array de semáforos.  Devuelve lo mismo que C<ioctl>: el valor indefinido para error, C<"0 but true"> para el cero, o el valor de retorno real, en caso contrario.  El ARG debe consistir en un vector de enteros cortos nativos, que pueden ser creados con C<pack("s!",(0)x$nsem)>.
Vea también la documentación de L<perlipc/"SysV IPC">, C<IPC::SysV>, y C<IPC::Semaphore>.

Cuestiones de portabilidad: L<perlport/semctl>.

=item semget KEY,NSEMS,FLAGS
X<semget>

=for Pod::Functions get set of SysV semaphores

Llama a la función System V IPC semget(2).  Devuelve el id del semáforo, o el valor indefinido en caso de error.  Vea también la documentación de L<perlipc/"SysV IPC">, C<IPC::SysV>, y C<IPC::Semaphore>.

Cuestiones de portabilidad: L<perlport/semget>.

=item semop KEY,OPSTRING
X<semop>

=for Pod::Functions SysV semaphore operations

Llama a la función System V IPC semop(2) para operaciones de semáforo como señalización y espera.  OPSTRING debe ser un array empaquetado de estructuras semop.  Cada estructura semop se puede generar con C<pack("s!3", $semnum, $semop, $semflag)>.  La longitud de OPSTRING implica el número de operaciones de semáforos.  Devuelve verdadero si tuvo éxito, falso en caso de error.  A modo de ejemplo, el siguiente código espera en un semáforo $semnum del semáforo con identificador $semid:

    $semop = pack("s!3", $semnum, -1, 0);
    die "Problema son semáforo: $!\n" unless semop($semid, $semop);

Para señalizar el el semáforo, reemplace C<-1> con C<1>.  Vea también la documentación de L<perlipc/"SysV IPC">, C<IPC::SysV>, y C<IPC::Semaphore>.

Cuestiones de portabilidad: L<perlport/semop>.

=item send SOCKET,MSG,FLAGS,TO
X<send>

=item send SOCKET,MSG,FLAGS

=for Pod::Functions send a message over a socket

Envía un mensaje sobre un socket.  Intenta enviar el escalar MSG al identificador de archivo SOCKET.  Toma las mismas banderas que la llamada al sistema del mismo nombre.  En sockets desconectados, debe especificar un destino I<adonde> enviarlo, en cuyo caso hace una llamada del sistema sendto(2).  Devuelve el número de caracteres enviados, o el valor indefinido en caso de error.  La llamada del sistema sendmsg(2) no está, actualmente, implementada.  Ver L<perlipc/"UDP: Paso de mensajes"> para ejemplos.

Note los I<caracteres>: dependiendo del estado del socket, son enviados bytes (8-bit) o caracteres.  Por defecto todos los sockets operan en bytes, pero por ejemplo, si el socket ha sido cambiado usando binmode() para operar con la capa de E/S C<:encoding(utf8)> (ver el pragma C<open>, L<open>), la E/S operará en caracteres codificados en UTF-8, no bytes.  Del mismo modo, para el pragma C<:encoding>: en este caso casi todos los caracteres se pueden enviar.

=item setpgrp PID,PGRP
X<setpgrp> X<group>

=for Pod::Functions set the process group of a process

Establece el grupo de procesos en curso para el PID especificado, C<0> para el proceso actual.  Eleva una excepción si se usa en una máquina que no implemente POSIX setpgid(2) o BSD setpgrp(2).  Si los argumentos son omitidos, el valor predeterminado es C<0,0>.  Tenga en cuenta que la versión de BSD 4.2 de C<setpgrp> no acepta ningún argumento, por lo que sólo C<setpgrp(0,0)> es portátil.  Vea también C<POSIX::setsid()>.

Cuestiones de portabilidad: L<perlport/setpgrp>.

=item setpriority CUÁL,QUIÉN,PRIORIDAD
X<setpriority> X<priority> X<nice> X<renice> X<prioridad>

=for Pod::Functions set a process's nice value

Devuelve la prioridad actual de un proceso, un grupo de procesos o un usuario.
(Vea setpriority(2)).  Lanza una excepción si se usa en una máquina que no implemente setpriority(2).

Cuestiones de portabilidad: L<perlport/setpriority>.

=item setsockopt SOCKET,NIVEL,OPCIÓN_NOMBRE,OPCIÓN_VALOR
X<setsockopt>

=for Pod::Functions set some socket options

Establece la opción de socket solicitada.  Devuelve C<undef> en caso de error.
Utilice constantes enteras proporcionadas por el módulo C<Socket> para NIVEL y OPCIÓN_NOMBRE.  Los valores para NIVEL también se pueden obtener de getprotobyname.  OPCIÓN_VALOR podría ser una cadena empaquetada o un entero.
Un entero como OPCIÓN_VALOR es la abreviatura de pack("i", OPCIÓN_VALOR).

Un ejemplo para deshabilitar el algoritmo de Nagle del socket:

    use Socket qw(IPPROTO_TCP TCP_NODELAY);
    setsockopt($socket, IPPROTO_TCP, TCP_NODELAY, 1);

Cuestiones de portabilidad: L<perlport/setsockopt>.

=item shift ARRAY
X<shift>

=item shift EXPR

=item shift

=for Pod::Functions remove the first element of an array, and return it

Extrae el primer valor del array y lo devuelve, acortando el array en uno y moviendo todos los demás hacia arriba.  Si no hay elementos en el array, devuelve el valor undef.  Si se omite ARRAY, se desplaza el array C<@_> dentro del ámbito léxico de subrutinas y formatos, y el array C<@ARGV> si está fuera de una subrutina y también dentro de los ámbitos léxicos establecidos por construcciones como C<eval CADENA>, C<BEGIN {}>, C<INIT {}>, C<CHECK {}>, C<UNITCHECK {}> y C<END {}>.

A partir de Perl 5.14, C<shift> puede tomar una EXPR escalar, que debe contener la referencia a un hash o un array no bendecido.  El argumento se desreferencia automáticamente.  Este aspecto de C<shift> es considerado altamente experimental.
El comportamiento exacto puede cambiar en una futura versión de Perl.

Para no confundir a los posibles usuarios de su código, que ejecuten versiones anteriores de Perl, con errores de sintaxis misteriosos, ponga este tipo de cosas en la parte superior de su archivo para indicar que el código funciona I<sólo> en versiones Perl de cosechas recientes:

    use 5.014;	# así, push/pop/etc trabajan sobre escalares (experimental)

Vea también C<unshift>, C<push>, y C<pop>.  C<shift> y C<unshift> hacen lo mismo con el extremo izquierdo de un array que C<pop> y C<push> hacen para el extremo derecho.

=item shmctl ID,CMD,ARG
X<shmctl>

=for Pod::Functions SysV shared memory operations

Llama a la función System V IPC shmctl(2).  Probablemente escribirá

    use IPC::SysV;

primero para obtener las definiciones de las constantes.  Si CMD es C<IPC_STAT>, entonces ARG debe ser una variable que contendrá la estructura C<shmid_ds> devuelta.  Devuelve lo mismo que ioctl: C<undef> para error; "C<0> but true" para cero; o el valor de retorno real, en cualquier otro caso.
Vea también la documentación de L<perlipc/"SysV IPC"> y C<IPC::SysV>.

Cuestiones de portabilidad: L<perlport/shmctl>.

=item shmget CLAVE,TAMAÑO,BANDERAS
X<shmget>

=for Pod::Functions get SysV shared memory segment identifier

Llama a la función System V IPC shmget(2).  Devuelve el id del segmento de memoria compartida, o C<undef> en caso de error.
Vea también la documentación de L<perlipc/"SysV IPC"> y C<IPC::SysV>.

Cuestiones de portabilidad: L<perlport/shmget>.

=item shmread ID,VAR,POSICIÓN,TAMAÑO
X<shmread> X<shmwrite>

=for Pod::Functions read SysV shared memory

=item shmwrite ID,CADENA,POSICIÓN,TAMAÑO

=for Pod::Functions write SysV shared memory

Lee o escribe en el segmento ID de memoria compartida System V a partir de la posición POSICIÓN para el tamaño TAMAÑO, añadiéndose a ella, copiando la entrada/salida, y desuniéndose de ella.  Al leer, VAR debe ser una variable que contendrá los datos leídos.  Al escribir, si CADENA es demasiado larga, sólo se utilizan TAMAÑO bytes; si CADENA es demasiado corta, se escriben nulos para llenar TAMAÑO bytes.  Devuelve verdadero si tuvo éxito, falso en caso de error.
shmread() contamina a la variable.  Vea también L<perlipc/"SysV IPC">, C<IPC::SysV>, y el módulo C<IPC::Shareable> en CPAN.

Cuestiones de portabilidad: L<perlport/shmread> y L<perlport/shmwrite>.

=item shutdown SOCKET,CÓMO
X<shutdown>

=for Pod::Functions close down just half of a socket connection

Cierra una conexión de socket en la manera indicada por el CÓMO, que tiene la misma interpretación que en la llamada del sistema del mismo nombre.

    shutdown(SOCKET, 0);    # Hemos dejado de leer datas
    shutdown(SOCKET, 1);    # Hemos dejado de escribir datos
    shutdown(SOCKET, 2);    # Hemos dejado de usar el socket

Esto es útil con sockets cuando desee decirle al otro lado que ha terminado de escribir, pero no ha terminado la lectura, o viceversa.
También es una forma más insistente de cerrar, ya que también desactiva el descriptor de archivo en cualquier copia bifurcada en otros procesos.

Devuelve C<1> para el éxito; en caso de error, devuelve C<undef> si el primer argumento no es un identificador de archivo válido, o devuelve C<0> y actualiza C<$!> por cualquier otro error.

=item sin EXPR
X<sin> X<sine> X<asin> X<arcsine> X<arco seno> X<seno>

=item sin

=for Pod::Functions return the sine of a number

Devuelve el seno de EXPR (expresado en radianes).  Si EXPR se omite, devuelve el seno de C<$_>.

Para la inversa de la operación seno, puede usar la función C<Math::Trig::asin()>, o usar esta relación:

    sub asin { atan2($_[0], sqrt(1 - $_[0] * $_[0])) }

=item sleep EXPR
X<sleep> X<pause> X<pausa>

=item sleep

=for Pod::Functions block for some number of seconds

Hace que el programa duerman EXPR segundos (entero), o para siempre si se da ningún argumento.  Devuelve el número entero de segundos realmente dormidos.  

Puede ser interrumpido si el proceso recibe una señal como C<SIGALRM>.

    eval {
        local $SIG{ALARM} = sub { die "¡Alarma!\n" };
        sleep;
    };
    die $@ unless $@ eq "¡Alarma!\n";

Es probable que no se pueden mezclar las llamadas C<alarm> y C<sleep>, debido a que C<sleep> a menudo está implementado en C<alarm>.

En algunos sistemas antiguos, se puede dormir hasta un segundo meno de lo que ha solicitado, en función de la forma en cómo se cuenten los segundos.  La mayoría de los sistemas modernos siempre duermen la cantidad correspondiente.  Sin embargo, quizás puedan parecer dormir más de lo indicado, debido a que su proceso no puede ser planificado de forma inmediata en un sistema multitarea ocupado.

Para lapsos de tiempo inferiores a un segundo, el módulo Time::HiRes (en CPAN, y desde Perl 5.8 parte de la distribución estándar) ofrece usleep().  Puede también usar la versión de select() de cuatro argumentos, dejando los tres primeros indefinidos, o puede usar la interfaz C<syscall> para acceder a setitimer(2) si su sistema lo soporta.  Vea L<perlfaq8> para más detalles.

Vea también la función C<pause> del módulo POSIX.

=item socket SOCKET,DOMINIO,TIPO,PROTOCOLO
X<socket>

=for Pod::Functions create a socket

Abre un socket de la clase especificada y lo adhiere al identificador de archivo SOCKET.  DOMINIO, TIPO, y PROTOCOLO son especificados de la misma manera que la llamada del sistema del mismo nombre.  Debe usar C<use Socket> primero para obtener las apropiadas definiciones.  Ver los ejemplos en L<perlipc/"Sockets: Comunicación Cliente/Servidor">.

En sistemas que soportan la bandera cerrar-en-ejecución sobre archivos, la bandera será puesta para el nuevo descriptor de archivo abierto, determinado por el valor de $^F.  Ver L<perlvar/$^F>.

=item socketpair SOCKET1,SOCKET2,DOMINIO,TIPO,PROTOCOLO
X<socketpair>

=for Pod::Functions create a pair of sockets

Crea un par de sockets anónimos en el dominio especificado, del tipo especificado.  DOMINIO, TIPO, y PROTOCOLO son especificados de la misma manera que la llamada del sistema del mismo nombre.  Si no está implementada, lanza una excepción.
Devuelve verdadero si tuvo éxito.

En sistemas que apoyan la bandera close-on-exec en archivos, esta bandera se establecerá para los nuevos descriptores de archivo abiertos, según lo determinado por el valor de $^F.  Ver L<perlvar/$^F>.

Algunos sistemas definen C<pipe> en términos de C<socketpair>, en el que una llamada a C<pipe(Rdr, Wtr)> es esencialmente:

    use Socket;
    socketpair(Rdr, Wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);
    shutdown(Rdr, 1);        # no más escrituras para el lector
    shutdown(Wtr, 0);        # no más lecturas para el escritor

Ver L<perlipc> para un ejemplo de uso de socketpair.  Perl 5.8 y siguientes emularán socketpair usando sockets IP a localhost si el sistema implementa sockets pero no socketpair.

Cuestiones de portabilidad: L<perlport/socketpair>.

=item sort NOMBRE_SUB LISTA
X<sort> X<qsort> X<quicksort> X<mergesort>

=item sort BLOQUE LISTA

=item sort LISTA

=for Pod::Functions sort a list of values

En contexto lista, ordena la LISTA y devuelve los valores de la lista ordenados.
En contexto escalar, el comportamiento de C<sort()> es indefinido.

Si NOMBRE_SUB O BLOQUE se omite, se ordena siguiendo una comparación estándar de cadenas de caracteres.  Si se ha especificado NOMBRE_SUB, da el nombre de la subrutina que devuelve un entero menor que, igual que, o mayor que C<0>, dependiendo de cómo los elementos de la lista tienen que ser ordenados.  (Los operadores C<< <=> >> y C<cmp> son muy útiles en este tipo de rutinas).
NOMBRE_SUB puede ser el nombre de una variable escalar, en cuyo caso el valor provee el nombre de (o la referencia a) la subrutina real a usar.  En lugar de un NOMBRE_SUB, puede proporcionar un BLOQUE como si fuera una subrutina de ordenación anónima.

Si el prototipo de la subrutina es C<($$)>, los elementos a ser comparados son pasados por referencia en C<@_>, como en una subrutina normal.  Esto es más lento que las subrutinas no prototipadas, donde los elementos a comparar son pasados a la subrutina en las variables globales del paquete actual $a y $b (ver ejemplo más abajo).  Tenga en cuenta que en el último caso, suele ser altamente contraproducente declarar $a y $b como léxicas.

Si la subrutina es un XSUB, los elementos que deben compararse son metidos en la pila, que es la forma normal en que los argumentos son pasados a las XSUB.  $a y $b no son actualizados.

Los valores a ser comparados siempre se pasan por referencia y no deben ser modificados.

También no puede salir fuera del bloque de ordenación o de la subrutina utilizando cualquiera de los operadores de control de bucle descritos en L<perlsyn> o con C<goto>.

Cuando C<use locale> está activo (pero no C<use locale 'not_characteres'>), C<sort LISTA> ordena LISTA de acuerdo con la actual configuración regional de cotejo.  Vea L<perllocale>.

sort() devuelve alias en la lista original, como lo hace la variable de índice de los bucles for(), que hace un alias de los elementos de la lista.  Es decir, modificar un elemento de la lista devuelto por grep (por ejemplo, en un C<foreach>, C<map> o C<grep>) modifica realmente el elemento en la lista original.  Esto suele ser algo que debe ser evitado cuando se está escribiendo código claro.

Perl v5.6 y anteriores usaban un algoritmo quicksort para implementar sort.
Este algoritmo no era estable, y I<podría> ser cuadrático.  (Un sort I<estable> preserva el orden de los elementos de entrada que sean iguales en la comparación.  Aunque el tiempo de ejecución de quicksort es O(NlogN) de promedio de todos los arrays de longitud N, el tiempo puede ser O(N**2), comportamiento I<cuadrático>, para algunas entradas).  En v5.7 la implementación de quicksort fue reemplazada con un algoritmo estable mergesort cuyo peor comportamiento es O(NlogN).
Pero los benchmarks indicaron que, para algunas entradas, en algunas plataformas, el quicksort original era más rápido.  v5,8 tiene un pragma para sort, para un control limitado de la ordenación.  Su contundente control del algoritmo subyacente quizás no persista en versiones futuras de Perl, pero la capacidad para caracterizar la entrada o salida en implementaciones independientes muy probablemente lo hará.  Ver L<el pragma sort|sort>.

Ejemplos:

    # ordenación léxica
    @articulos = sort @archivos;

    # lo mismo, pero con una rutina de ordenación explícita
    @articulos = sort {$a cmp $b} @archivos;

    # ahora, independiente del tamaño de caja
    @articulos = sort {fc($a) cmp fc($b)} @archivos;

    # lo mismo, en orden inverso
    @articulos = sort {$b cmp $a} @archivos;

    # ordenación numérica ascendente
    @articulos = sort {$a <=> $b} @archivos;

    # ordenación numérica descendente
    @articulos = sort {$b <=> $a} @archivos;

    # esto ordena el hash %edad por valor en lugar de por clave
    # usando una función incluida
    @eldest = sort { $edad{$b} <=> $edad{$a} } keys %edad;

    # ordena usando un nombre de una subrutina explícita
    sub por_edad {
        $edad{$a} <=> $edad{$b};  # presumimos numéricos
    }
    @claseordenada = sort por_edad @clase;

    sub al_reves { $b cmp $a }
    @harry  = qw(dog cat x Cain Abel);
    @george = qw(gone chased yz Punished Axed);
    print sort @harry;
        # prints AbelCaincatdogx
    print sort al_reves @harry;
        # prints xdogcatCainAbel
    print sort @george, 'to', @harry;
        # prints AbelAxedCainPunishedcatchaseddoggonetoxyz

    #  ordenación ineficiente por comparación numérica descendente usando
    # el primer entero después del signo =, o, de otra forma, todo
    # el registro, independientemente del tamaño de caja

    my @nuevo = sort {
        ($b =~ /=(\d+)/)[0] <=> ($a =~ /=(\d+)/)[0]
                            ||
                    fc($a)  cmp  fc($b)
    } @viejo;

    # lo mismo, pero mucho más eficiente;
    # construiremos índices auxiliares
    # para aumentar la velocidad
    my @numeros = @mayusculas = ();
    for (@viejo) {
        push @numeros, ( /=(\d+)/ ? $1 : undef );
        push @mayusculas, fc($_);
    }

    my @nuevo = @viejo[ sort {
                           $numeros[$b] <=> $numeros[$a]
                                    ||
                           $mayusculas[$a] cmp $mayusculas[$b]
                         } 0..$#viejo
                  ];

    # lo mismo, pero sin usar ninguna variable temporal
    @nuevo = map { $_->[0] }
           sort { $b->[1] <=> $a->[1]
                           ||
                  $a->[2] cmp $b->[2]
           } map { [$_, /=(\d+)/, fc($_)] } @viejo;

    # usando un prototipo permite usar cualquier subrutina de comparación
    # como una subrutina para sort (incluyendo subrutinas de otros paquetes)
    package otro;
    sub al_reves ($$) { $_[1] cmp $_[0]; }   # $a y $b
                                             # no se usan aquí    
    package main;
    @nuevo = sort otro::al_reves @viejo;

    # garantiza estabilidad, sin importar el algoritmo
    use sort 'stable';
    @nuevo = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @viejo;

    # fuerza el uso del mergesort (no portátil fuera de Perl v5.8)
    use sort '_mergesort';  # note el desalentador _
    @nuevo = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @viejo;

Advertencia: es requerido un cuidado sintáctico cuando se ordena la lista devuelta desde una función.  Si quiere ordenar la lista devuelta por la llamada a la función C<find_records(@key)>, puede usar:

    @contacto = sort { $a cmp $b } busca_registros @claves;
    @contacto = sort +busca_registros(@claves);
    @contacto = sort &busca_registros(@claves);
    @contacto = sort(busca_registros(@claves));

Si, en cambio, quiere ordenar el array @claves con la rutina de comparación C<busca_registros()> entonces puede usar:

    @contacto = sort { busca_registros() } @claves;
    @contacto = sort busca_registros(@claves);
    @contacto = sort(busca_registros @claves);
    @contacto = sort(busca_registros (@claves));

Si está usando strict, I<no debe> declarar $a y $b como léxicas.  Son variables globales del paquete.  Esto significa que si usted está en el paquete C<main> y escribe

    @articulos = sort {$b <=> $a} @archivos;

entonces C<$a> y C<$b> son C<$main::a> y C<$main::b> (o C<$::a> y C<$::b>), pero si está en el paquete C<FooPack>, es lo mismo que escribir

    @articulos = sort {$FooPack::b <=> $FooPack::a} @archivos;

Se requiere que la función de comparación se comporte de forma correcta.  Si devuelve resultados inconsistentes (algunas veces diciendo que C<$x[1]> es menor que C<$x[2]> y otras veces diciendo lo opuesto, por ejemplo) los resultados no están definidos.

Dado que C<< <=> >> devuelve C<undef> cuando alguno de los operandos es C<NaN> (I<not-a-number>, "no es un número"), tenga cuidado al ordenar con una función de comparación como C<< $a <=> $b >> cualquier lista que pueda contener un C<NaN>.  En el ejemplo siguiente se aprovecha de que C<NaN != NaN> para eliminar cualquier C<NaN> de la lista de entrada.

    @resultado = sort { $a <=> $b } grep { $_ == $_ } @entrada;

=item splice ARRAY,DESPLAZAMIENTO,LONGITUD,LISTA
X<splice>

=item splice ARRAY,DESPLAZAMIENTO,LONGITUD

=item splice ARRAY,DESPLAZAMIENTO

=item splice ARRAY

=item splice EXPR,DESPLAZAMIENTO,LONGITUD,LISTA

=item splice EXPR,DESPLAZAMIENTO,LONGITUD

=item splice EXPR,DESPLAZAMIENTO

=item splice EXPR

=for Pod::Functions add or remove elements anywhere in an array

Elimina los elementos designados por DESPLAZAMIENTO y LONGITUD de un array, y los sustituye por los elementos de LISTA, si los hubiere.  En contexto lista, devuelve los elementos retirados del array.  En contexto escalar, devuelve el último elemento eliminado, o C<undef> si no hay elementos eliminados.  El array crece o se reduce según sea necesario.
Si el DESPLAZAMIENTO es negativo, se cuenta la posición desde el final del array.
Si se omite LONGITUD, se suprime todo desde DESPLAZAMIENTO en adelante.
Si LONGITUD es negativa, elimina los elementos desde DESPLAZAMIENTO hacia adelante, excepto -LONGITUD elementos al final del array.
Si ambos DESPLAZAMIENTO y LONGITUD se omiten, quita todo.  Si el DESPLAZAMIENTO está más allá del final del array y se indica una LONGITUD, Perl lanza una advertencia, y extrae al final del array.

Las siguientes equivalencias se mantienen (suponiendo que C<< $#a >= $i >>)

    push(@a,$x,$y)      splice(@a,@a,0,$x,$y)
    pop(@a)             splice(@a,-1)
    shift(@a)           splice(@a,0,1)
    unshift(@a,$x,$y)   splice(@a,0,0,$x,$y)
    $a[$i] = $y         splice(@a,$i,1,$y)

Se puede usar C<splice>, por ejemplo, para implementar una cola de procesamiento de aridad n:

    sub print_n_ario {
      my $n = shift;
      while (my @siguiente_n = splice @_, 0, $n) {
        say join q{ -- }, @siguiente_n;
      }
    }

    print_n_ario(3, qw(a b c d e f g h));
    # imprime:
    #   a -- b -- c
    #   d -- e -- f
    #   g -- h

A partir de Perl 5.14, C<splice> puede tomar una EXPR escalar, que debe contener la referencia a un hash o un array no bendecido.  El argumento se desreferencia automáticamente.  Este aspecto de C<splice> es considerado altamente experimental.
El comportamiento exacto puede cambiar en una futura versión de Perl.

Para no confundir a los posibles usuarios de su código, que ejecuten versiones anteriores de Perl, con errores de sintaxis misteriosos, ponga este tipo de cosas en la parte superior de su archivo para indicar que el código funciona I<sólo> en versiones Perl de cosechas recientes:

    use 5.014;	# así, push/pop/etc trabajan sobre escalares (experimental)

=item split /PATRÓN/,EXPR,LÍMITE
X<split>

=item split /PATRÓN/,EXPR

=item split /PATRÓN/

=item split

=for Pod::Functions split up a string using a regexp delimiter

Divide la cadena EXPR en una lista de cadenas y devuelve esa lista en contexto lista, o el tamaño de la lista en contexto escalar.

Si sólo se indica PATRÓN, EXPR es, por defecto, C<$_>.

Cualquier cosa en EXPR concordante con el PATRÓN se toma como un delimitador que divide EXPR en subcadenas (llamadas "I<campos>") que B<no>> incluyen al separador.  Observe que un separador puede ser más largo que un carácter o incluso no tener ningún carácter en absoluto (la cadena vacía, que es una coincidencia de ancho cero).

El PATRÓN no necesita ser una constante; se puede usar una expresión para especificar un patrón que varía durante la ejecución.

Si el PATRÓN coincide con la cadena vacía, la EXPR es dividida en las posiciones coincidentes (entre los caracteres).  Como ejemplo, los siguientes:

    print join(':', split('b', 'abc')), "\n";

usa la 'b' en 'abc' como separador para producir la salida 'a:c'.
Sin embargo, esto:

    print join(':', split('', 'abc')), "\n";

utiliza las coincidencias de cadena vacía como separadores para producir la salida 'a:b:c', por lo que la cadena vacía puede ser utilizada para dividir EXPR en una lista de los caracteres que lo componen.

Como un caso especial para C<split>, el patrón vacío indicado en la sintaxis del L<operador de coincidencia|perlop/"m/PATRÓN/msixpodualngc"> (C<//>), coincide específicamente con la cadena vacía, que es lo contrario de la interpretación usual de ser igual a la última coincidencia exitosa.

Si PATRÓN es C</^/>, entonces se trata como si estuviera presente el L<modificador multilínea|perlreref/OPERADORES> (C</^/m>), ya que de lo contrario no serviría de mucho.

Como otro caso especial, C<split> emula el comportamiento predeterminado de la herramienta de línea de comando B<awk> cuando el PATRÓN es omitido o es una I<cadena literal> compuesta de un único carácter de espacio (tal como S<C<' '>> o S<C<"\x20">>, pero no, por ejemplo, S<C</ />>).  En este caso, cualquier espacio en blanco que rodee a EXPR es eliminado antes de que ocurra la división, y el PATRÓN es tratado como si fuera C</\s+/>; en particular, esto significa que I<cualquier> espacio en blanco contiguo (no sólo un carácter de espacio) es utilizado como separador.  Sin embargo, este tratamiento especial puede ser evitado especificando el patrón S<C</ />> en lugar de la cadena S<C<" ">>, permitiendo así que sólo un único carácter de espacio sea el separador.  En versiones anteriores de Perl, este caso especial estuvo restringido al uso de un sencillo S<C<" ">> como el argumento de patrón para split. En Perl 5.18.0 y siguientes, este caso especial se activa por cualquier expresión que evalúe a la cadena de caracteres S<C<" ">>.

Si se omite, el PATRÓN por defecto es un único espacio, S<C<" ">>, lo que provoca el comportamiento de la emulación I<awk> descrita anteriormente.

Si se ha especificado un LÍMITE, y es positivo, representa el máximo número de campos en que EXPR puede ser dividido; en otras palabras, LÍMITE es uno mayor que el máximo número de veces que EXPR puede ser dividido.  Por lo tanto, el valor LÍMITE C<1> significa que EXPR puede dividirse un máximo de cero veces, produciendo un máximo de un campo (es decir, el valor total de EXPR).  Por ejemplo:

    print join(':', split(//, 'abc', 1)), "\n";

produce la salida 'abc', y esto:

    print join(':', split(//, 'abc', 2)), "\n";

produce la salida 'a:bc', y cada uno de estos:

    print join(':', split(//, 'abc', 3)), "\n";
    print join(':', split(//, 'abc', 4)), "\n";

produce la salida 'a:b:c'.

Si LÍMITE es negativo, se trata como si se hubiera especificado un LÍMITE arbitrariamente grande; se producen tantos campos como sea posible.

Si LÍMITE es omitido (o, de forma equivalente, cero), entonces es tratado como si fuera negativo, pero con la salvedad de que los campos vacíos son eliminados (los campos vacíos limítrofes siempre son conservados); si todos los campos están vacíos, entonces todos los campos son considerados que son pertenecientes del final (y por lo tanto, en este caso, son eliminados).  Así, lo siguiente:

    print join(':', split(',', 'a,b,c,,,')), "\n";

produce la salida 'a:b:c', pero lo siguiente:

    print join(':', split(',', 'a,b,c,,,', -1)), "\n";

produce la salida 'a:b:c:::'.

En aplicaciones críticas con el tiempo, no es conveniente dividir en más campos de los que realmente se necesita.  Por lo tanto, cuando se asigna a una lista, si LÍMITE se omite (o es cero), entonces LÍMITE se trata como si fuera uno más que el número de variables que hay en la lista; para lo siguiente, LÍMITE es implícitamente 3:

    ($login, $contraseña) = split(/:/);

Tenga en cuenta que la división de una EXPR que evalúe a una cadena vacía siempre produce cero campos, sin importar qué LÍMITE se haya especificado.

Se produce un campo limítrofe vacío cuando hay una coincidencia de ancho positivo al comienzo de EXPR.  Por ejemplo:

    print join(':', split(/ /, ' abc')), "\n";

produce la salida ':abc'.  Sin embargo, una coincidencia de ancho cero al comienzo de EXPR nunca produce un campo vacío, de modo que:

    print join(':', split(//, ' abc'));

produces la salida S<' :a:b:c'> (en lugar de S<': :a:b:c'>).

Se produce un campo vacío posterior, por el contrario, cuando existe una coincidencia al final de EXPR, independientemente de la longitud de la coincidencia (por supuesto, a menos que un LÍMITE distinto de cero se haya indicado explícitamente, porque si no, tales campos son eliminados, como en el último ejemplo).  Por lo tanto:

    print join(':', split(//, ' abc', -1)), "\n";

produce la salida S<' :a:b:c:'>.

Si el PATRÓN contiene L<grupos de captura|perlretut/Agrupando cosas y coincidencia jerárquica>, entonces, por cada separador, se produce un campo adicional para cada subcadena capturada por un grupo (en el orden en que los grupos son especificados, como lo hacen las L<retrorreferencias|perlretut/Retrorreferencias>); si algún grupo no coincide, entonces captura el valor C<undef> en lugar de una subcadena.  Además, note que se produce un campo adicional cada vez que exista un separador (es decir, cuando se produce una división), y tales campos adicionales B<no> cuentan para el LÍMITE.  Considere las siguientes expresiones evaluadas en contexto de lista (se indica cada lista devuelta en el comentario correspondiente):

    split(/-|,/, "1-10,20", 3)
    # ('1', '10', '20')

    split(/(-|,)/, "1-10,20", 3)
    # ('1', '-', '10', ',', '20')

    split(/-|(,)/, "1-10,20", 3)
    # ('1', undef, '10', ',', '20')

    split(/(-)|,/, "1-10,20", 3)
    # ('1', '-', '10', undef, '20')

    split(/(-)|(,)/, "1-10,20", 3)
    # ('1', '-', undef, '10', undef, ',', '20')

=item sprintf FORMATO, LISTA
X<sprintf>

=for Pod::Functions formatted print into a string

Devuelve una cadena formateada por los habituales convenios de C<printf> de la función de biblioteca C<sprintf>.  Vea más abajo para detalles y vea L<sprintf(3)> o L<printf(3)> en su sistema para obtener una explicación de los principios generales.

Por ejemplo:

        # Formatea número con un máximo de 8 ceros iniciales
        $resultado = sprintf("%08d", $numero);

        # Redondea número a 3 dígitos después del punto decimal
        $redondeo = sprintf("%.3f", $numero);

Perl hace su propio formateo C<sprintf>: emula la función del C sprintf(3), pero no la usa, excepto para los números en coma flotante, y aún entonces sólo se admiten modificadores estándares.  
Extensiones no estándares en su sprintf(3) regional, por lo tanto, no estará disponible desde Perl.

A diferencia de C<printf>, C<sprintf> no hace lo que probablemente quiere decir cuando se le pasa un array como primer argumento. 
El array se le da en contexto escalar, y en lugar de utilizar el elemento 0 del array como el formato, Perl usará el número de elementos del array como el formato, que casi nunca es útil.

Perl C<sprintf> permite las siguientes conversiones universalmente conocidas:

   %%    un signo de por ciento
   %c    un carácter del numero indicado
   %s    una cadena
   %d    un entero con signo, en decimal
   %u    un entero sin signo, en decimal
   %o    un entero sin signo, en octal
   %x    un entero sin signo, en hexadecimal
   %e    un número en punto flotante, en notación científica
   %f    un número en punto flotante, en notación decimal fija
   %g    un número en punto flotante, en notación %e o %f

Además, Perl permite las siguientes conversiones ampliamente soportadas:

   %X    como %x, pero usando mayúsculas
   %E    como %e, pero usando una letra "E" mayúscula
   %G    como %g, pero con una letra letra "E" mayúscula (si es aplicable)
   %b    un entero sin signo, en binario
   %B    como %b, pero usando una letra "B" mayúscula con la bandera #
   %p    un puntero (sale la dirección del valor Perl en hexadecimal)
   %n    especial: *almacena* el número de caracteres de la salida hasta el momento
         en el siguiente argumento en la lista de parámetros
   %a    punto flotante hexadecimal
   %A    como %a, pero usando letras en mayúscula

Por último, para compatibilidad anterior (y nos referimos a "hacia atrás"), Perl permite estas innecesarias, pero ampliamente soportadas conversiones:

   %i    un sinónimo para %d
   %D    un sinónimo para %ld
   %U    un sinónimo para %lu
   %O    un sinónimo para %lo
   %F    un sinónimo para %f

Tenga en cuenta que el número de dígitos del exponente en notación científica producida por C<%e>, C<%E>, C<%g> y C<%G> para los números con el módulo del exponente menor de 100 es dependiente del sistema: puede ser de tres o menos (con relleno de ceros según sea necesario).  En otras palabras, 1.23 por diez elevado a 99 puede ser "1.23e99" o "1.23e099".  De modo parecido para C<%a> y C<%A>: el exponente o los dígitos hexadecimales pueden flotar: especialmente la opción de configuración Perl para los "dobles largos" puede causar sorpresas.

Entre el C<%> y la letra de formato, puede especificar varios atributos adicionales controlando la interpretación del formato.
En fin, estos son:

=over 4

=item índice de parámetro de formato

Un explícito índice de parámetros de formato, tales como C<2$>.  Por defecto sprintf formateará el siguiente argumento no utilizado en la lista, pero esto le permite tomar los argumentos fuera de orden:

  printf '%2$d %1$d', 12, 34;      # imprime "34 12"
  printf '%3$d %d %1$d', 1, 2, 3;  # imprime "3 1 1"

=item banderas

uno o más de:

   espacio prefija un número no negativo con un espacio
   +       prefija un número no negativo con un signo más
   -       justifica a la izquierda dentro del campo
   0       usa ceros, no espacios, justificados a la derecha
   #       asegura el precedente "0" para cualquier octal,
           prefija hexadecimales no ceros con "0x" o "0X",
           prefija binarios no cero con "0b" o "0B"

Por ejemplo:

  printf '<% d>',  12;   # imprime "< 12>"
  printf '<%+d>',  12;   # imprime "<+12>"
  printf '<%6s>',  12;   # imprime "<    12>"
  printf '<%-6s>', 12;   # imprime "<12    >"
  printf '<%06s>', 12;   # imprime "<000012>"
  printf '<%#o>',  12;   # imprime "<014>"
  printf '<%#x>',  12;   # imprime "<0xc>"
  printf '<%#X>',  12;   # imprime "<0XC>"
  printf '<%#b>',  12;   # imprime "<0b1100>"
  printf '<%#B>',  12;   # imprime "<0B1100>"

Cuando un espacio y un signo más se dan como banderas de forma simultánea, un signo más es usado para prefijar un número positivo.

  printf '<%+ d>', 12;   # imprime "<+12>"
  printf '<% +d>', 12;   # imprime "<+12>"

Cuando la bandera # y una precisión se dan en la conversión %o, la precisión es incrementada si es necesario para el "0" inicial.

  printf '<%#.5o>', 012;      # imprime "<00012>"
  printf '<%#.5o>', 012345;   # imprime "<012345>"
  printf '<%#.0o>', 0;        # imprime "<0>"

=item vector de banderas

Esta bandera le dice a Perl que interprete la cadena indicada como un vector de enteros, uno para cada carácter en la cadena.  Perl aplica el formato a cada entero por turno, luego une las cadenas resultantes con un separador (un punto C<.> por defecto).  Esto puede ser útil para mostrar los valores ordinales de caracteres en cadenas arbitrarias:

  printf "%vd", "AB\x{100}";           # imprime "65.66.256"
  printf "versión es v%vd\n", $^V;     # Versión de Perl

Pone un asterisco C<*> antes de C<v> para reemplazar la cadena a utilizar para separar los números:

  printf "dirección es %*vX\n", ":", $addr;   # dirección IPv6
  printf "bits son %0*v8b\n", " ", $bits;     # cadena de bits aleatoria

También puede especificar, explícitamente, el número de argumento a utilizar para la combinación de cadena usando algo como C<*2$v>; por ejemplo:

  printf '%*4$vX %*4$vX %*4$vX',       # 3 direcciones IPv6
          @addr[1..3], ":";

=item ancho (mínimo)

Los argumentos son por lo general formateados para ser sólo tan amplios como para mostrar el valor dado.  Puede reemplazar el ancho al anteponer un número, u obteniendo la anchura del siguiente argumento (con C<*>) o de un argumento determinado (por ejemplo, con C<*2$>):

 printf "<%s>", "a";       # imprime "<a>"
 printf "<%6s>", "a";      # imprime "<     a>"
 printf "<%*s>", 6, "a";   # imprime "<     a>"
 printf '<%*2$s>', "a", 6; # imprime "<     a>"
 printf "<%2s>", "long";   # imprime "<long>" (no lo trunca)

Si un ancho de campo obtenido a través de C<*> es negativo, tiene el mismo efecto que la bandera C<->: alineación a la izquierda.

=item precisión, o ancho máximo
X<precision> X<precisión>

Puede especificar una precisión (para las conversiones numéricas) o una anchura máxima (para las conversiones de cadena) mediante la especificación de un C<.> seguido de un número.
Para formatos en punto flotante excepto C<g> y C<G>, especifica cuántos lugares a la derecha del punto decimal debe mostrar (el valor predeterminado es 6).
Por ejemplo:

  # estos ejemplos están sujetos a variaciones específicas del sistema
  printf '<%f>', 1;    # imprime "<1.000000>"
  printf '<%.1f>', 1;  # imprime "<1.0>"
  printf '<%.0f>', 1;  # imprime "<1>"
  printf '<%e>', 10;   # imprime "<1.000000e+01>"
  printf '<%.1e>', 10; # imprime "<1.0e+01>"

Para "g" y "G", especifica el número máximo de dígitos a mostrar, incluyendo los anteriores al punto decimal y los posteriores a él; por ejemplo:

  # Estos ejemplos están sujetos a variaciones específicas del sistema.
  printf '<%g>', 1;        # imprime "<1>"
  printf '<%.10g>', 1;     # imprime "<1>"
  printf '<%g>', 100;      # imprime "<100>"
  printf '<%.1g>', 100;    # imprime "<1e+02>"
  printf '<%.2g>', 100.01; # imprime "<1e+02>"
  printf '<%.5g>', 100.01; # imprime "<100.01>"
  printf '<%.4g>', 100.01; # imprime "<100>"

Para las conversiones de entero, especificando una precisión implica que la salida del número en sí mismo debería ser rellenado con ceros a este ancho, donde se pasa por alto a la bandera 0:

  printf '<%.6d>', 1;      # imprime "<000001>"
  printf '<%+.6d>', 1;     # imprime "<+000001>"
  printf '<%-10.6d>', 1;   # imprime "<000001    >"
  printf '<%10.6d>', 1;    # imprime "<    000001>"
  printf '<%010.6d>', 1;   # imprime "<    000001>"
  printf '<%+10.6d>', 1;   # imprime "<   +000001>"

  printf '<%.6x>', 1;      # imprime "<000001>"
  printf '<%#.6x>', 1;     # imprime "<0x000001>"
  printf '<%-10.6x>', 1;   # imprime "<000001    >"
  printf '<%10.6x>', 1;    # imprime "<    000001>"
  printf '<%010.6x>', 1;   # imprime "<    000001>"
  printf '<%#10.6x>', 1;   # imprime "<  0x000001>"

Para las conversiones de cadena, especificando una precisión trunca la cadena a la anchura especificada:

  printf '<%.5s>', "truncado";   # imprime "<trunc>"
  printf '<%10.5s>', "truncado"; # imprime "<     trunc>"

También puede obtener la precisión del siguiente argumento usando C<.*>:

  printf '<%.6x>', 1;       # imprime "<000001>"
  printf '<%.*x>', 6, 1;    # imprime "<000001>"

Si una precisión obtenida a través de C<*> es negativa, se cuenta como no tener precisión en absoluto.

  printf '<%.*s>',  7, "cadena";   # imprime "<cadena>"
  printf '<%.*s>',  3, "cadena";   # imprime "<cad>"
  printf '<%.*s>',  0, "cadena";   # imprime "<>"
  printf '<%.*s>', -1, "cadena";   # imprime "<cadena>"

  printf '<%.*d>',  1, 0;   # imprime "<0>"
  printf '<%.*d>',  0, 0;   # imprime "<>"
  printf '<%.*d>', -1, 0;   # imprime "<0>"

Actualmente, no se puede conseguir la precisión de un número determinado, pero es intención de que esto será posible en el futuro, por ejemplo, con C<.*2$>:

  printf '<%.*2$x>', 1, 6;   # INVÁLIDO, pero en el futuro imprimirá
                             # "<000001>"

=item size

Para conversiones numéricas, se puede especificar el tamaño del número a interpretar usando C<l>, C<h>, C<V>, C<q>, C<L>, o C<ll>.  Para las conversiones de entero (C<d u o x X b i D U O>), se asume que los números son, por lo general, de un tamaño, por defecto, de un entero de su plataforma (normalmente 32 or 64 bits), pero esto se puede reemplazar usando en su lugar uno de los tipos estándares de C, soportados por el compilador usado para construir Perl:

   hh          interpreta un entero como un "char" o "unsigned
               char" en Perl 5.14 o siguientes
   h           interpreta un entero como un "short" o
               "unsigned short"
   j           interpreta un entero como un tipo C "intmax_t" en Perl
               5.14 o superior, y solo con un compilador C99
               (no portable)
   l           interpreta un entero como un "long" o
               "unsigned long"
   q, L, o ll  interpreta un entero como un tipo C "long long",
               "unsigned long long", o "quad" (típicamente
               enteros 64-bit)
   t           interpreta un entero como "ptrdiff_t" del C en Perl
               Perl 5.14 o superior
   z           interpreta un entero como "size_t" del C en Perl 5.14
               o superior

A partir de 5.14, ninguno de estos produce una excepción si no están suportados en su plataforma.  Sin embargo, si las advertencias están habilitadas, una advertencia de la clase C<printf> es emitida cuando no esté soportada una bandera de conversión.  
Si en vez de eso, prefiere una excepción, haga lo siguiente:

    use warnings FATAL => "printf";

Si quiere saber acerca de las dependencias de la versión antes de empezar a ejecutar el programa, poner algo como esto en su parte superior:

    use 5.014;  # para los modificadores hh/j/t/z/ en printf

Puede averiguar si su Perl soporta quads a través de L<Config>:

    use Config;
    if ($Config{use64bitint} eq "define"
        || $Config{longsize} >= 8) {
        print "¡quads divertidos!\n";
    }

Para las conversiones de punto flotante (C<e f g E F G>), se asume que los números son por lo general de punto flotante del tamaño de su plataforma (doble o doble largo), pero se puede forzar "long double" con C<q>, C<L>, o C<ll> si la plataforma es compatible con ellas.</q>  Puede averiguar si su Perl soporta dobles a través de L<Config>:

    use Config;
    print "long doubles\n" if $Config{d_longdbl} eq "define";

puede averiguar si Perl considera "long double" como el valor por defecto para el tamaño del punto flotante para su plataforma a través de L<Config>:

    use Config;
    if ($Config{uselongdouble} eq "define") {
        print "long doubles por defecto\n";
    }

También puede ser que los long doubles y doubles sean la misma cosa:

        use Config;
        ($Config{doublesize} == $Config{longdblsize}) &&
                print "doubles son long doubles\n";

La especificación de tamaño C<V> no tiene ningún efecto en el código Perl, pero se admite para la compatibilidad con el código XS.  Esto significa "usar el tamaño estándar de un entero Perl o punto de número de coma flotante", que es el predeterminado.

=item orden de los argumentos

Normalmente, sprintf () toma el siguiente argumento utilizado como el valor de formato para cada especificación de formato.  Si la especificación de formato utiliza C<*> para exigir argumentos adicionales, estos se consumen de la lista de argumentos en el orden en que aparecen en la especificación del formato I<antes> del valor a dar formato.  Cuando se especifica un argumento por un índice explícito, esto no afecta el orden normal de los argumentos, incluso cuando el índice especificado explícitamente habría sido el siguiente argumento.

Así:

    printf "<%*.*s>", $a, $b, $c;

usa C<$a> para el ancho, C<$b> para la precisión, y C<$c> como el valor a formatear; mientras:

  printf '<%*1$.*s>', $a, $b;

usaría C<$a> para el ancho y precisión, y C<$b> como el valor a formatear.

Éstos son algunos ejemplos más; sea consciente de que cuando se utiliza un índice explícito, el C<$> puede ser necesario escaparlo:

  printf "%2\$d %d\n",    12, 34;      # imprimirá "34 12\n"
  printf "%2\$d %d %d\n", 12, 34;      # imprimirá "34 12 34\n"
  printf "%3\$d %d %d\n", 12, 34, 56;  # imprimirá "56 12 34\n"
  printf "%2\$*3\$d %d\n", 12, 34, 3;  # imprimirá " 34 12\n"

=back

Si C<use locale> (incluyendo C<use locale ':not_characters'>) está activo y se ha llamado a POSIX::setlocale(), el carácter utilizado para el separador decimal en números formateados en punto flotante se ve afectado por la configuración regional de C<LC_NUMERIC>.  Ver L<perllocale> y L<POSIX>.

=item sqrt EXPR
X<sqrt> X<root> X<square root> X<raíz cuadrada>

=item sqrt

=for Pod::Functions square root function

Devuelve la raíz cuadrada positiva de EXPR.  Si se omite EXPR, se usa C<$_>.  Sólo funciona para operandos no negativos a menos que haya cargado el módulo C<Math::Complex>x.

    use Math::Complex;
    print sqrt(-4);    # imprime 2i

=item srand EXPR
X<srand> X<seed> X<randseed>

=item srand

=for Pod::Functions seed the random number generator

Establece y devuelve la semilla de números aleatorios para el operador C<rand>.

La misión de la función es "alimentar" a la función C<rand> para que C<rand> pueda producir una secuencia diferente cada vez que ejecute su programa.  Cuando se llama con un parámetro, C<srand> la usa para la semilla; de lo contrario la elige (semi)-aleatoriamente.  En cualquier caso, a partir de Perl 5.14, devuelve la semilla.  Para indicar que su código funciona I<solo> en un Perl de una cosecha reciente:

    use 5.014;	# así srand devuelve la semilla

Si C<srand()> no es llamada de forma explícita, es llamada implícitamente en el primer uso del operador C<rand>.
Hay, sin embargo, unas pocas situaciones donde es probable que desee llamar a C<srand>.  Una de ellas es para la generación de resultados predecibles, generalmente para pruebas o depuraciones.  Allí, puede utilizar C<srand($semilla)>, con la misma C<$semilla> cada vez.  Otro caso es que puede llamar a C<srand()> después de un C<fork()> para evitar que los procesos hijos compartan el mismo valor de semilla que la del padre (y por lo tanto, entre sí).

B<No> llame a srand() (e.d., sin un argumento) más de una vez por proceso.  El estado interno del generador de números aleatorios debería contener más entropía que la ofrecida por cualquier semilla, así que volver a llamar a srand() realmente hace I<perder> la aleatoriedad.

La mayoría de las implementaciones de C<srand> toman un número entero y silenciosamente truncará los números decimales.  Esto significa que C<srand(42)> produce los mismos resultados, generalmente, que C<srand(42.1)>.  Para estar seguros, siempre pase un entero a C<srand>.

Un uso típico de la semilla devuelta es para un programa de prueba que tiene demasiadas combinaciones que probar, exhaustivamente, en el tiempo disponible para cada ejecución.  Se puede probar un subconjunto aleatorio cada vez, y si ocurre un fallo, registre las semillas utilizadas para las que se ha ejecutado a fin de que más adelante se puedan utilizar para reproducir los mismos resultados.

B<C<rand()> no es criptográficamente seguro.  No debe confiar en él en situaciones delicadas de seguridad.> Al escribir estas líneas, una serie de módulos de CPAN de terceros ofrecen generadores de números aleatorios destinados, por sus autores, a ser criptográficamente seguros, incluyendo L<Data::Entropy>, L<Crypt::Random>, L<Math::Random::Secure> y L<Math::TrulyRandom>.

=item stat IDENTIFICADOR_ARCHIVO
X<stat> X<file, status> X<ctime> X<archivo, estado>

=item stat EXPR

=item stat IDENTIFICADOR_DIR

=item stat

=for Pod::Functions get a file's status information

Devuelve una lista de 13 elementos dando la información de estado de un archivo, tanto si el archivo ha sido abierto a través de IDENTIFICADOR_ARCHIVO o IDENTIFICADOR_DIR, o nombrado por la EXPR.  Si EXPR se omite, se hace el stat de C<$_> (¡no de C<_>!).  Devuelve la lista vacía si C<stat> falla.  Típicamente se usa como sigue:

    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
       $atime,$mtime,$ctime,$blksize,$blocks)
           = stat($nombre_de_archivo);

No todos los campos están soportados por todos los sistemas de archivos.  Aquí están los significados de los campos:

  0 dev      número de dispositivo del sistema de archivos
  1 ino      número de inodo
  2 mode     modo de archivo (tipo y permisos)
  3 nlink    número de enlaces (duros) al archivo
  4 uid      ID numérico del usuario propietario del archivo
  5 gid      ID numérico del grupo del propietario del archivo
  6 rdev     identificador del dispositivo (solo archivos especiales)
  7 size     tamaño total del archivo, en bytes
  8 atime    tiempo último acceso, en segundos, desde el epoch
  9 mtime    tiempo última modificación, en segundos desde el epoch
 10 ctime    tiempo cambio inodo, en segundos desde el (*)
 11 blksize  tamaño preferido de E/S en bytes para interactuar con el
             archivo (puede variar de archivo en archivo)
 12 blocks   número actual de bloques, específicos del sistema, reservados
             en disco (a menudo, pero no siempre, de 512 bytes cada uno)

(El epoch fue a las 00:00 GMT del 1 de enero de 1970)

(*) No todos los campos están soportados por todos los sistemas de archivos.  En particular, el campo ctime no es portátil.  En particular, no puede esperar que sea el "tiempo de creación"; vea L<perlport/"Archivos y sistemas de archivos"> para más detalles.

Si a C<stat> se le pasa el identificador de archivo especial consistente en un subrayado, no se hacen estadísticas, sino que se devuelven el contenido actual de la estructura de estadísticas de la última llamada C<stat>, C<lstat>, o test de archivos.  Ejemplo:

    if (-x $archivo && (($d) = stat(_)) && $d < 0) {
        print "$archivo es un archivo NFS ejecutable\n";
    }

(Esto funciona solo en máquinas en las cuales el número de dispositivo es negativo para NFS)

Dado que el modo contiene el tipo de archivo y sus permisos, debe desenmascarar la porción de tipo de archivo y usar (s)printf con C<"%o"> si desea ver los permisos reales.

    $modo = (stat($archivo))[2];
    printf "Permisos son %04o\n", $modo & 07777;

En contexto escalar, C<stat> devuelve un valor booleano que indica el éxito o el fracaso y, si tiene éxito, establece la información asociada con el identificador de archivo especial C<_>.

El módulo <File::stat> proporciona un conveniente mecanismo de acceso por nombre:

    use File::stat;
    $sb = stat($archivo);
    printf "Archivo es %s, tamaño es %s, perm %04o, mtime %s\n",
           $archivo, $sb->size, $sb->mode & 07777,
           scalar localtime $sb->mtime;

Puede importar constantes simbólicas (C<S_IF*>) y funciones (C<S_IS*>) desde el módulo Fcntl:

    use Fcntl ':mode';

    $modo = (stat($archivo))[2];

    $usuario_rwx    = ($modo & S_IRWXU) >> 6;
    $grupo_lectura  = ($modo & S_IRGRP) >> 3;
    $otros_ejecutar =  $modo & S_IXOTH;

    printf "Permisos son %04o\n", S_IMODE($modo), "\n";

    $es_setuid     =  $modo & S_ISUID;
    $es_directorio =  S_ISDIR($modo);

Podría escribir las dos últimas utilizando los operadores C<-u> y C<-d>.
Comúnmente disponibles las constantes C<S_IF*> son:

    # Permisos: leer, escribir, ejecutar, por usuario, grupo, otros.

    S_IRWXU S_IRUSR S_IWUSR S_IXUSR
    S_IRWXG S_IRGRP S_IWGRP S_IXGRP
    S_IRWXO S_IROTH S_IWOTH S_IXOTH

    # Setuid/Setgid/Stickiness/SaveText.
    # Tenga en cuenta que el significado exacto de esto es dependiente del sistema.

    S_ISUID S_ISGID S_ISVTX S_ISTXT

    # Tipos de archivo.  No necesariamente todos estarán disponibles en
    # su sistema.

    S_IFREG S_IFDIR S_IFLNK S_IFBLK S_IFCHR
    S_IFIFO S_IFSOCK S_IFWHT S_ENFMT

    # Los siguientes son los alias compatibles para S_IRUSR,
    # S_IWUSR y S_IXUSR.

    S_IREAD S_IWRITE S_IEXEC

y las funciones C<S_IF*> son

    S_IMODE($modo)    la parte de $modo conteniendo los bits de permiso
                      y los bits setuid/setgid/sticky

    S_IFMT($modo)    la parte de $modo conteniendo los bits del tipo de archivo
                      que pueden ser bit-I<andeados> con (por ejemplo)
                      S_IFREG o con las siguientes funciones

    # Los operadores -f, -d, -l, -b, -c, -p, y -S.

    S_ISREG($modo) S_ISDIR($modo) S_ISLNK($modo)
    S_ISBLK($modo) S_ISCHR($modo) S_ISFIFO($modo) S_ISSOCK($modo)

    # No tiene un operador -X parejo, pero para el primero
    # el operador -g es, a menudo, equivalente.  El ENFMT significa
    # bloqueo forzado de registro, una característica dependiente de la plataforma.

    S_ISENFMT($modo) S_ISWHT($modo)

Consulte su documentación de las nativas chmod(2) y stat(2) para obtener más detalles acerca de las constantes C<S_*>.  Para obtener información de estado de un enlace simbólico en lugar del archivo de destino tras el enlace, utilice la función C<lstat>.

Cuestiones de portabilidad: L<perlport/stat>.

=item state VARLIST
X<state>

=item state TIPO VARLIST

=item state VARLIST : ATRIBUTOS

=item state TIPO VARLIST : ATRIBUTOS

=for Pod::Functions +state declare and assign a persistent lexical variable

C<state> declara una variable de ámbito léxico, como lo hace C<my>.
Sin embargo, estas variables no se reinicializan, a diferencia de las variables léxicas que se reinicializan cada vez que entran en un bloque.
Vea L<perlsub/"Variables privadas persistentes"> para los detalles.

Si se lista más de una variable, la lista debe ser puesta entre paréntesis.  Con una lista entre paréntesis, se puede utilizar C<undef> como un marcador de posición.  Sin embargo, debido a que actualmente la inicialización de las variables state en contexto de lista no es posible, esto no sirve para nada.

Variables C<state> sólo se activan cuando el pragma C<use feature "state"> está en vigor, a menos que el identificador está escrito como C<CORE::state>.
Vea también L<feature>. O de otra forma, incluya un C<use v5.10> o posterior en el contexto actual.

=item study ESCALAR
X<study>

=item study

=for Pod::Functions optimize input data for repeated searches

Toma tiempo extra para estudiar ESCALAR (C<$_> si no se especifica) en previsión de hacer muchos patrones de coincidencia en la cadena antes de que sea modificada.
Esto puede o no ahorrar tiempo, dependiendo de la naturaleza y el número de patrones que esté buscando y sobre la distribución de frecuencias de caracteres de la cadena a buscar; probablemente querrá comparar los tiempos de funcionamiento con y sin él para ver qué funciona más rápido.  Los bucles que escanean por muchas cadenas constantes cortas (incluidas las partes constante de patrones más complejos) serán los más beneficiados.

Note que desde la versión Perl 5.16 esta función es una no-operación, pero puede cambiar en una futura versión.

(La forma en que C<study> funciona es la siguiente: se crea una lista enlazada de todos los caracteres en la cadena que se deben buscar, y así sabremos, por ejemplo, donde están todos los caracteres C<'k'>.  De cada cadena de búsqueda, se selecciona el carácter más raro, en función de algunas tablas de frecuencia estática construidas a partir de algunos programas en C y texto en inglés.  Sólo son examinados estos lugares que contienen este "carácter" más raro).

Por ejemplo, aquí hay un bucle que inserta índices de entradas antes de cualquier línea que contenga un cierto patrón:

    while (<>) {
        study;
        print ".IX foo\n"    if /\bfoo\b/;
        print ".IX bar\n"    if /\bbar\b/;
        print ".IX blurfl\n" if /\bblurfl\b/;
        # ...
        print;
    }

En la búsqueda de C</\bfoo\b/>, los únicos lugares que serán examinados de C<$_> serán los que contengan una C<f>, debido a que C<f> es más rara que una C<o>.  En general, esto es un gran ahorro, salvo en casos patológicos.  La única pregunta es si ahorra más tiempo que en lo que se tardó en construir la lista enlazada, al principio.

Tenga en cuenta que si usted tiene que buscar en cadenas que no sabe hasta el tiempo de ejecución, puede crear un bucle completo como una cadena y luego hacerle un C<eval>, para evitar tener que volver a recompilar todos los patrones todo el tiempo.  Junto con la indefinición de C<$/> para la entrada de archivos completos como un único registro, esto puede ser bastante rápido, a menudo más rápido que los programas especializados como fgrep(1).  Lo siguiente examina una lista de archivos (C<@archivos>) por una lista de palabras (C<@palabras>), e imprime los nombres de los archivos que contienen una coincidencia:

    $buscar = 'while (<>) { study;';
    foreach $palabra (@palabras) {
        $buscar .= "++\$visto{\$ARGV} if /\\b$palabra\\b/;\n";
    }
    $buscar .= "}";
    @ARGV = @archivos;
    undef $/;
    eval $buscar;        # esto aúlla
    $/ = "\n";           # volvemos al delimitador de entrada normal
    foreach $archivo (sort keys(%visto)) {
        print $archivo, "\n";
    }

=item sub NOMBRE BLOQUE
X<sub>

=item sub NOMBRE (PROTO) BLOQUE

=item sub NOMBRE : ATRIBS BLOQUE

=item sub NOMBRE (PROTO) : ATRIBS BLOQUE

=for Pod::Functions declare a subroutine, possibly anonymously

Esta es la definición de subrutina, no una función real I<per se>.  Sin un BLOQUE es sólo una declaración previa.  Sin un NOMBRE, es una declaración de una función anónima, y devuelve un valor: la referencia al CÓDIGO de la clausura que acaba de crear.

Vea L<perlsub> y L<perlref> para los detalles acerca de subrutinas y referencias; vea L<attributes> y L<Attribute::Handlers> para obtener más información acerca de los atributos.

=item __SUB__
X<__SUB__>

=for Pod::Functions +current_sub the current subroutine, or C<undef> if not in a subroutine

Un I<token> especial que devuelve una referencia a la subrutina actual, o C<undef> si está fuera de una subrutina.

El comportamiento de C<__SUB__> dentro de un bloque de código con una expresión regular (como en C</(?{...})/>)
está sujeto a cambio.

Este I<token> sólo está disponible bajo C<use v5.16> o la característica "current_sub".  Ver L<feature>.

=item substr EXPR,DESPLAZAMIENTO,LONGITUD,REEMPLAZO
X<substr> X<substring> X<mid> X<left> X<right>

=item substr EXPR,DESPLAZAMIENTO,LONGITUD

=item substr EXPR,DESPLAZAMIENTO

=for Pod::Functions get or alter a portion of a string

Extrae una subcadena de EXPR y la devuelve.  El primer carácter está en el desplazamiento cero.  Si el DESPLAZAMIENTO es negativo, se comienza a contar desde el final de la cadena.  Si se omite LONGITUD, devuelve todo hasta el final de la cadena.  Si LONGITUD es negativa, deja fuera a tantos caracteres del final de la cadena.

    my $s = "El gato negro subió el árbol verde";
    my $color  = substr $s, 8, 5;      # negro
    my $middle = substr $s, 3, -12;    # gato negro subió el
    my $end    = substr $s, 14;        # subió el árbol verde
    my $tail   = substr $s, -5;        # verde
    my $z      = substr $s, -5, 2;     # ve

Puede utilizar la función substr() como un valor-izquierda, en cuyo caso la EXPR debe ser en si mismo un valor-izquierda.  Si asigna algo más corto que LONGITUD, la cadena se reducirá, y si asigna algo más largo que LONGITUD, la cadena crecerá para acogerlo.  Para mantener la cadena de la misma longitud, puede ser necesario rellenar o recortar su valor con C<sprintf>.

Si DESPLAZAMIENTO y LONGITUD especifican una subcadena que está parcialmente fuera de la cadena, sólo la parte de dentro de la cadena se devuelve.  Si la subcadena está más allá de cada extremo de la cadena, substr() devuelve el valor indefinido y produce una advertencia.  Cuando se utiliza como un valor-izquierda, especificando una subcadena que está totalmente fuera de la cadena lanza una excepción.
Aquí un ejemplo que muestra el comportamiento para los casos límite:

    my $nombre = 'pedro';
    substr($nombre, 4) = 'ito';       # $nombre es ahora 'pedrito'
    my $nulo = substr $nombre, 7, 2;  # devuelve "" (sin advertencia)
    my $oops = substr $nombre, 7;     # devuelve undef, con advertencia
    substr($nombre, 7) = 'gap';       # lanza una excepción

Una alternativa al uso substr() como un valor-izquierda es especificar la cadena de reemplazo como el cuarto argumento.  Esto le permite reemplazar partes de la EXPR y devolver lo que había antes, en una operación, tal como se puede hacer con splice().

    my $s = "El gato negro subió el árbol verde";
    my $z = substr $s, 14, 5, "saltó desde";    # subió
    # $s es ahora "El gato negro saltó desde el árbol verde"

Tenga en cuenta que el valor-izquierda devuelto por la versión de tres argumentos de substr() actúa como una 'bala mágica'; cada vez que se le asigna, recuerda qué parte de la cadena original se ha modificado; por ejemplo:

    $x = '1234';
    for (substr($x,1,2)) {
        $_ = 'a';   print $x,"\n";    # imprime 1a4
        $_ = 'xyz'; print $x,"\n";    # imprime 1xyz4
        $x = '56789';
        $_ = 'pq';  print $x,"\n";    # imprime 5pq9
    }

Con desplazamientos negativos, recuerda su posición desde el final de la cadena cuando la cadena destino es modificada:

    $x = '1234';
    for (substr($x, -3, 2)) {
        $_ = 'a';   print $x,"\n";    # imprime 1a4, como antes
        $x = 'abcdefg';
        print $_,"\n";                # imprime f
    }

Antes de la versión Perl 5.10, no estaba especificado el resultado de usar varias veces un valor-izquierda.  Antes de 5,16, el resultado con desplazamientos negativos no estaba especificado.

=item symlink VIEJO,NUEVO
X<symlink> X<link> X<symbolic link> X<link, symbolic> X<enlace simbólico> X<enlace>

=for Pod::Functions create a symbolic link to a file

Crea un nuevo nombre de archivo vinculado simbólicamente al nombre del archivo antiguo.
Devuelve C<1> en caso de éxito; de otra manera, C<0>.  En los sistemas que no admiten los enlaces simbólicos, produce una excepción.  Para comprobar esto, use eval:

    $symlink_existe = eval { symlink("",""); 1 };

Cuestiones de portabilidad: L<perlport/symlink>.

=item syscall NÚMERO, LISTA
X<syscall> X<system call> X<llamada del sistema>

=for Pod::Functions execute an arbitrary system call

Llama a la llamada del sistema especificado en el primer elemento de la lista, pasando el resto de elementos como argumentos para la llamada al sistema.  Si no está implementada, lanza una excepción.  Los argumentos se interpretan de la siguiente manera: si un argumento dado es numérico, el argumento se pasa como un int.  Si no, se pasa el puntero al valor de la cadena.  Es responsable de asegurarse de que una cadena sea pre-extendida el largo suficiente como para recibir cualquier resultado que pueda ser escrito en una cadena.  No se puede utilizar una cadena literal (u otras cadenas de sólo lectura) como un argumento a C<syscall> porque Perl tiene que asumir que cualquier puntero de cadena puede ser escrita a través de ella.  Si sus argumentos enteros no son enteros, y nunca han sido interpretados en un contexto numérico, es posible que deba agregarles C<0> para obligarles a que se parezcan a números.  Esto emula la función C<syswrite> (o viceversa):

    require 'syscall.ph';        # puede necesitar ejecutar h2ph
    $s = "hola por aquí\n";
    syscall(&SYS_write, fileno(STDOUT), $s, length $s);

Tenga en cuenta que Perl soporta pasar sólo hasta 14 argumentos a su syscall, que en la práctica debería (generalmente) ser suficiente.

Syscall devuelve cualquier valor devuelto por la llamada al sistema que llama.
Si la llamada al sistema falla, C<syscall> devuelve C<-1> y establece C<$!> (errno).
Tenga en cuenta que algunas llamadas al sistema I<pueden> legalmente devolver C<-1>.  La forma correcta de manejar llamadas de ese tipo es el de asignar C<$!=0> antes de la llamada, y comprobar el valor de C<$!> si C<syscall> devuelve C<-1>.

Hay un problema con C<syscall(&SYS_pipe)>: devuelve el número de archivo de la lectura final de la tubería que crea, pero no hay manera de recuperar el número de archivo del otro extremo.  Puede evitar este problema mediante el uso, en su lugar, de C<pipe>.

Cuestiones de portabilidad: L<perlport/syscall>.

=item sysopen IDENTIFICADOR_ARCHIVO,ARCHIVO,MODO
X<sysopen>

=item sysopen IDENTIFICADOR_ARCHIVO,ARCHIVO,MODO,PERMISOS

=for Pod::Functions +5.002 open a file, pipe, or descriptor

Abre el archivo cuyo nombre viene dado por ARCHIVO, y lo asocia con IDENTIFICADOR_ARCHIVO.  Si IDENTIFICADOR_ARCHIVO es una expresión, el valor es tomado como el nombre real del identificador de archivo buscado; un escalar indefinido será autovivificado adecuadamente.  Esta función llama a la función subyacente del sistema operativo I<open>(2) con los parámetros ARCHIVO, MODO y PERMISOS.

Los valores posibles y bits de bandera del parámetro MODO son dependientes del sistema; están disponibles en el módulo estándar C<Fcntl>.  Consulte la documentación de la llamada del sistema I<open>(2) de su sistema operativo para ver qué valores y bits de bandera están disponibles.  Puede combinar varias banderas con el operador C<|>.

Algunos de los valores más comunes son C<O_RDONLY> para abrir el archivo en modo de sólo lectura, C<O_WRONLY> para abrir el archivo en modo de sólo escritura, y C<O_RDWR> para abrir el archivo en modo lectura-escritura.
X<O_RDONLY> X<O_RDWR> X<O_WRONLY>

Por razones históricas, algunos valores funcionan en casi todos los sistemas soportados por Perl: 0 significa solo lectura, 1 significa sólo escritura y 2 significa lectura y escritura.  Sabemos que estos valores I<no> funcionan bajo OS/390 y el Macintosh; es probable que no desee utilizarlos en nuevos programas.

Si el archivo con el nombre ARCHIVO no existe y la llamada C<open> lo crea (por lo general porque el modo incluye la bandera C<O_CREAT>), entonces el valor de PERMISOS especifica los permisos del archivo recién creado.  Si se omite el argumento PERMISOS a C<sysopen>, Perl utiliza el valor octal C<0666>.
Estos valores de permisos tiene que estar en octal, y son modificados por el valor de C<umask> de su proceso actual.
X<O_CREAT>

En muchos sistemas la bandera C<O_EXCL> está disponible para abrir archivos en modo exclusivo.  Esto B<no> es bloquear: la exclusividad significa aquí que si el archivo ya existe, sysopen() falla.  C<O_EXCL> quizás no funcione en sistemas de archivos en red, y no tiene ningún efecto a menos que el indicador C<O_CREAT> también esté establecido.  Estableciendo C<O_CREAT|O_EXCL> impide que el archivo sea abierto si es un enlace simbólico.  No protege contra enlaces simbólicos en la ruta del archivo.
X<O_EXCL>

A veces puede querer truncar un archivo ya existente.  Esto se puede hacer con el uso de la bandera C<O_TRUNC>.  El comportamiento de C<O_TRUNC> con C<O_RDONLY> no está definido.
X<O_TRUNC>

Rara vez o nunca debe utilizar C<0644> como argumento a C<sysopen>, porque eso le quita al usuario la opción de tener un umask más permisivo.
Es mejor omitirlo.  Ver la entrada perlfunc(1) para C<umask> para más información sobre esto.

Tenga en cuenta que C<sysopen> depende de la función de biblioteca C fdopen().
En muchos sistemas Unix, fdopen() se conoce que falla cuando los descriptores de archivo exceden un valor determinado, por lo general 255.  Si necesita más descriptores de archivo que esa cantidad, contemple la posibilidad de usar la función POSIX::open().

Ver L<perlopentut> para una más amable, más suave explicación de apertura de los archivos.

Cuestiones de portabilidad: L<perlport/sysopen>.

=item sysread IDENTIFICADOR_ARCHIVO,ESCALAR,LONGITUD,DESPLAZAMIENTO
X<sysread>

=item sysread IDENTIFICADOR_ARCHIVO,ESCALAR,LONGITUD

=for Pod::Functions fixed-length unbuffered input from a filehandle

Intenta leer LONGITUD bytes de datos en la variable ESCALAR desde el IDENTIFICADOR_ARCHIVO especificado, utilizando read(2).  Omite E/S con búfer, por lo que mezclar esto con otros tipos de lecturas, C<print>, C<write>, C<seek>, C<tell>, o C<eof> puede causar confusión porque las capas Perlio o stdio por lo general usan búfer de datos.  Devuelve el número de bytes realmente leídos, C<0> al final del archivo, o undef si hubo un error (en este último caso, también se establece C<$!>).  ESCALAR crecerá o se reducirá de manera que el último byte realmente leído sea el último byte del escalar después de la lectura.

Un DESPLAZAMIENTO se puede especificar para colocar los datos leídos en algún otro lugar de la cadena, distinto del principio.  Un DESPLAZAMIENTO negativo especifica el desplazamiento en número de caracteres contando desde el final de la cadena.  Un DESPLAZAMIENTO positivo mayor que la longitud de ESCALAR resulta en un cadena rellenada al tamaño requerido con bytes C<"\0"> antes de que el resultado de la lectura sea añadido.

No hay función syseof(), que está bien, ya que, de todos modos, eof() no funciona bien con los archivos de dispositivo (como los ttys).  Use sysread() y compruebe si el valor devuelto es 0 para decidir si ha llegado al final.

Tenga en cuenta que si el identificador de archivo ha sido marcado como  C<:utf8>, son leídos caracteres Unicode en lugar de bytes (la LONGITUD, el DESPLAZAMIENTO y el valor de retorno de sysread() están descritos en forma de número de caracteres Unicode).
La capa C<:encoding(...)> implícitamente introduce la capa C<:utf8>.
Ver L</binmode>, L</open>, y el pragma C<open>, L<open>.

=item sysseek IDENTIFICADOR_ARCHIVO,POSICIÓN,DESDE
X<sysseek> X<lseek>

=for Pod::Functions +5.004 position I/O pointer on handle used with sysread and syswrite

Establece la posición del IDENTIFICADOR_ARCHIVO en bytes usando lseek(2).  IDENTIFICADOR_ARCHIVO puede ser una expresión cuyo valor da el nombre del identificador de archivo.  Los valores de DÓNDE son C<0> para establecer la nueva posición a POSICIÓN; C<1> para establecerla a la actual más POSICIÓN; y C<2> para establecerla a EOF más POSICIÓN, normalmente negativa.

Nota sobre lo de I<en bytes>: incluso si el identificador de archivo se ha puesto para operar en caracteres (por ejemplo usando la capa de E/S C<:encoding(utf8)>), tell() devolverá desplazamientos en bytes, no en caracteres (porque implementando esto convertirían en inaceptablemente lentas a seek() y tell()).

sysseek() omite el búfer normal de E/S, por lo que mezclarlo con lecturas que no sean C<sysread> (por ejemplo C<< <> >> o read()) puede confundir a C<print>, C<write>, C<seek>, C<tell>, o C<eof>.

Para DÓNDE puede usar las constantes C<SEEK_SET>, C<SEEK_CUR>, y C<SEEK_END> (inicio de archivo, posición actual, y fin de archivo) del módulo L<Fcntl>.  El uso de las constantes también es más portátil que confiar en 0, 1 y 2.  Por ejemplo, para definir una función "systell":

    use Fcntl 'SEEK_CUR';
    sub systell { sysseek($_[0], 0, SEEK_CUR) }

Devuelve la nueva posición, o el valor indefinido en caso de error.  Una posición de cero es devuelto como cadena C<"0 but true"> (I<"0 pero verdadero">), por lo que C<sysseek> devuelve verdadero o falso en caso de error, sin embargo, usted puede determinar fácilmente la nueva posición.

=item system LISTA
X<system> X<shell>

=item system PROGRAMA LISTA

=for Pod::Functions run a separate program

Hace exactamente lo mismo que C<exec LISTA>, excepto que se hace primero un fork y el proceso padre espera a que el proceso hijo termine.  Tenga en cuenta que el tratamiento de los argumentos varía en función del número de argumentos.  Si hay más de un argumento en LISTA, o si la lista es un array con más de un valor, se inicia el programa indicado en el primer elemento de la lista, con los argumentos indicados por el resto de la lista.  Si sólo hay un argumento escalar, se comprueba si el argumento tiene metacaracteres, y si hay alguno, el argumento entero es pasado al shell de comandos para que sea interpretado (suele ser C</bin/sh -c> en plataformas Unix, pero varía en otras plataformas).  Si no hay metacaracteres shell en el argumento, es dividido en palabras y pasadas directamente a C<execvp>, que es más eficiente.  En Windows, solo la sintaxis de objetos indirecto en C<system PROGRAMA LISTA> evitará, de forma efectiva, evitar usar la shell; C<system LISTA>, incluso con más de un elemento, volverá a usar la shell si falla el primer intento de lanzamiento.

Perl intentará vaciar todos los archivos abiertos para la salida antes de cualquier operación que pueda hacer un fork, pero esto quizás no esté soportado en algunas plataformas (vea L<perlport>).  Para estar seguro, es posible que necesite el conjunto C<|> ($AUTOFLUSH en English) o llame al método C<autoflush()> de C<IO::Handle> en cualquier controlador abierto.

El valor devuelto es el estado de salida del programa devuelto por la llamada C<wait>.  Para obtener el valor real de la salida, se debe desplazar ocho a la derecha (ver más abajo).  Ver también L</exec>.  Esto I<no> es lo que desea utilizar para capturar la salida de un comando; para eso debería utilizar solamente las comillas invertidas o C<qx//>, como se describe en L<perlop/"`CADENA`">.  El retorno de valor de -1 indica un error en el arranque del programa o un error de la llamada al sistema wait(2) (inspeccionar $! para ver la razón).

Si desea hacer que C<system> (y muchos otros fragmentos de Perl) mueran en caso de error, eche un vistazo al pragma L<autodie>.

Al igual que C<exec>, C<system> permite reposar a un programa bajo un nombre, si se utiliza la sintaxis C<system PROGRAMA LISTA>.  Una vez más, vea L</exec>.

Puesto que C<SIGINT> y C<SIGQUIT> son ignoradas durante la ejecución de C<system>, si espera que su programa termine a la recepción de estas señales tendrá que disponer lo necesario para hacerlo usted mismo en función del valor de retorno.

    @args = ("comando", "arg1", "arg2");
    system(@args) == 0
        or die "system @args falló: $?"

Si desea inspeccionar manualmente el error de C<system>, puede comprobar todas las posibles causas del error mediante la inspección de C<$?> como esto:

    if ($? == -1) {
        print "error al ejecutar: $!\n";
    }
    elsif ($? & 127) {
        printf "hijo muerto con señal %d, %s coredump\n",
            ($? & 127),  ($? & 128) ? 'con' : 'sin';
    }
    else {
        printf "hijo terminó con valor %d\n", $? >> 8;
    }

Alternativamente, puede inspeccionar el valor de C<${^CHILD_ERROR_NATIVE}> con las llamadas C<W*()> desde el módulo POSIX.

Cuando los argumentos de C<system> son ejecutados indirectamente por el shell, los resultados y los códigos de retorno están sujetos a sus caprichos.
Ver L<perlop/"`STRING`"> y L</exec> para más detalles.

Debido a que C<system> hace un C<fork> y un C<wait> puede afectar al controlador C<SIGCHLD>.  Vea L<perlipc> para más detalles.

Cuestiones de portabilidad: L<perlport/system>.

=item syswrite IDENTIFICADOR_ARCHIVO,ESCALAR,LONGITUD,DESPLAZAMIENTO
X<syswrite>

=item syswrite IDENTIFICADOR_ARCHIVO,ESCALAR,LONGITUD

=item syswrite IDENTIFICADOR_ARCHIVO,ESCALAR

=for Pod::Functions fixed-length unbuffered output to a filehandle

Intenta escribir LONGITUD bytes de datos desde la variable ESCALAR al IDENTIFICADOR_ARCHIVO especificado, utilizando write(2).  Si LONGITUD no se especifica, escribe todo el ESCALAR.  Omite E/S con búfer, por lo que mezclar esto con otros tipos de lecturas (distintas de C<sysread()>) como C<print>, C<write>, C<seek>, C<tell>, o C<eof> puede causar confusión porque las capas perlio y stdio, por lo general, usan búfer de datos.  Devuelve el número de bytes realmente escritos, o C<undef> si hubo un error (en este caso, también se establece la variable C<$!>).  Si LONGITUD es mayor que los datos disponibles en ESCALAR después del DESPLAZAMIENTO, sólo se escribirán los datos que estén disponibles.

Un DESPLAZAMIENTO puede ser especificado para escribir datos desde algún otro lugar de la cadena distinto del principio.  Un DESPLAZAMIENTO negativo especifica escribir tantos caracteres contando desde el final de la cadena.
Si ESCALAR es de longitud cero, sólo se puede utilizar un DESPLAZAMIENTO de 0.

B<ADVERTENCIA>: Si el identificador de archivo está marcado como C<:utf8>, caracteres Unicode codificados en UTF-8 son escritos en lugar de bytes, y la LONGITUD, DESPLAZAMIENTO y el valor de retorno de syswrite() estarán basados en caracteres (Unicode codificados en UTF-8).
La capa C<:encoding(...)> implícitamente introduce la capa C<:utf8>.
De forma alternativa, si el identificador no está marcado con una codificación pero intenta escribir caracteres con códigos de carácter superiores a 255, se genera una excepción.
Ver L</binmode>, L</open>, y el pragma C<open>, L<open>.

=item tell IDENTIFICADOR_ARCHIVO
X<tell>

=item tell

=for Pod::Functions get current seekpointer on a filehandle

Devuelve la posición actual I<en bytes> para IDENTIFICADOR_ARCHIVO, o -1 en caso de error.  IDENTIFICADOR_ARCHIVO puede ser una expresión cuyo valor da el nombre del identificador de archivo real.  Si IDENTIFICADOR_ARCHIVO se omite, se asume que es el último archivo leído.

Nota sobre lo de I<en bytes>: incluso si el identificador de archivo se ha puesto para operar en caracteres (por ejemplo usando la capa de open C<:encoding(utf8)>), tell() devolverá desplazamientos en bytes, no en caracteres (porque implementando esto convertirían en lentas a seek() y tell()).

El valor de retorno de tell() para los flujos estándares como STDIN depende del sistema operativo: puede devolver -1 o algo más.
tell() en tuberías, colas, y sockets, por lo general, devuelve -1.

No existe la función C<systell>.  Use C<sysseek(FH, 0, 1)> para eso.

No utilice tell() (u otras operaciones de E/S con búfer) en un identificador de archivo que ha sido manipulado con sysread(), syswrite() o sysseek().
Esas funciones ignoran el sistema de búfer, mientras que tell(), no.

=item telldir IDENTIFICADOR_DIR
X<telldir>

=for Pod::Functions get current seekpointer on a directory handle

Devuelve la posición actual de la rutina C<readdir> sobre IDENTIFICADOR_DIR.
El valor puede ser indicado a C<seekdir> para acceder a un lugar determinado en un directorio.  C<telldir> también tiene las mismas advertencias sobre la posible compactación del directorio como la correspondiente rutina del sistema.

=item tie VARIABLE,CLASE,LISTA
X<tie>

=for Pod::Functions +5.002 bind a variable to an object class

Esta función une una variable a una clase de paquete que ofrecerá la implementación para esa variable.  VARIABLE es el nombre de la variable que será enlazada.  CLASE es el nombre de la clase que implementa objetos del tipo correcto.  Cualesquiera argumentos adicionales son pasados al método constructor apropiado de la clase (es decir, C<TIESCALAR>, C<TIEHANDLE>, C<TIEARRAY>, o C<TIEHASH>).  Por lo general estos son argumentos que pudieran ser transmitidos a la función del C C<dbm_open()>. El objeto devuelto por el constructor también es devuelto por la función C<tie>, que será útil si desea tener acceso a otros métodos en CLASE.

Note que las funciones como C<keys> y C<values> pueden devolver largas listas como cuando se usan con grandes archivos DBM.  Puede preferir usar la función C<each> para iterar sobre tales listas.  Ejemplo:

    # imprime los desplazamientos en el archivo histórico
    use NDBM_File;
    tie(%HIST, 'NDBM_File', '/usr/lib/news/history', 1, 0);
    while (($key,$val) = each %HIST) {
        print $clave, ' = ', unpack('L',$valor), "\n";
    }
    untie(%HIST);

Una clase que implementa un hash debe tener los siguientes métodos:

    TIEHASH clase, LISTA
    FETCH este, clave
    STORE este, clave, valor
    DELETE este, clave
    CLEAR este
    EXISTS este, clave
    FIRSTKEY este
    NEXTKEY este, últimaclave
    SCALAR este
    DESTROY este
    UNTIE este

Una clase implementando un array ordinario común debe tener los siguientes métodos:

    TIEARRAY clase, LISTA
    FETCH este, clave
    STORE este, clave, valor
    FETCHSIZE este
    STORESIZE este, contador
    CLEAR este
    PUSH este, LISTA
    POP este
    SHIFT este
    UNSHIFT este, LISTA
    SPLICE este, desplazamiento, longitud, LISTA
    EXTEND este, contador
    DELETE este, clave
    EXISTS este, clave
    DESTROY este
    UNTIE este

Una clase que implementa un identificador de archivo debe tener los siguientes métodos:

    TIEHANDLE clase, LISTA
    READ este, escalar, longitud, desplazamiento
    READLINE este
    GETC este
    WRITE este, escalar, longitud, desplazamiento
    PRINT este, LISTA
    PRINTF este, formato, LISTA
    BINMODE este
    EOF este
    FILENO este
    SEEK este, posición, desde_donde
    TELL este
    OPEN este, modo, LISTA
    CLOSE este
    DESTROY este
    UNTIE este

Una clase que implementa un escalar debe tener los siguientes métodos:

    TIESCALAR clase, LISTA
    FETCH este,
    STORE este, valor
    DESTROY este
    UNTIE este

No todos los métodos indicados es necesario implementarlos.  Ver L<perltie>, L<Tie::Hash>, L<Tie::Array>, L<Tie::Scalar>, y L<Tie::Handle>.

A diferencia de C<dbmopen>, la función C<tie> no usará C<use> o C<require> de un módulo por usted; necesitará hacerlo de forma explícita.  Ver L<DB_File> o el módulo F<Config> para implementaciones interesantes de C<tie>.

Para más detalles, vea L<perltie>, L<"tied VARIABLE">.

=item tied VARIABLE
X<tied>

=for Pod::Functions get a reference to the object underlying a tied variable

Devuelve una referencia al objeto subyacente en VARIABLE (el mismo valor que fue devuelto originalmente por la llamada C<tie> que unía a la variable a un paquete).  Devuelve el valor indefinido si la VARIABLE no está atada a un paquete.

=item time
X<time> X<epoch>

=for Pod::Functions return number of seconds since 1970

Devuelve el número de segundos no bisiestos desde el momento en que el sistema considera que es el I<epoch>, apto para ser alimentado a C<gmtime> y C<localtime>.  En la mayoría de los sistemas el I<epoch> son las 00:00:00 UTC, del 1 de enero de 1970; una prominente excepción es el Mac OS Classic que utiliza las 00:00:00, del 1 de enero de 1904 en la actual zona horaria.

Para medir el tiempo con una granularidad mayor de un segundo, use el módulo L<Time::HiRes> de Perl 5.8 (o desde CPAN antes de él), o si tiene gettimeofday(2), puede utilizar el interfaz C<syscall> de Perl.  Vea L<perlfaq8> para más detalles.

Para el procesado de fechas y tiempos mire en los módulos relaccionados en CPAN.
Para una completa y actualizada representación del tiempo mire el módulo L<DateTime>.

=item times
X<times>

=for Pod::Functions return elapsed time for self and child processes

Devuelve una lista de cuatro elementos dando los tiempos de usuario y sistema en segundos, para este proceso y cualquier hijo de este proceso que haya terminado.

    ($usuario,$sistema,$husuario,$hsistema) = times;

En contexto escalar, C<times> devuelve C<$usuario>.

Los tiempos de los hijos solo se incluyen de los hijos terminados.

Cuestiones de portabilidad: L<perlport/times>.

=item tr///

=for Pod::Functions transliterate a string

El operador de transliteración.  Igual que el C<y///>.  Vea L<perlop/"Operadores entrecomillados">.

=item truncate IDENTIFICADOR_ARCHIVO,LONGITUD
X<truncate>

=item truncate EXPR,LONGITUD

=for Pod::Functions shorten a file

Trunca el archivo abierto en IDENTIFICADOR_ARCHIVO, o nombrado por EXPR, a la longitud especificada.  Lanza una excepción si truncate no está implementada en el sistema.  Devuelve verdadero si tuvo éxito, C<undef> en caso de error.

El comportamiento no está definido si LONGITUD es mayor que la longitud del archivo.

La posición en el archivo de IDENTIFICADOR_ARCHIVO no cambia.  Puede llamar a L<seek|/"seek IDENTIFICADOR_ARCHIVO,POSICIÓN,DESDE"> antes de escribir al archivo.

Cuestiones de portabilidad: L<perlport/truncate>.

=item uc EXPR
X<uc> X<uppercase> X<toupper> X<mayúsculas>

=item uc

=for Pod::Functions return upper-case version of a string

Devuelve una versión de EXPR, en mayúsculas.  Esta es la función interna del escapado C<\U> en las cadenas doblemente entrecomilladas.
No intentará hacer un mapeo de mayúsculas con tilder en las letras iniciales.  Ver L</ucfirst> para eso.

Si se omite EXPR, se usa C<$_>.

Esta función se comporta de la misma manera bajo varios pragma, como por ejemplo en una configuración regional, como lo hace L</lc>.

=item ucfirst EXPR
X<ucfirst> X<uppercase> X<mayúscula>

=item ucfirst

=for Pod::Functions return a string with just the next letter in upper case

Devuelve el valor de EXPR con el primer carácter en mayúsculas.  Esta es la función interna del escapado C<\u> en las cadenas doblemente entrecomilladas.

Si se omite EXPR, se usa C<$_>.

Esta función se comporta de la misma manera bajo varios pragma, como por ejemplo en una configuración regional, como lo hace L</lc>.

=item umask EXPR
X<umask>

=item umask

=for Pod::Functions set file creation mode mask

Establece la umask para el proceso a EXPR y devuelve el valor anterior.
Si EXPR se omite, simplemente devuelve la umask actual.

Los permisos Unix C<rwxr-x---> son representados como tres conjuntos de tres bits, o tres dígitos octales: C<0750> (el 0 precedente indica que es octal, y que no es uno de los dígitos).  El valor de C<umask> es un número que representa los bits de lso permisos que quedan desactivados.  El valor de permiso (o "modo") que se pasa a C<mkdir> o C<sysopen> son modificados por su C<umask>, así que incluso si usted le pide a C<sysopen> crear un archivo con permisos C<0777>, y su C<umask> es C<0022>, entonces el archivo realmente se crea con permisos C<0755>.  Si su C<umask> fuera C<0027> (el grupo no puede escribir; los otros no pueden leer, escribir o ejecutar), entonces pasando a C<sysopen> C<0666> creará un archivo con el modo C<0640> (porque C<0666 &~ 027> es C<0640>).

He aquí algunos consejos: suministre un modo de creación de C<0666> para archivos regulares (en C<sysopen>) y uno de C<0777> para directorios (en C<mkdir>) y los archivos ejecutables.  Esto ofrece a los usuarios la libertad de elección: si quieren archivos protegidos, podrían elegir un umasks para el proceso de C<022>, C<027>, o incluso la máscara, particularmente antisocial, de C<077>.
Los programas rara vez o nunca deben tomar decisiones políticas, que es mejor dejar al usuario.  La excepción a esto es cuando se escriben archivos que deben mantenerse de forma privada: archivos de correo, los cookies del navegador web, archivos I<rhosts>, y así sucesivamente.

Si umask(2) no está implementada en su sistema y está tratando de restringir el acceso por I<sí mismo> (es decir, C<< (EXPR & 0700) > 0 >>), se lanza una excepción.  Si umask(2) no está implementado y usted no está tratando de restringir el acceso por sí mismo, devuelve C<undef>.

Recuerde que un umask es un número, generalmente indicado en octal; I<no> es una cadena de dígitos octales.  Ver también L</oct>, si todo lo que tiene es una cadena.

Cuestiones de portabilidad: L<perlport/umask>.

=item undef EXPR
X<undef> X<undefine> X<indefine>

=item undef

=for Pod::Functions remove a variable or function definition

Indefine el valor de EXPR, que debe ser un valor-izquierda.  Use solamente sobre un valor escalar, un array (usando C<@>), un hash (con C<%>), una subrutina (con C<&>), o un typeglob (usando C<*>).  Decir C<undef $hash{$key}> probablemente no vaya a hacer lo que usted espera en la mayoría de las variables predefinidas o lista de valores DBM, así que no lo haga; vea L</delete>.  Siempre devuelve el valor indefinido.  Puede omitir la EXPR, en tal caso, nada queda indefinido, pero aún obtiene un valor indefinido que podría, por ejemplo, devolver de una subrutina, asignar a una variable, o pasar como un parámetro.  Ejemplos:

    undef $foo;
    undef $bar{'blurfl'};      # Comparar a: delete $bar{'blurfl'};
    undef @ary;
    undef %hash;
    undef &mysub;
    undef *xyz;       # destruye $xyz, @xyz, %xyz, &xyz, etc.
    return (wantarray ? (undef, $errmsg) : undef) if $lo_hizo_estallar;
    select undef, undef, undef, 0.25;
    ($a, $b, undef, $c) = &foo;       # Ignora tercer valor devuelto

Tenga en cuenta que se trata de un operador unario, no un operador de lista.

=item unlink LISTA
X<unlink> X<delete> X<remove> X<rm> X<del> X<elimina> X<borra>

=item unlink

=for Pod::Functions remove one link to a file

Elimina una lista de archivos.  En caso de éxito, devuelve el número de archivos que se han eliminado correctamente.  En caso de error, se devuelve falso y establece C<$!> (errno):

    my $unlinked = unlink 'a', 'b', 'c';
    unlink @goners;
    unlink glob "*.bak";

En caso de error, C<unlink> no indicará qué archivos no se han podido borrar.
Si quiere saber qué archivos no pudo eliminar, trátelos de uno en uno:

     foreach my $archivo ( @muertos ) {
         unlink $archivo or warn "No puedo eliminar $archivo: $!";
     }

Nota: C<unlink> no intentará eliminar directorios a menos que usted sea superusuario y la bandera B<-U> se suministre a Perl.  Incluso si se cumplen estas condiciones, se advierte que desvincular un directorio puede causar daños a su sistema de archivos.  Por último, con C<unlink> en directorios no está soportado en muchos sistemas operativos.  Utilice C<rmdir> en su lugar.

Si LISTA se omite, C<unlink> utiliza C<$_>.

=item unpack PLANTILLA,EXPR
X<unpack>

=item unpack PLANTILLA

=for Pod::Functions convert binary structure into normal perl variables

C<unpack> hace lo contrario de C<pack>: toma una cadena y se expande hacia fuera en una lista de valores.
(En contexto escalar, devuelve sólo el primer valor producido).

Si EXPR es omitido, desempaqueta la cadena C<$_>.
Vea L<perlpacktut> para una introducción a esta función.

La cadena se rompe en trozos descritos por la PLANTILLA.  Cada fragmento se convierte en un valor por separado.  Por lo general, ya sea la cadena es un resultado de C<pack>, o los caracteres de la cadena representan una estructura de C de algún tipo.

La PLANTILLA tiene el mismo formato que en la función C<pack>.
Aquí hay una subrutina que parte cadenas:

    sub substr {
        my($que,$donde,$cuanto) = @_;
        unpack("x$donde a$cuanto", $que);
    }

y luego está

    sub ordinal { unpack("W",$_[0]); } # lo mismo que ord()

Además de los campos permitidos en pack(), puede usar un prefijo de un campo con un %<número> para indicar que desea una suma de control a nivel de bit de los elementos en lugar de los propios elementos.  El valor predeterminado es una suma de comprobación de 16-bit.  La suma de comprobación se calcula sumando los valores numéricos de los valores expandidos (para los campos de cadena se toma la suma de C<ord($char)>; para los campos de bits, la suma de ceros y unos).

Por ejemplo, lo siguiente calcula el mismo número que el programa sum de System V:

    $checksum = do {
        local $/;  # ¡sorber!
        unpack("%32W*",<>) % 65535;
    };

A continuación, de manera eficiente, cuenta el número de bits establecidos en un vector de bits:

    $bitspuestos = unpack("%32b*", $mascara);

Los formatos C<p> y C<P> deben ser utilizados con cuidado.  Dado que Perl no tiene manera de comprobar si el valor pasado a C<unpack()> corresponde a una ubicación de memoria válida, pasando un valor de puntero que no se sabe de su validez, puede tener consecuencias desastrosas.

Si hay más códigos de empaquetado o si el número de repeticiones de un campo o un grupo es más grande que lo que el resto de la cadena de entrada permite, el resultado no está bien definido: el número de repeticiones puede ser disminuido, o C<unpack()> puede producir cadenas vacías o ceros, o puede provocar una excepción.
Si la cadena de entrada es superior a lo descrito por la PLANTILLA, el resto de la cadena de entrada se ignora.

Ver L</pack> para más ejemplos y notas.

=item unshift ARRAY,LISTA
X<unshift>

=item unshift EXPR,LISTA

=for Pod::Functions prepend more elements to the beginning of a list

El opuesto de un C<shift>.  O lo contrario de un C<push>, dependiendo de cómo se mire.  Antepone LISTA al principio del array, y devuelve el número de elementos en el array.

    unshift(@ARGV, '-e') unless $ARGV[0] =~ /^-/;

Note que la LISTA se antepone en su conjunto, no un elemento a la vez, por lo que los elementos añadidos se mantienen en el mismo orden.  Utilice C<reverse> para hacer lo contrario.

A partir de Perl 5.14, C<unshift> puede tomar una EXPR escalar, que debe contener la referencia a un hash o un array no bendecido.  El argumento se desreferencia automáticamente.  Este aspecto de C<unshift> es considerado altamente experimental.  El comportamiento exacto puede cambiar en una futura versión de Perl.

Para no confundir a los posibles usuarios de su código, que ejecuten versiones anteriores de Perl, con errores de sintaxis misteriosos, ponga este tipo de cosas en la parte superior de su archivo para indicar que el código funciona I<sólo> en versiones Perl de cosechas recientes:

    use 5.014;	# así, push/pop/etc trabajan sobre escalares (experimental)

=item untie VARIABLE
X<untie>

=for Pod::Functions break a tie binding to a variable

Rompe el enlace entre una variable y un paquete.
(Vea L<tie|/tie VARIABLE,CLASE,LISTA>).
No tiene efecto si la variable no está atada.

=item use Módulo VERSIÓN LISTA
X<use> X<module> X<import> X<módulo> X<importar>

=item use Módulo VERSIÓN

=item use Módulo LISTA

=item use Módulo

=item use VERSIÓN

=for Pod::Functions load in a module at compile time and import its namespace

Importa semántica en el paquete actual desde el módulo que se indica, generalmente por medio de alias de ciertas subrutinas o nombres de variables en su paquete.  Es exactamente equivalente a

    BEGIN { require Módulo; Módulo->import( LISTA ); }

excepto que el módulo I<debe> ser una palabra simple.
La importación puede estar condicionada por medio del módulo L<if>.

En la forma peculiar C<use VERSION>, VERSION puede ser tanto un número fraccionario decimal positivo, como 5.006, que será comparado con C<$]>, o como una v-cadena de la forma v5.6.1, que será comparado con C<$^V> (también conocido como $PERL_VERSION).  Se genera una excepción si la VERSIÓN es mayor que la versión del intérprete actual de Perl; Perl no tratará de analizar el resto del archivo.  Compare con L</require>, que puede hacer un control similar en tiempo de ejecución.
Simétricamente, C<no VERSIÓN> le permite especificar que desea una versión de Perl más vieja que la especificada.

Especificando VERSIÓN como un literal de la forma v5.6.1, debe, generalmente, evitarse, porque lleva a crear mensajes de error equívocos en las versiones anteriores de Perl (esto es, anteriores a 5.6.0) que no admiten esta sintaxis.  Se debe usar en su lugar la versión equivalente numérica.

    use v5.6.1;     # comprobación en tiempo de compilación
    use 5.6.1;      # ídem
    use 5.006_001;  # ídem; preferido para mantener la compatibilidad

Suele ser útil si necesita comprobar la versión actual de Perl antes de que C<use> módulos que no funcionarán con versiones anteriores de Perl.
(Tratamos de no hacer esto no más de lo necesario).

C<use VERSIÓN> también activa léxicamente todas las características disponibles en la versión solicitada tal como son definidas por el pragma C<feature>, desactivando cualquier característica no incluida en la versión solicitada.  Ver L<feature>.
Del mismo modo, si la versión especificada de Perl es mayor o igual a 5.12.0, el modo de trabajo estricto quedará activado léxicamente, igual a como lo hace C<use strict>.  Cualquier uso explícito de C<use strict> o C<no strict> anula C<use VERSIÓN>, incluso si se coloca antes de él.  Uso posterior de C<use VERSION> sobrecargará todos los comportamientos de un anterior C<use VERSION>, posiblemente eliminando el C<strict> y C<feature> añadidos por C<use VERSION>.  C<use VERSION> no carga los archivos F<feature.pm> o F<strict.pm>.

El C<BEGIN> fuerza a ejecutar a C<require> e C<import> en tiempo de compilación.  El C<require> se asegura que el módulo esté cargado en memoria, si todavía no lo está.  El C<import> no es una función predefinida; es sólo una llamada al método estático ordinario en el paquete C<Módulo> para indicar al módulo que importe la lista de características en el paquete actual.  El módulo puede implementar su propio método C<import> de la forma que desee, aunque la mayoría de los módulos sólo eligen derivar su método C<import> vía herencia desde la clase C<Exporter> que se define en el módulo C<Exporter>.  Ver L<Exporter>.  Si no se puede encontrar ningún método C<import> entonces la llamada se pasa por alto, incluso si hay un método AUTOLOAD.

Si no desea llamar al método C<import> del paquete (por ejemplo, para impedir que su espacio de nombres sea alterado), indique, de manera explícita, una lista vacía:

    use Modulo ();

Eso es exactamente equivalente a

    BEGIN { require Módulo }

Si el argumento VERSIÓN está presente entre el Módulo y la LISTA, entonces C<use> llamará al método VERSIÓN en la clase Módulo con la versión dada como argumento.  El método VERSIÓN por defecto, heredado de la clase UNIVERSAL, croa si la versión dada es mayor que el valor de la variable C<$Módulo::VERSIÓN>.

Una vez más, hay una distinción entre omitir LISTA (C<import> llamado sin argumentos) y una explícita LISTA vacía C<()> (C<import> no se llama).  ¡Tenga en cuenta que no hay ninguna coma después de VERSIÓN!

Debido a que esta es una interfaz ampliamente abierta, pragmas (directivas del compilador), también son implementadas de esta manera.  Las pragmas actualmente implementadas son:

    use constant;
    use diagnostics;
    use integer;
    use sigtrap  qw(SEGV BUS);
    use strict   qw(subs vars refs);
    use subs     qw(afunc blurfl);
    use warnings qw(all);
    use sort     qw(stable _quicksort _mergesort);

Algunos de estos pseudo-módulos importa semántica en el ámbito del bloque actual (como C<strict> o C<integer>, a diferencia de los módulos comunes, que importan los símbolos en el paquete actual (que son efectivos hasta el final del archivo).

Dado que C<use> entra en vigor en tiempo de compilación, no respeta el control de flujo de operaciones del código compilado.  En particular, poniendo un C<use> dentro de la rama falsa de un condicional no impide que sea procesado.  Si un módulo o pragma sólo necesita ser cargado en forma condicional, esto se puede hacer uso del pragma L<if>:

    use if $] < 5.008, "utf8";
    use if WANT_WARNINGS, warnings => qw(all);

Existe un correspondiente comando C<no> que des-importa los significados importados por C<use>, es decir, llama a C<unimport Módulo LISTA> en lugar de C<import>.
Se comporta igual que C<import> lo hace con VERSIÓN, con una lista vacía o no, o ningún método unimport será encontrado.

    no integer;
    no strict 'refs';
    no warnings;

Se debe tener cuidado cuando se usa la forma C<no VERSIÓN> de C<no>.  I<Sólo> es para ser usado para asegurarse de que el perl que se está ejecutando es de una versión anterior a su argumento y I<no> para deshacer los efectos colaterales activados por C<use VERSION>.

Ver L<perlmodlib> para una lista de módulos y pragmas estándar.  Ver L<perlrun> para las opciones en línea de comandos C<-M> y C<-m> para Perl que dan la funcionalidad de C<use> en la línea de comandos.

=item utime LISTA
X<utime>

=for Pod::Functions set a file's last access and modify times

Cambia los tiempos de acceso y modificación de cada archivo de una lista de archivos.  Los dos primeros elementos de la lista deben ser los tiempos NUMÉRICOS de acceso y de modificación, y en ese orden.  Devuelve el número de archivos cambiados con éxito.  El tiempo de cambio de inodo de cada archivo se establece en la hora actual.  Por ejemplo, este código tiene el mismo efecto que el comando touch(1) de Unix cuando los archivos <realmente existen> y pertenecen al usuario que ejecuta el programa:

    #!/usr/bin/perl
    $atime = $mtime = time;
    utime $atime, $mtime, @ARGV;

Desde Perl 5.8.0, si los dos primeros elementos de la lista son C<undef>, se llama a la biblioteca del sistema C utime(2) con un segundo argumento nulo.  En la mayoría de los sistemas, esto hará que los tiempos de acceso y modificación del archivo se establezcan a la hora actual (es decir, equivalente al ejemplo anterior) y funcionará incluso en archivos de los cuales usted no tenga permisos de escritura:

    for $archivo (@ARGV) {
	utime(undef, undef, $archivo) 
	    || warn "no puedo tocar $archivo: $!";
    } 

Bajo NFS se utilizará la hora del servidor NFS, no el tiempo de la máquina local.  Si hay un problema de sincronización de tiempos, el servidor NFS y el equipo local tendrán tiempos diferentes.  El comando de Unix touch(1), de hecho, utilizará esta forma en lugar de la que se muestra en el primer ejemplo.

Pasando solo uno de los dos primeros elementos como C<undef> es equivalente a pasar un 0 y no tendrá el efecto descrito cuando ambos son C<undef>.  Esto también desencadena una advertencia de datos no inicializados.

En sistemas que soporten futimes(2), puede pasar identificadores de archivo entre los archivos.  En sistemas que no admiten futimes(2), pasarle un identificador de archivo lanza una excepción.  Identificadores de archivo se deben pasar como comodines o referencias a comodines para que sean reconocidos; las palabras sueltas se consideran como nombres de archivo.

Cuestiones de portabilidad: L<perlport/utime>.

=item values HASH
X<values>

=item values ARRAY

=item values EXPR

=for Pod::Functions return a list of the values in a hash

En contexto de lista, devuelve una lista que consta de todos los valores del hash indicado.  En Perl 5.12 y superiores, también devolverá una lista de los valores de un array; Perl más antiguos considerarán esto como un error de sintaxis.  En contexto escalar, devuelve el número de valores.

Las entradas de un hash son devueltas en un aparente orden aleatorio.  El orden aleatorio real es específico a un hash dado; las mismas series de operaciones en dos hashes pueden resultar en diferentes órdenes para cada hash.  Cualquier inserción en el hash puede cambiar el orden, así como cualquier eliminación, con la excepción de que la clave más reciente devuelta por C<each> o C<keys> puede ser borrada sin que cambie el orden.  Siempre y cuando no se modifique un determinado hash puede confiar en que C<keys>, C<values> y C<each> devuelvan repetidamente lo mismo en el mismo orden.  Vea L<perlsec/"Ataques de complejidad algorítmica"> para los detalles de por qué el orden en un hash se aleatoriza.  Aparte de las garantías proporcionadas aquí los detalles exactos de algoritmo que usa Perl para recorrer un hash está sujeto a cambio en cualquier lanzamiento de Perl.  Hashes enlazados pueden comportarse diferentemente a los hashes de Perl con respecto a los cambios en el orden, en la inserción y borrado de los elementos.

Como efecto colateral, llamando a values() reinicia el iterador interno del HASH o ARRAY (vea L</each>).  (De forma particular, llamando a values() en contexto nulo (void) reinicia el iterador sin otro efecto adicional.  Además de restablecer el iterador, C<values @array> en contexto lista es lo mismo que un simple C<@array>.
(Le recomendamos que para esto utilice el contexto vacío C<keys @array>, pero razonando que quitar C<values @array> exigirá dar más explicaciones que dejarlo tal cual).

Tenga en cuenta que los valores no son copiados, lo que significa que al modificarles modificará el contenido del hash:

    for (values %hash)      { s/foo/bar/g }  # modifica los valores de %hash
    for (@hash{keys %hash}) { s/foo/bar/g }  # lo mismo

A partir de Perl 5.14, C<values> puede tomar una EXPR escalar, que debe contener la referencia a un hash o un array no bendecido.  El argumento es desreferenciado automáticamente.  Este aspecto de C<values> es considerado altamente experimental.  El comportamiento exacto puede cambiar en una futura versión de Perl.

    for (values $hashref) { ... }
    for (values $obj->get_arrayref) { ... }

Para no confundir a los posibles usuarios de su código, que ejecuten versiones anteriores de Perl, con errores de sintaxis misteriosos, ponga este tipo de cosas en la parte superior de su archivo para indicar que el código funciona I<sólo> en versiones Perl de cosechas recientes:

    use 5.012;  # así keys/values/each trabajan sobre arrays
    use 5.014;  # así keys/values/each trabajan sobre escalares (experimental)

Ver también C<keys>, C<each> y C<sort>.

=item vec EXPR,DESPLAZAMIENTO,BITS
X<vec> X<bit> X<bit vector> X<vectores de bit>

=for Pod::Functions test or set particular bits in a string

Trata a la cadena en EXPR como un vector de bits compuesta de elementos de tantos BITS de ancho y devuelve el valor del elemento especificado por el DESPLAZAMIENTO como un entero sin signo.  BITS, por tanto, especifica el número de bits que son reservados para cada elemento en el vector de bits.  Esto debe ser una potencia de dos desde 1 a 32 (o 64, si la plataforma lo admite).

Si BITS es 8, los "elementos" coinciden con bytes de la cadena de entrada.

Si BITS es de 16 o más, los bytes de la cadena de entrada se agrupan en bloques de tamaño BITS/8, y cada grupo es convertido a un número como con pack()/unpack() con formatos big-endian C<n>/C<N> (Y, análogamente para BITS==64).  Ver L<"pack"> para los detalles.

Si bits son 4 o menos, la cadena se divide en bytes, y a continuación, los bits de cada byte se dividen en grupos de 8/BITS.  Los bits de un byte se numeran de la forma little-endian, como en C<0x01>, C<0x02>, C<0x04>, C<0x08>, C<;0x10>, C<0x20>, C<0x40>; C<0x80>.  Por ejemplo, rompiendo el byte de entrada C<chr(0x36)> en dos grupos da una lista C<(0x6, 0x3)>; dividiéndolo en 4 grupos da C<(0x2, 0x1, 0x3, 0x0)>.

C<vec> también puede ser asignado, en cuyo caso los paréntesis son necesarios para dar a la expresión la correcta precedencia, como en

    vec($imagen, $max_x * $x + $y, 8) = 3;

Si el elemento seleccionado se fuera de la cadena, se devuelve el valor 0.
Si se escribe un elemento al final de la cadena, Perl primero extenderá la cadena con una cantidad suficiente de bytes cero.   Es un error tratar de cancelar el principio de la cadena (es decir, DESPLAZAMIENTO negativo).

Si la cadena pasa a ser codificado como UTF-8 de forma interna (y por tanto tiene la bandera UTF8 establecida), esto se ignora por C<vec>, y opera en la cadena de bytes interna, no la cadena de caracteres conceptuales, incluso si sólo tiene caracteres con valores inferiores a 256. 

Cadenas creadas con C<vec> también se pueden manipular con los operadores lógicos C<|>, C<&>, C<^>, y C<~>.  Estos operadores asumirán una operación de vector de bits cuando ambos operandos sean cadenas.
Ver L<perlop/"Operadores de bit en cadenas"> .

El código siguiente construirá una cadena ASCII diciendo C<'PerlPerlPerl'>.
Los comentarios ponen de manifiesto la cadena después de cada etapa.  Tenga en cuenta que este código funciona de la misma manera en máquinas big-endian que little-endian.

    my $foo = '';
    vec($foo,  0, 32) = 0x5065726C; # 'Perl'

    # $foo eq "Perl" eq "\x50\x65\x72\x6C", 32 bits
    print vec($foo, 0, 8);  # imprime 80 == 0x50 == ord('P')

    vec($foo,  2, 16) = 0x5065;    # 'PerlPe'
    vec($foo,  3, 16) = 0x726C;    # 'PerlPerl'
    vec($foo,  8,  8) = 0x50;      # 'PerlPerlP'
    vec($foo,  9,  8) = 0x65;      # 'PerlPerlPe'
    vec($foo, 20,  4) = 2;         # 'PerlPerlPe'   . "\x02"
    vec($foo, 21,  4) = 7;         # 'PerlPerlPer'
                                   # 'r' es "\x72"
    vec($foo, 45,  2) = 3;         # 'PerlPerlPer'  . "\x0c"
    vec($foo, 93,  1) = 1;         # 'PerlPerlPer'  . "\x2c"
    vec($foo, 94,  1) = 1;         # 'PerlPerlPerl'
                                   # 'l' es "\x6c"

Para transformar un vector de bits en una cadena o una lista de 0 y 1, utilice los siguientes:

    $bits = unpack("b*", $vector);
    @bits = split(//, unpack("b*", $vector));

Si conoce la longitud exacta en bits, puede ser utilizada en lugar de la C<*>.

Este es un ejemplo para ilustrar cómo los bits están realmente amparados en su lugar:

  #!/usr/bin/perl -wl

  print <<'EOT';
                                    0         1         2         3
                     unpack("V",$_) 01234567890123456789012345678901
  ------------------------------------------------------------------
  EOT

  for $w (0..3) {
      $ancho = 2**$w;
      for ($shift=0; $shift < $ancho; ++$shift) {
          for ($off=0; $off < 32/$ancho; ++$off) {
              $str = pack("B*", "0"x32);
              $bits = (1<<$shift);
              vec($str, $off, $ancho) = $bits;
              $res = unpack("b*",$str);
              $val = unpack("V", $str);
              write;
          }
      }
  }

  format STDOUT =
  vec($_,@#,@#) = @<< == @######### @>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  $despl, $ancho, $bits, $val, $res
  .
  __END__

Independientemente de la arquitectura de la máquina en la que se ejecuta, el ejemplo anterior debe imprimir el cuadro siguiente:

                                    0         1         2         3
                     unpack("V",$_) 01234567890123456789012345678901
  ------------------------------------------------------------------
  vec($_, 0, 1) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 1) = 1   ==          2 01000000000000000000000000000000
  vec($_, 2, 1) = 1   ==          4 00100000000000000000000000000000
  vec($_, 3, 1) = 1   ==          8 00010000000000000000000000000000
  vec($_, 4, 1) = 1   ==         16 00001000000000000000000000000000
  vec($_, 5, 1) = 1   ==         32 00000100000000000000000000000000
  vec($_, 6, 1) = 1   ==         64 00000010000000000000000000000000
  vec($_, 7, 1) = 1   ==        128 00000001000000000000000000000000
  vec($_, 8, 1) = 1   ==        256 00000000100000000000000000000000
  vec($_, 9, 1) = 1   ==        512 00000000010000000000000000000000
  vec($_,10, 1) = 1   ==       1024 00000000001000000000000000000000
  vec($_,11, 1) = 1   ==       2048 00000000000100000000000000000000
  vec($_,12, 1) = 1   ==       4096 00000000000010000000000000000000
  vec($_,13, 1) = 1   ==       8192 00000000000001000000000000000000
  vec($_,14, 1) = 1   ==      16384 00000000000000100000000000000000
  vec($_,15, 1) = 1   ==      32768 00000000000000010000000000000000
  vec($_,16, 1) = 1   ==      65536 00000000000000001000000000000000
  vec($_,17, 1) = 1   ==     131072 00000000000000000100000000000000
  vec($_,18, 1) = 1   ==     262144 00000000000000000010000000000000
  vec($_,19, 1) = 1   ==     524288 00000000000000000001000000000000
  vec($_,20, 1) = 1   ==    1048576 00000000000000000000100000000000
  vec($_,21, 1) = 1   ==    2097152 00000000000000000000010000000000
  vec($_,22, 1) = 1   ==    4194304 00000000000000000000001000000000
  vec($_,23, 1) = 1   ==    8388608 00000000000000000000000100000000
  vec($_,24, 1) = 1   ==   16777216 00000000000000000000000010000000
  vec($_,25, 1) = 1   ==   33554432 00000000000000000000000001000000
  vec($_,26, 1) = 1   ==   67108864 00000000000000000000000000100000
  vec($_,27, 1) = 1   ==  134217728 00000000000000000000000000010000
  vec($_,28, 1) = 1   ==  268435456 00000000000000000000000000001000
  vec($_,29, 1) = 1   ==  536870912 00000000000000000000000000000100
  vec($_,30, 1) = 1   == 1073741824 00000000000000000000000000000010
  vec($_,31, 1) = 1   == 2147483648 00000000000000000000000000000001
  vec($_, 0, 2) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 2) = 1   ==          4 00100000000000000000000000000000
  vec($_, 2, 2) = 1   ==         16 00001000000000000000000000000000
  vec($_, 3, 2) = 1   ==         64 00000010000000000000000000000000
  vec($_, 4, 2) = 1   ==        256 00000000100000000000000000000000
  vec($_, 5, 2) = 1   ==       1024 00000000001000000000000000000000
  vec($_, 6, 2) = 1   ==       4096 00000000000010000000000000000000
  vec($_, 7, 2) = 1   ==      16384 00000000000000100000000000000000
  vec($_, 8, 2) = 1   ==      65536 00000000000000001000000000000000
  vec($_, 9, 2) = 1   ==     262144 00000000000000000010000000000000
  vec($_,10, 2) = 1   ==    1048576 00000000000000000000100000000000
  vec($_,11, 2) = 1   ==    4194304 00000000000000000000001000000000
  vec($_,12, 2) = 1   ==   16777216 00000000000000000000000010000000
  vec($_,13, 2) = 1   ==   67108864 00000000000000000000000000100000
  vec($_,14, 2) = 1   ==  268435456 00000000000000000000000000001000
  vec($_,15, 2) = 1   == 1073741824 00000000000000000000000000000010
  vec($_, 0, 2) = 2   ==          2 01000000000000000000000000000000
  vec($_, 1, 2) = 2   ==          8 00010000000000000000000000000000
  vec($_, 2, 2) = 2   ==         32 00000100000000000000000000000000
  vec($_, 3, 2) = 2   ==        128 00000001000000000000000000000000
  vec($_, 4, 2) = 2   ==        512 00000000010000000000000000000000
  vec($_, 5, 2) = 2   ==       2048 00000000000100000000000000000000
  vec($_, 6, 2) = 2   ==       8192 00000000000001000000000000000000
  vec($_, 7, 2) = 2   ==      32768 00000000000000010000000000000000
  vec($_, 8, 2) = 2   ==     131072 00000000000000000100000000000000
  vec($_, 9, 2) = 2   ==     524288 00000000000000000001000000000000
  vec($_,10, 2) = 2   ==    2097152 00000000000000000000010000000000
  vec($_,11, 2) = 2   ==    8388608 00000000000000000000000100000000
  vec($_,12, 2) = 2   ==   33554432 00000000000000000000000001000000
  vec($_,13, 2) = 2   ==  134217728 00000000000000000000000000010000
  vec($_,14, 2) = 2   ==  536870912 00000000000000000000000000000100
  vec($_,15, 2) = 2   == 2147483648 00000000000000000000000000000001
  vec($_, 0, 4) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 4) = 1   ==         16 00001000000000000000000000000000
  vec($_, 2, 4) = 1   ==        256 00000000100000000000000000000000
  vec($_, 3, 4) = 1   ==       4096 00000000000010000000000000000000
  vec($_, 4, 4) = 1   ==      65536 00000000000000001000000000000000
  vec($_, 5, 4) = 1   ==    1048576 00000000000000000000100000000000
  vec($_, 6, 4) = 1   ==   16777216 00000000000000000000000010000000
  vec($_, 7, 4) = 1   ==  268435456 00000000000000000000000000001000
  vec($_, 0, 4) = 2   ==          2 01000000000000000000000000000000
  vec($_, 1, 4) = 2   ==         32 00000100000000000000000000000000
  vec($_, 2, 4) = 2   ==        512 00000000010000000000000000000000
  vec($_, 3, 4) = 2   ==       8192 00000000000001000000000000000000
  vec($_, 4, 4) = 2   ==     131072 00000000000000000100000000000000
  vec($_, 5, 4) = 2   ==    2097152 00000000000000000000010000000000
  vec($_, 6, 4) = 2   ==   33554432 00000000000000000000000001000000
  vec($_, 7, 4) = 2   ==  536870912 00000000000000000000000000000100
  vec($_, 0, 4) = 4   ==          4 00100000000000000000000000000000
  vec($_, 1, 4) = 4   ==         64 00000010000000000000000000000000
  vec($_, 2, 4) = 4   ==       1024 00000000001000000000000000000000
  vec($_, 3, 4) = 4   ==      16384 00000000000000100000000000000000
  vec($_, 4, 4) = 4   ==     262144 00000000000000000010000000000000
  vec($_, 5, 4) = 4   ==    4194304 00000000000000000000001000000000
  vec($_, 6, 4) = 4   ==   67108864 00000000000000000000000000100000
  vec($_, 7, 4) = 4   == 1073741824 00000000000000000000000000000010
  vec($_, 0, 4) = 8   ==          8 00010000000000000000000000000000
  vec($_, 1, 4) = 8   ==        128 00000001000000000000000000000000
  vec($_, 2, 4) = 8   ==       2048 00000000000100000000000000000000
  vec($_, 3, 4) = 8   ==      32768 00000000000000010000000000000000
  vec($_, 4, 4) = 8   ==     524288 00000000000000000001000000000000
  vec($_, 5, 4) = 8   ==    8388608 00000000000000000000000100000000
  vec($_, 6, 4) = 8   ==  134217728 00000000000000000000000000010000
  vec($_, 7, 4) = 8   == 2147483648 00000000000000000000000000000001
  vec($_, 0, 8) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 8) = 1   ==        256 00000000100000000000000000000000
  vec($_, 2, 8) = 1   ==      65536 00000000000000001000000000000000
  vec($_, 3, 8) = 1   ==   16777216 00000000000000000000000010000000
  vec($_, 0, 8) = 2   ==          2 01000000000000000000000000000000
  vec($_, 1, 8) = 2   ==        512 00000000010000000000000000000000
  vec($_, 2, 8) = 2   ==     131072 00000000000000000100000000000000
  vec($_, 3, 8) = 2   ==   33554432 00000000000000000000000001000000
  vec($_, 0, 8) = 4   ==          4 00100000000000000000000000000000
  vec($_, 1, 8) = 4   ==       1024 00000000001000000000000000000000
  vec($_, 2, 8) = 4   ==     262144 00000000000000000010000000000000
  vec($_, 3, 8) = 4   ==   67108864 00000000000000000000000000100000
  vec($_, 0, 8) = 8   ==          8 00010000000000000000000000000000
  vec($_, 1, 8) = 8   ==       2048 00000000000100000000000000000000
  vec($_, 2, 8) = 8   ==     524288 00000000000000000001000000000000
  vec($_, 3, 8) = 8   ==  134217728 00000000000000000000000000010000
  vec($_, 0, 8) = 16  ==         16 00001000000000000000000000000000
  vec($_, 1, 8) = 16  ==       4096 00000000000010000000000000000000
  vec($_, 2, 8) = 16  ==    1048576 00000000000000000000100000000000
  vec($_, 3, 8) = 16  ==  268435456 00000000000000000000000000001000
  vec($_, 0, 8) = 32  ==         32 00000100000000000000000000000000
  vec($_, 1, 8) = 32  ==       8192 00000000000001000000000000000000
  vec($_, 2, 8) = 32  ==    2097152 00000000000000000000010000000000
  vec($_, 3, 8) = 32  ==  536870912 00000000000000000000000000000100
  vec($_, 0, 8) = 64  ==         64 00000010000000000000000000000000
  vec($_, 1, 8) = 64  ==      16384 00000000000000100000000000000000
  vec($_, 2, 8) = 64  ==    4194304 00000000000000000000001000000000
  vec($_, 3, 8) = 64  == 1073741824 00000000000000000000000000000010
  vec($_, 0, 8) = 128 ==        128 00000001000000000000000000000000
  vec($_, 1, 8) = 128 ==      32768 00000000000000010000000000000000
  vec($_, 2, 8) = 128 ==    8388608 00000000000000000000000100000000
  vec($_, 3, 8) = 128 == 2147483648 00000000000000000000000000000001

=item wait
X<wait>

=for Pod::Functions wait for any child process to die

Se comporta como wait(2) de su sistema: espera a que un proceso hijo termine y devuelve el PID del proceso que ha fallecido, o C<-1> si no hay procesos hijos.  El estado se devuelve en C<$?> y C<${^CHILD_ERROR_NATIVE}>.
Tenga en cuenta que un valor devuelto de C<-1> podría significar que los procesos hijos se están automáticamente desechando, como se describe en L<perlipc>.

Si utiliza C<wait> en su controlador de $SIG{CHLD}, puede esperar, accidentalmente, por el hijo creado por qx() o system().  Vea L<perlipc> para más detalles.

Cuestiones de portabilidad: L<perlport/wait>.

=item waitpid PID,BANDERAS
X<waitpid>

=for Pod::Functions wait for a particular child process to die

Espera que termine un proceso hijo en particular y devuelve el PID del proceso que ha fallecido, o C<-1> si no existe tal proceso hijo.  En algunos sistemas, un valor de 0 indica que hay procesos en funcionamiento.
El estado se devuelve en C<$?> y C<${^CHILD_ERROR_NATIVE}>.  Si dice

    use POSIX ":sys_wait_h";
    #...
    do {
        $hijo = waitpid(-1, WNOHANG);
    } while $hijo > 0;

entonces usted puede hacer una espera no bloqueante para todos los procesos zombie pendientes.
Espera no bloqueanto está disponible en máquinas que soporten las llamadas del sistema, tanto waitpid(2) como wait4(2).  Sin embargo, esperar por un particular pid con BANDERAS a C<0> está implementado en todas partes.  (Perl emula la llamada al sistema, recordando los valores de estado de los procesos que han salido, pero que todavía no han sido recolectadas por el script Perl).

Tenga en cuenta que en algunos sistemas, un valor devuelto de C<-1> podría significar que los procesos hijos se están automáticamente desechando.  Ver L<perlipc> para más detalles, y para otros ejemplos.

Cuestiones de portabilidad: L<perlport/waitpid>.

=item wantarray
X<wantarray> X<context> X<contexto>

=for Pod::Functions get void vs scalar vs list context of current subroutine call

Devuelve verdadero si el contexto de ejecución de la subrutina actual o C<eval> está buscando por una lista de valores.  Devuelve falso si el contexto está buscando por un escalar.  Devuelve el valor indefinido si el contexto está buscando por ningún valor (contexto void).

    return unless defined wantarray; # no nos molestamos más
    my @a = calculo_complejo();
    return wantarray ? @a : "@a";

El resultado de C<wantarray()> no está especificado en el nivel superior de un archivo, en un C<BEGIN>, C<UNITCHECK>, C<CHECK>, C<INIT> o bloque C<END>, o en un método C<DESTROY>.

Esta función debería haber sido nombrada wantlist().

=item warn LISTA
X<warn> X<warning> X<STDERR> X<avisos>

=for Pod::Functions print debugging info

Imprime el valor de LISTA a STDERR.  Si el último elemento de LISTA no termina en un salto de línea, se añade el archivo/número de línea de texto igual como lo hace C<die>.

Si la salida está vacía y C<$@> ya contiene un valor (típicamente de un eval() anterior) este valor es utilizado después de añadirle C<"\t...caught">.  Esto es útil para mantenerse casi, pero no del todo, similar a C<die>.

Si C<$@> está vacío entonces se usa la cadena C<"Warning: Something's wrong">.

Ningún mensaje se imprime si hay instalado un controlador C<$SIG{__WARN__}>.  Es responsabilidad del controlador tratar el mensaje como lo considere oportuno (como, por ejemplo, convertirlo en un C<die>).  La mayoría de los controladores, por lo tanto, deben hacer los arreglos necesarios para realmente mostrar las advertencias de las que no están preparados para hacer frente, llamando a C<warn> de nuevo en el controlador.  Tenga en cuenta que esto es bastante seguro y no producirá un bucle sin fin, puesto que los enganches C<__WARN__> no son llamados desde el interior de uno mismo.

Usted encontrará que este comportamiento es ligeramente diferente a la de los controladores C<$SIG{__DIE__}> (que no suprimen el texto de error, pero puede llamar, en su lugar, a C<die> de nuevo para cambiarlo).

El uso de un controlador C<__WARN__> proporciona una poderosa manera de silenciar a todas las advertencias (incluso las no menos llamadas obligatorias).  Un ejemplo:

    # limpiar *todas* las advertencias en tiempo de compilación
    BEGIN { $SIG{'__WARN__'} = sub { warn $_[0] if $DOWARN } }
    my $foo = 10;
    my $foo = 20;          # no avisa de un my $foo duplicado,
                           # pero bueno, ¡tú lo has querido así!
    # no advertencias en compilación o ejecución antes de aquí
    $DOWARN = 1;

    # advertencias en ejecución activas desde aquí
    warn "\$foo está vivo y $foo!";     # lo muestra

Vea L<perlvar> para más detalles sobre la configuración de las entradas C<%SIG> y para ver más ejemplos.  Vea el módulo Carp para otros tipos de avisos mediante sus funciones carp() y cluck().

=item write IDENTIFICADOR_ARCHIVO
X<write>

=item write EXPR

=item write

=for Pod::Functions print a picture record

Escribe un registro formateado (posiblemente de varias líneas) al IDENTIFICADOR_ARCHIVO especificado, utilizando el formato asociado con ese archivo.  Por defecto el formato de un archivo es el que tiene el mismo nombre que el identificador de archivo, pero el formato para el canal de salida (vea la función C<select>) se puede establecer de forma explícita mediante la asignación del nombre del formato a la variable C<$~>.

El procesado del comienzo del formulario se maneja de forma automática: si no hay suficiente espacio en la página actual para el registro formateado, la página se desplaza escribiendo un avance de página y se utiliza un formato especial de principio de página para dar formato al encabezado de la nueva página antes de que el registro sea escrito.  De manera predeterminada, el formato de la parte superior de la página es el nombre del identificador de archivo con el sufijo "_TOP" añadido, o "top" en el paquete actual si lo primero no existe.  Esto podría ser un problema con identificadores de archivo autovivificados, pero puede ser configurado de forma dinámico con el formato de su elección mediante la asignación del nombre a la variable C<$^> mientras esté seleccionado el identificador de archivo.  El número de líneas restantes de la página actual está en la variable C<$->, que se puede fijar a C<0> para forzar una nueva página.

Si IDENTIFICADOR_ARCHIVO no está especificado, la salida va al canal predeterminado de salida actual, que suele ser STDOUT, pero puede ser modificado por el operador C<select>.  Si el IDENTIFICADOR_ARCHIVO es una EXPR, entonces la expresión se evalúa y la cadena resultante se utiliza para buscar el nombre del IDENTIFICADOR_ARCHIVO en tiempo de ejecución.  Para más información sobre formatos, vea L<perlform>.

Tenga en cuenta que write I<no> es lo contrario de C<read>.  Por desgracia.

=item y///

=for Pod::Functions transliterate a string

El operador de transliteración.  Igual que C<tr///>.  Vea L<perlop/"Operadores entrecomillados">.

=back

=head2 Referencias externas a identificadores que no son funciones

=head3 perldata

=over

=item __DATA__

=item __END__

Estas palabras clave están documentadas en L<perldata/"Literales especiales">.

=back

=head3 perlmod

=over

=item BEGIN

=item CHECK

=item END

=item INIT

=item UNITCHECK

Estas palabras clave de la fase de compilación están documentadas en L<perlmod/"BEGIN, UNITCHECK, CHECK, INIT y END">.

=back

=head3 perlobj

=over

=item DESTROY

Esta palabra clave de método está documentada en L<perlobj/"Destructores">.

=back

=head3 perlop

=over

=item and

=item cmp

=item eq

=item ge

=item gt

=item le

=item lt

=item ne

=item not

=item or

=item x

=item xor

Estos operadores están documentados en L<perlop>.

=back

=head3 perlsub

=over

=item AUTOLOAD

Esta palabra clave está documentada en L<perlsub/"Autocarga">.

=back

=head3 perlsyn

=over

=item else

=item elsif

=item for

=item foreach

=item if

=item unless

=item until

=item while

Estas palabras clave de control de flujo están documentadas en L<perlsyn/"Instrucciones complejas">.

=item elseif

La palabra "else if" se escribe como C<elsif> en Perl.  No existe ni C<elif> ni C<else if>.  Interpreta C<elseif>, pero solo para avisarle de que no debe usarlo.

Vea la documentación sobre las palabras clave de control de flujo en L<perlsyn/"Instrucciones complejas">.

=back

=over

=item valor predeterminado

=item given

=item when

Estas palabras clave de control de flujo relacionadas con la función experimental switch están documentadas en L<perlsyn/"Instrucciones switch">.

=back

=cut
