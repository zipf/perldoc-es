=head1 NOMBRE

perlvar - Variables predefinidas de Perl

=head1 DESCRIPCIÓN

=head2 La sintaxis de los nombres de variables

En Perl, los nombres de variable pueden tener varios formatos.  Generalmente empiezan por una letra o un guión bajo, en cuyo caso pueden tener una longitud arbitraria (hasta un límite interno de 251), y muchos contienen letras, dígitos, guiones bajos o la secuencia especial C<::> o C<'>.  En este caso, se usa la parte que hay antes del último C<::> o
C<'> como I<calificador del paquete>; vea L<perlmod>.

Los nombres de variables Perl también pueden estar formados por una secuencia de dígitos o un solo signo de puntuación o carácter de control (siendo obsoleta la forma del carácter de control literal).  Todos estos nombres están reservados para usos especiales en Perl; por ejemplo, los nombres formados exclusivamente por dígitos se usan para almacenar datos capturados por ///backreferences detectadas por una expresión regular.  Perl tiene una sintaxis especial para los nombres de un solo carácter de control: entiende que C<^X> (acento circunflejo-C<X>) representa al carácter de control-C<X>.  Por ejemplo, la notación C<$^W> (signo de dólar, acento circunflejo, C<W>) es la variable escalar cuyo nombre es el carácter de control-C<W>.  Esto es mejor que escribir control-C<W> de forma literal, en su programa.

Desde la versión Perl v5.6.0, los nombres de variables en Perl pueden ser cadenas alfanuméricas que empiecen por un circunflejo (o un carácter de control, pero esta forma es obsoleta).
Estas variables deben escribirse con la sintaxis C<${^Foo}>; las llaves no son opcionales.  C<${^Foo}> denota la variable escalar cuyo nombre es un control-C<F> seguido por dos C<o>.  Estas variables están reservadas para futuros usos especiales de Perl, a excepción de los que comienzan con C<^_> (control-guión bajo o acento circunflejo-guión bajo).  Ningún nombre de carácter de control que comience con C<^_> adquirirá un significado especial en cualquier futura versión de Perl; por lo tanto, estos nombres se pueden usar con seguridad en los programas actuales.  C<$^_>, sin embargo, I<está> reservada.

Los identificadores de Perl que comienzan con dígitos, caracteres de control, o caracteres de puntuación están exentos de los efectos de la declaración C<package> y siempre están obligados a estar en el paquete C<main>; también están exentos de los errores de C<strict 'vars'>.  Otros pocos nombres más también están exentos de esas reglas:

    ENV      STDIN
    INC      STDOUT
    ARGV     STDERR
    ARGVOUT
    SIG

En particular, las variables especiales C<${^_XYZ}> se considera que están siempre en el paquete C<main>, independientemente de cualquier declaración C<package> en el ámbito actual.

=head1 VARIABLES ESPECIALES

Los nombres siguientes tienen un significado especial en Perl.  La mayoría de los nombres de las variables con caracteres de puntuación tienen mnemónicos razonables, o análogos de los shells.
Sin embargo, si desea utilizar los nombres largos de las variable, sólo tiene que decir:

    use English;

al principio del programa.  Esto crea alias cortos, de los nombres largos, en el paquete actual.  Algunos incluso tienen nombres de tamaño medio tomados, en general, de B<awk>.  Para más información, por favor vea L<English>.

Antes de continuar, preste atención al orden de las variables.  En general, primero listamos las variables de una forma independiente del tamaño de caja, casi en orden lexicográfico (ignorando los C<{> y C<^> precedentes, como en C<${^UNICODE}> o C<$^T>), aunque C<$_> y C<@_> aparezcan al principio.
Para las variables con el mismo identificador, las listamos en orden de escalar, array, hash y palabra suelta.

=head2 Variables generales

=over 8

=item $ARG

=item $_
X<$_> X<$ARG>

La entrada por defecto y el espacio de búsqueda de patrones.  Los pares siguientes son equivalentes:

    while (<>) {...}    # ¡sólo equivalente con while!
    while (defined($_ = <>)) {...}

    /^Subject:/
    $_ =~ /^Subject:/

    tr/a-z/A-Z/
    $_ =~ tr/a-z/A-Z/

    chomp
    chomp($_)

En los siguientes lugares, Perl usará C<$_> aunque no se especifique en el programa:

=over 3

=item *

Las siguientes funciones usan C<$_> como argumento predeterminado:

abs, alarm, chomp, chop, chr, chroot, cos, defined, eval, evalbytes, exp, fc, glob, hex, int, lc, lcfirst, length, log, lstat, mkdir, oct, ord, pos, print, printf, quotemeta, readlink, readpipe, ref, require, reverse (sólo en contexto escalar), rmdir, say, sin, split (por su segundo argumento), sqrt, stat, study, uc, ucfirst, unlink, unpack.

=item *

Todos los test de archivo (C<-f>, C<-d>) excepto para C<-t>, cuyo valor por defecto es STDIN.
Vea L<perlfunc/-X>

=item *

Las operaciones de coincidencia de patrones C<m//>, C<s///> y C<tr///> (alias C<y///>) cuando se usan sin un operador C<=~>.

=item *

La variable de iteración por defecto en un bucle C<foreach> si no se indica ninguna otra variable.

=item *

La variable de iteración implícita en las funciones C<grep()> y C<map()>.

=item *

La variable implícita de C<given()>.

=item *

El lugar por defecto para poner el siguiente valor o un registro de entrada cuando se comprueba por sí mismo el resultado de una operación C<< <FH> >>, C<readline>, C<readdir> o C<each>, es cuando aparece como el único criterio de un test C<while>.  Esto no ocurrirá, fuera de un test C<while>.

=back

C<$_> es por defecto una variable global.  Sin embargo, a partir de perl 5.10.0, puede utilizar una versión léxica de C<$_> declarándola en un archivo o en un bloque con C<my>.  Por otra parte, declarando C<our $_>, restaura la C<$_> global en el ámbito actual.  Aunque esto parezca una buena idea en el momento en que se presentó, una C<$_> léxica causa de hecho más problemas que los que soluciona.  Si llama a una función que espera información pasada a través de C<$_>, puede o no funcionar, dependiendo de cómo la función esté escrita, no existiendo una manera sencilla de solucionarlo.  Simplemente evite las variables léxicas C<$_>, a no ser que se sienta masoquista.  Por esta razón, una C<$_> léxica sigue siendo experimental y producirá una advertencia a menos que deshabilite las advertencias.  Como con otras características experimentales, el comportamiento de C<$_> léxica está sujeto a cambios sin previo aviso, incluyendo el cambio a que sea un error fatal.

Mnemónico: guión bajo es lo "supuesto" en ciertas operaciones.

=item @ARG

=item @_
X<@_> X<@ARG>

Dentro de una subrutina, el array C<@_> contiene los parámetros pasados a esa subrutina.  Dentro de una subrutina, C<@_> es el array por defecto para los operadores de array C<push>, C<pop>, C<shift> y C<unshift>.

Vea L<perlsub>.

=item $LIST_SEPARATOR

=item $"
X<$"> X<$LIST_SEPARATOR>

Cuando un array o una porción de un array se interpola en una cadena entre comillas dobles o de un contexto similar, tales como C</.../>, sus elementos se separan con este valor.  El valor predeterminado es un espacio.  Por ejemplo, esto:

    print "El array es: @array\n";

es equivalente a:

    print "El array es: " . join($", @array) . "\n";

Mnemónico: funciona en contexto doblemente entrecomillado.

=item $PROCESS_ID

=item $PID

=item $$
X<$$> X<$PID> X<$PROCESS_ID>

El número de proceso de Perl ejecutando este script.  A pesar de que I<puede> darle un valor a esta variable, por lo general se desaconseja hacerlo, aunque puede resultar muy útil para algunas comprobaciones de pruebas.  Será restablecido automáticamente a través de las llamadas C<fork()>.

Nota para los usuarios de Linux Debian GNU/kFreeBSD: Antes de Perl v5.16.0, perl podría emular la semántica POSIX en sistemas Linux usando LinuxThreads, una implementación parcial de POSIX Threads que desde entonces ha sido reemplazada por la I<Native POSIX Thread Library> (NPTL).

LinuxThreads es ahora obsoleto en Linux, y cachear C<getpid()> de esta manera hace incrustar perl innecesariamente complejo (debido a que tendrá que actualizar manualmente el valor de $$), así que ahora C<$$> y C<getppid()> siempre devolverán los mismos valores que la biblioteca C subyacente.

Sistemas Debian GNU/kFreeBSD también usan LinuxThreads hasta la versión 6.0 (inclusive), pero después se trasladó a la semántica de hilos de FreeBSD, que es parecida a la POSIX.

Para ver si su sistema está afectado por esta discrepancia compruebe si C<getconf GNU_LIBPTHREAD_VERSION | grep -q NPTL> devuelve un valor falso.  Los hilos NTPL preservan la semántica POSIX.

Mnemónico: lo mismo que en los shell.

=item $PROGRAM_NAME

=item $0
X<$0> X<$PROGRAM_NAME>

Contiene el nombre del programa que se está ejecutando.

En algunos sistemas operativos (pero no todos) asignar a C<$0> modifica la zona de argumentos que el programa C<ps> ve.  En algunas plataformas puede que tenga que utilizar opciones especiales de C<ps> o un diferente C<ps> para ver los cambios.  La modificación de C<$0> es más útil como una forma de indicar el estado del programa actual que como ocultar el programa que se está ejecutando.

Tenga en cuenta que existen limitaciones específicas de la plataforma sobre la longitud máxima de C<$0>.  En el caso más extremo puede estar limitado al espacio ocupado por el C<$0> original.

En algunas plataformas puede existir una cantidad arbitraria de relleno, por ejemplo caracteres de espacio, después del nombre modificado al ser mostrado por C<ps>.
En algunas plataformas el relleno puede extenderse por todo el largo de la longitud original del área de argumentos, sin importar lo que haga (este es el caso, por ejemplo, de Linux 2.2).

Nota para los usuarios de BSD: modificar C<$0> no elimina por completo "perl" de la salida de ps(1).  Por ejemplo, la modificación de C<$0> en C<"foobar"> puede resultar C<"perl: foobar (perl)"> (el que salga el prefijo C<"perl:"> y el sufijo "(perl)" depende de la variante y de versión exacta de BSD).  Esta es una característica del sistema operativo, Perl no puede evitarlo.

En los scripts multihebra Perl coordina los hilos de manera que cualquier hilo puede modificar su copia de C<$0> y el cambio se hace visible para ps(1) (suponiendo que el sistema operativo juegue limpio).  Tenga en cuenta que la visión de C<$0> desde los otros hilos no va a cambiar, ya que tienen sus propias copias de ella misma.

Si el programa se ha entregado a perl a través de las opciones C<-e> o C<-E>, C<$0> contendrá la cadena C<"-e">.

En Linux, con perl 5.14.0, el nombre heredado del proceso se establecerá con L<prctl(2)>, además de alterar el nombre a través de POSIX C<argv[0]> al igual a como perl lo ha hecho desde la versión 4.000.  Ahora las utilidades del sistema que lean el nombre del proceso, tales como ps, top y killall reconocerán el nombre asignado a C<$0>.  La cadena que suministre será recortada a 16 bytes, que es una limitación impuesta por Linux.

Mnemónico: lo mismo que en B<sh> y B<ksh>.

=item $REAL_GROUP_ID

=item $GID

=item $(
X<$(> X<$GID> X<$REAL_GROUP_ID>

El gid real de este proceso.  Si está en una máquina que soporta la pertenencia a varios grupos al mismo tiempo, devuelve una lista separada por espacios de los grupos a los que pertenece.  El primer número es el devuelto por C<getgid()>, y los siguientes por C<getgroups()>, uno de los cuales pueden ser el mismo que el del primer número.

Sin embargo, un valor que se asigna a C<$(> debe ser un único número que se utiliza para establecer el gid real.  Así que el valor devuelto por C<$(> I<no> debe ser vuelto a asignar a C<$(> sin pasar antes por un proceso forzoso de conversión a valor numérico, por ejemplo, añadiendo un cero.  Tenga en cuenta que esto es diferente al gid efectivo (C<$)>) que toma una lista.

Puede cambiar tanto el gid real y el gid efectivo, al mismo tiempo, mediante el uso de C<POSIX::setgid()>.  Cambios en C<$(> requiere una verificación de C<$!> para detectar posibles errores después de un intento de cambio.

Mnemónico: los paréntesis se utilizan para I<agrupar> cosas.  El gid real es el grupo al que realmente usted I<pertenece>, si está usando setgid.

=item $EFFECTIVE_GROUP_ID

=item $EGID

=item $)
X<$)> X<$EGID> X<$EFFECTIVE_GROUP_ID>

El gid efectivo del proceso.  Si está en una máquina que soporta la pertenencia a varios grupos al mismo tiempo, devuelve una lista separada por espacios de los grupos a los que pertenece.  El primer número es el devuelto por C<getgid()>, y los siguientes por C<getgroups()>, uno de los cuales pueden ser el mismo que el del primer número.

Del mismo modo, un valor asignado a C<$)> también debe ser una lista de números separada por espacios.  El primer número establece el gid efectivo, y el resto (si existe) se pasan a C<setgroups()>.  Para obtener el efecto de una lista vacía para C<setgroups()>, sólo tiene que repetir el nuevo gid efectivo; es decir, obligar a que un gid efectivo de 5 y una lista C<setgroups()> efectivamente vacía, diga C< $) = "5 5">.

Puede cambiar tanto el gid efectivo y el gid real, al mismo tiempo, mediante el uso de C<POSIX::setgid()> (utilice únicamente un solo argumento numérico).
Cambios en C<$)> requieren de una verificación de C<$!> para detectar posibles errores después de un intento de cambio.

C<< $< >>, C<< $> >>, C<$(> y C<$)> solo pueden ser establecidos en máquinas que soporten la correspondiente rutina I<set[re][ug]id()>.  C<$(> y C<$)> pueden ser intercambiados en máquinas con soporte de C<setregid()>.

Mnemónico: los paréntesis se utilizan para I<agrupar> cosas.  El gid efectivo es el grupo que es el I<correcto> para usted, si usted está ejecutando setgid.

=item $REAL_USER_ID

=item $UID

=item $<
X<< $< >> X<$UID> X<$REAL_USER_ID>

El uid real de este proceso.  Puede cambiar tanto el uid real y el uid efectivo al mismo tiempo, mediante el uso de C<POSIX::setuid()>.  Dado que los cambios a C<< $< >> requieren de una llamada al sistema, compruebe C<$!> después de un intento de cambio para detectar posibles errores.

Mnemónico: es el uid del que usted I<viene>, si se está ejecutando con setuid.

=item $EFFECTIVE_USER_ID

=item $EUID

=item $>
X<< $> >> X<$EUID> X<$EFFECTIVE_USER_ID>

El uid efectivo de este proceso.  Por ejemplo:

    $< = $>;            # pone el uid real a efectivo
    ($<,$>) = ($>,$<);  # intercambia los uid real y efectivo

Puede cambiar tanto el uid real y el uid efectivo al mismo tiempo, mediante el uso de C<POSIX::setuid()>.  Cambios en C<< $> >> requieren de una verificación de C<$!> para detectar posibles errores después de un intento de cambio.

C<< $< >> y C<< $> >> pueden ser intercambiados en máquinas con soporte de C<setregid()>.

Mnemónico: es el uid al que usted I<va>, si se está ejecutando con setuid.

=item $SUBSCRIPT_SEPARATOR

=item $SUBSEP

=item $;
X<$;> X<$SUBSEP> X<SUBSCRIPT_SEPARATOR>

El separador de subíndice para la emulación de array multidimensionales.  Si se refiere a un elemento hash como

    $foo{$x,$y,$z}

realmente significa

    $foo{join($;, $x, $y, $z)}

Pero no ponga

    @foo{$x,$y,$z}	# una porción -fíjese en el @-

que significa

    ($foo{$x},$foo{$y},$foo{$z})

El valor predeterminado es "\034", el mismo que SUBSEP en B<awk>.  Si sus claves contienen datos binarios quizás no exista un valor seguro para C<$;>.

Considere el uso de array multidimensionales "reales" como se describe en L<perllol>.

Mnemónico: la coma (el separador sintáctico de subíndices) es un punto y coma.

=item $a

=item $b
X<$a> X<$b>

Variables especiales del paquete cuando se usa C<sort()>; vea L<perlfunc/sort>.
Debido a su carácter especial, C<$a> y C<$b> no tienen que ser declaradas (usando C<use vars>, u C<our()>) incluso cuando se utiliza el pragma C<strict 'vars'>.  No las localice C<my $a> o C<my $b> si quiere utilizarlos en el bloque o función de comparación de C<sort()>.

=item %ENV
X<%ENV>

El hash C<%ENV> contiene el entorno actual.  Establecer un valor en C<ENV> cambia el entorno para todos los procesos hijo que lance con C<fork()>.

A partir de v5.18.0, tanto las claves como los valores se almacenan en C<%ENV> en forma de cadenas de caracteres.

    my $foo = 1;
    $ENV{'bar'} = \$foo;
    if( ref $ENV{'bar'} ) {
        say "Comportamiento Pre 5.18.0";
    } else {
        say "Comportamiento Post 5.18.0";
    }

Anteriormente, sólo los procesos hijo recibían valores convertidos en cadenas de caracteres:

    my $foo = 1;
    $ENV{'bar'} = \$foo;

    # Siempre imprimió 'non ref'
    system($^X, '-e',
           q/print ( ref $ENV{'bar'}  ? 'ref' : 'non ref' ) /);

Esto pasa porque realmente no puede compartir estructuras arbitrarias de datos con procesos desconocidos.

=item $OLD_PERL_VERSION

=item $]
X<$]> X<$OLD_PERL_VERSION>

La revisión, versión y la subversión del intérprete de Perl, representado como un decimal de la forma 5.XXXYYY, donde XXX es la versión / 1e3, e YYY es la subversión / 1e6.  Por ejemplo, Perl v5.10.1 sería "5.010001".

Esta variable se puede usar para determinar si el intérprete de Perl que ejecuta un script está en el rango correcto de versiones:

    warn "No PerlIO\n" if $] lt '5.008';

Cuando compare C<$]>, los operadores de comparación de cadenas son B<altamente recomendados>.  Las limitaciones inherentes de la representación de punto flotante puede, algunas veces, llevar a comparaciones incorrectas para algunos números en algunas arquitecturas.

Vea también la documentación de C<use VERSION> y C<require VERSION>; allí hay una forma conveniente de cómo fallar si el intérprete de Perl en ejecución es demasiado viejo.

Vea L</$^V> para una representación de la versión de Perl como un objeto L<version>, que permite comparaciones de cadena más flexibles.

La principal ventaja de C<$]> sobre C<$^V> es que funciona de la misma manera en cualquier versión de Perl.  Las desventajas son que no es fácil comparar versiones en otros formatos (p. e., literales v-strings, "v1.2.3" u objetos de versión) y comparaciones numéricas pueden, ocasionalmente fallar; es bueno para comprobar cadenas de versión literales y malo para comparar con una variable que no ha sido saneada.

Mnemónico: ¿Esta versión de perl está en el paréntesis correcto?

=item $SYSTEM_FD_MAX

=item $^F
X<$^F> X<$SYSTEM_FD_MAX>

El máximo descriptor de archivos del sistema, normalmente 2.  Los descriptores de archivos del sistema se pasan a procesos ejecutados con C<exec()>, mientras que los descriptores de archivo más altos, no.  También, durante un C<open()> los descriptores de archivos del sistema se conservan incluso si el C<open()> falla (los descriptores de archivos ordinarios se cierran antes de que se intente un C<open()>).  El estado de cerrar-en-ejecución de un descriptor de archivo se decide de acuerdo al valor de C<$^F> cuando el correspondiente archivo, tubería o I<socket> se abra, no en el momento del C<exec()>.

=item @F
X<@F>

El array C<@F> contiene los campos de cada línea leída cuando se activa el modo auto-partir.  Consulte L<perlrun> para ver la opción B<-a>.  Este array es específico del paquete, y se debe declarar o indicar un nombre completo de un paquete si no está dentro del paquete main cuando se ejecuta bajo C<strict 'vars'>.

=item @INC
X<@INC>

El array C<@INC> contiene la lista de lugares en que las construcciones C<do EXPR>, C<require>, o C<use> buscan sus archivos de biblioteca.  En un principio se compone de los argumentos de cualquier opción B<-I> en la línea de comandos, seguido de la biblioteca Perl predeterminada, probablemente F</usr/local/lib/perl>, seguido por ".", para representar el directorio actual.  (no se añadirá "." si el modo I<taint> -contaminado- está activo, tanto por C<-T> como por C<-t>).  Si necesita modificar este comportamiento en tiempo de ejecución, debe utilizar el pragma C<use lib> para conseguir que la biblioteca dependiente de la máquina sea cargada correctamente:

    use lib '/miruta/dirbiblioteca/';
    use AlgunModulo;

También puede insertar enganches en el sistema de inclusión de archivos al poner código Perl directamente en C<@INC>.  Estos enganches pueden ser referencias a subrutinas, referencias de array u objetos bendecidos.  Vea L<perlfunc/require> para más detalles.

=item %INC
X<%INC>

El hash C<%INC> contiene entradas para cada nombre de archivo incluido a través de los operadores C<do>, C<require>, o C<use>.  La clave es el nombre del archivo que ha especificado (con nombres de módulos convertidos en rutas de acceso), y el valor es la ubicación del archivo que fue encontrado.  El operador C<require> utiliza este hash para determinar si un archivo particular ya ha sido incluido.

Si el archivo fue cargado a través de un enganche (por ejemplo, una referencia a subrutina, vea L<perlfunc/require> para una descripción de estos enganches), este enganche es, por defecto, insertado en C<%INC> en lugar de un nombre de archivo.  Nótese, sin embargo, que el enganche puede haber establecido por sí mismo la entrada en C<%INC> para proporcionar algo de información más específica.

=item $INPLACE_EDIT

=item $^I
X<$^I> X<$INPLACE_EDIT>

El valor actual de la extensión "edición in-situ".  Utilice C<undef> para inhabilitar la edición in-situ.

Mnemónico: valor de la opción B<-i>.

=item $^M
X<$^M>

Por defecto, la falta de memoria es un error inevitable, fatal.
Sin embargo, si se compiló adecuadamente, Perl puede utilizar el contenido de C<^M> como un bloque de memoria de emergencia después de C<die()> (morir).  Supongamos que su Perl se compila con C<-DPERL_EMERGENCY_SBRK> y utiliza el malloc del Perl.
Entonces

    $^M = 'a' x (1 << 16);

asignaría un búfer de 64K para usarse en caso de emergencia.  Vea el archivo F<INSTALL> en la distribución Perl para obtener información sobre cómo añadir indicadores de compilación C personalizados al compilar perl.  Para desalentar el uso casual de este sistema avanzado, no existe un nombre largo en L<English|English> para esta variable.

Esta variable se incorporó en Perl 5.004.

=item $OSNAME

=item $^O
X<$^O> X<$OSNAME>

El nombre del sistema operativo bajo el cual se compiló esta copia de Perl, determinado durante el proceso de configuración.  Para ejemplos, vea L<perlport/PLATAFORMAS>.

El valor es idéntico al de C<$Config{'osname'}>.  Vea también L<Config> y la opción de línea de comandos B<-V>, documentados en L<perlrun>.

En las plataformas Windows, C<$^0> no es muy útil ya que siempre es C<MSWin32>, sin diferenciar entre 95/98/ME/NT/2000/XP/CE/.NET.  Use C<Win32::GetOSName()> o Win32::GetOSVersion() (vea L<Win32> y L<perlport>) para distinguir entre las distintas variantes.

Esta variable se incorporó en Perl 5.003.

=item %SIG
X<%SIG>

El hash C<%SIG> contiene los identificadores de señal para el procesamiento de señales.  Por ejemplo:

    sub gestor {   # el primer argumento es el nombre de la señal
	my($sig) = @_;
	print "Cazada una señal SIG$sig: apagando\n";
	close(LOG);
	exit(0);
	}

    $SIG{'INT'}  = \&identificador;
    $SIG{'QUIT'} = \&identificador;
    ...
    $SIG{'INT'}  = 'DEFAULT';   # restaura la acción por defecto
    $SIG{'QUIT'} = 'IGNORE';    # ignorar SIGQUIT

De forma general, utilizando el valor C<'IGNORE'> tiene el efecto de ignorar la señal, excepto para la señal C<CHLD>.  Vea L<perlipc> para más información sobre este caso especial.

Aquí hay algunos otros ejemplos:

    $SIG{"PIPE"} = "Fontanero"; # asume main::Fontanero (no
				# recomendado)
    $SIG{"PIPE"} = \&Fontanero; # bien; asume un actual
				# Fontanero
    $SIG{"PIPE"} = *Fontanero;  # algo esotérico
    $SIG{"PIPE"} = Fontanero(); # ¡Uy! ¿Qué es lo que el Fontanero()
				# devuelve?

Asegúrese de no utilizar una palabra suelta como nombre de un controlador de señal, no sea que sin querer lo llame.

Si su sistema tiene la función C<sigaction()>, entonces los gestores de señales instalados la usarán.  Esto significa que obtiene un manejo de señales fiable.

La política predeterminada de entrega de señales cambió en Perl v5.8.0, de "inmediato" (también conocido como "inseguro") a "diferido", también conocido como "señales seguras".  Vea L<perlipc> para más información.

Algunos enganches internos también se pueden establecer mediante el hash C<%SIG>.  La rutina indicada por C<$SIG{__WARN__}> se llama cuando un mensaje de advertencia está a punto de ser impreso.  El mensaje de advertencia se pasa como primer argumento.  La presencia de un enganche en C<__WARN__> hace que se suprima la impresión normal de las advertencias hacia C<STDERR>.  Puede usar esto para salvar las advertencias en una variable, o convertir las advertencias en errores fatales, como este:

    local $SIG{__WARN__} = sub { die $_[0] };
    eval $programilla;

Como el enganche C<'IGNORE'> no está soportado por C<__WARN__>, puede deshabilitar las advertencias utilizando la subrutina vacía:

    local $SIG{__WARN__} = sub {};

La rutina indicada por C<$SIG{__DIE__}> se llama cuando una excepción grave está a punto de ser lanzada.  El mensaje de error se pasa como primer argumento.  Cuando una rutina enganchada en C<__DIE__> regresa, el procesamiento de la excepción continúa como si no existiera el enganche, a menos que la rutina enganchada termine a través de un C<goto &sub>, la salida de un bucle, o un C<die()>.  El gestor de C<__DIE__> está explícitamente inhabilitado durante la llamada, para que pueda morir desde un controlador C<__DIE__>.  Lo mismo para C<__WARN__>.

Debido a un fallo de implementación, el enganche C<$SIG{__DIE__}> se llama incluso dentro de un C<eval()>.  No lo utilice para volver a reescribir una excepción pendiente en C<$@>, o como un sustituto extraño para sobreescribir C<CORE::GLOBAL::die()>.  Esta acción extraña se arreglará en una futura versión de manera que C<$SIG{__DIE__}> sólamente se llamará si el programa está a punto de terminar, como era la intención original.  Cualquier otro uso es obsoleto.

Los gestores C<__DIE__>/C<__WARN__> son muy especiales, en un aspecto: pueden llamarse para informar de (posibles) errores encontrados por el analizador léxico.  En tal caso, el analizador léxico puede estar en estado de incoherencia, por lo que cualquier intento de evaluar código Perl desde tales gestores probablemente resultará en una violación de segmento.  Esto significa que las advertencias o errores que se deriven del análisis léxico de Perl se deberían usar con extrema precaución, por ejemplo:

    require Carp if defined $^S;
    Carp::confess("Algo va mal") if defined &Carp::confess;
    die "Algo va mal, pero no puedo cargar Carp para devolver "
      . "la pila de llamadas...\n\t"
      . "Para verla, intente arrancar Perl con la opción -MCarp";

Aquí, la primera línea cargará C<Carp> I<excepto> si es el analizador léxico quien llama al gestor.  La segunda línea imprimirá la traza de llamadas y morirá si C<Carp> estaba disponible.  La tercera línea se ejecutará sólo si C<Carp> no estuviera disponible.

El tener que pensar ni siquiera en la variable C<$^S> en sus gestores de excepción es, simplemente, erróneo.  C<$SIG{__DIE__}>, tal como está actualmente implementado, es una dolorosa y difícil solución para localizar errores.  Evítelo y use en su lugar un C<END{}> o sobreescriba un Core::GLOBAL::die.

Vea L<perlfunc/die>, L<perlfunc/warn>, L<perlfunc/eval> y L<warnings> para obtener información adicional.

=item $BASETIME

=item $^T
X<$^T> X<$BASETIME>

El momento en que se inició el programa en ejecución, en segundos desde la época UNIX (principios de 1970).  Los valores devueltos por las pruebas de archivo B<-M>, B<-A> y B<-C> se basan en este valor.

=item $PERL_VERSION

=item $^V
X<$^V> X<$PERL_VERSION>

La revisión, versión y la subversión del intérprete de Perl, representado como un objeto L<version>.

Esta variable apareció por primera vez en perl v5.6.0; las versiones anteriores de perl verán un valor indefinido.  Antes de perl v5.10.0, C<$^V> se representaba como un v-string en lugar de un objeto L<version>.

C<$^V> se puede utilizar para determinar si el intérprete de Perl, al ejecutar una secuencia de comandos, está en el intervalo correcto de número de versiones.  Por ejemplo:

    warn "¡Hashes no aleatorios!\n" if !$^V or $^V lt v5.8.1

Mientras que la sobrecarga de la conversión a cadena de objetos de versión, para convertir de forma portable C<$^V> en su representación de cadena, use la conversión C<"%vd"> de C<sprintf()>, que trabaja tanto para v-strings como objetos de versión:

    printf "versión es v%vd\n", $^V;  # Versión de Perl

Consulte la documentación de C<use VERSION> y C<require VERSION> para ver una forma correcta de cómo fallar si el intérprete de Perl es demasiado viejo.

Vea también C<$]> para una representación decimal de la versión de Perl.

La principal ventaja de C<$^V> sobre C<$]> es que, para Perl v5.10.0 o superior, sobrecarga operadores, permitiendo una fácil comparación contra otras representaciones de versión (p. e. decimal, cadenas v-string, "v1.2.3" u objetos).  La desventaja es que antes de v5.10.0, solo era una cadena literal v-string, que no es fácil de imprimir o comparar.

Mnemónico: use ^V para un objeto de versión.

=item ${^WIN32_SLOPPY_STAT}
X<${^WIN32_SLOPPY_STAT}> X<sitecustomize> X<sitecustomize.pl>

Si esta variable se establece en un valor verdadero, entonces C<stat()> en Windows no intentará abrir el archivo.  Esto significa que el número de enlace no se puede determinar y los atributos de archivo pueden estar desincronizados en cuanto a la fecha, si existen enlaces duros adicionales al archivo.  Por otro lado, no abrir el archivo es considerablemente más rápido, especialmente para los archivos en unidades de red.

Esta variable se podría establecer en el archivo F<sitecustomize.pl> para configurar la instalación local de Perl para que utilice un "descuidado" C<stat()>, de forma predeterminada.  Consulte la documentación de B<-f> en L<perlrun|perlrun/"Opciones de comando"> para obtener más información acerca de la personalización del sitio.

Esta variable se incorporó en Perl 5.10.0.

=item $EXECUTABLE_NAME

=item $^X
X<$^X> X<$EXECUTABLE_NAME>

El nombre que se utiliza para ejecutar la copia actual de Perl, desde el C<argv[0]> del C, o (donde esté soportado) F</proc/self/exe>.

Dependiendo del sistema operativo anfitrión, el valor de C<$^X> puede ser una ruta relativa o absoluta del archivo del programa perl, o puede ser la cadena que se utiliza para invocar perl, pero sin la ruta del archivo del programa perl.  Además, la mayoría de los sistemas operativos permiten la invocación de los programas que no están en la variable de entorno PATH, por lo que no hay garantía de que el valor de C<$^X> esté en el PATH.  Para VMS, el valor puede o no incluir un número de versión.

Generalmente, puede usar el valor de C<$^X> para volver a invocar una copia independiente del mismo perl que se está ejecutando, por ejemplo,

    @primera_ejecucion = `$^X -le "print int rand 100 for 1..100"`;

Pero recuerde que no todos los sistemas operativos son compatibles con fork() o con la captura de la salida de los comandos, por lo que esta compleja declaración quizás no sea portátil.

No es seguro usar el valor de C<$^X> como un nombre de ruta de un archivo, ya que algunos sistemas operativos que tienen un sufijo obligatorio en los archivos ejecutables no requieren el uso del sufijo al invocar un comando.  Para convertir el valor de C<$^X> a un nombre de ruta, utilice las siguientes instrucciones:

    # Generar un conjunto de nombres de archivo (no de nombres de comandos).
    use Config;
    my $este_perl = $^X;
    if ($^O ne 'VMS') {
	$este_perl .= $Config{_exe}
	  unless $este_perl =~ m/$Config{_exe}$/i;
	}

Debido a que muchos sistemas operativos permiten a cualquier persona con acceso de lectura al archivo de programa en Perl para hacer una copia de él, parchear la copia y, a continuación, ejecutar la copia, el programador de Perl consciente de la seguridad debe tener cuidado de invocar la copia instalada de perl, no la copia referenciada por C<$^X>.  Las siguientes declaraciones logran este objetivo, y producen una ruta que puede ser invocada como un comando o referenciada como un archivo.

    use Config;
    my $ruta_segura_perl= $Config{perlpath};
    if ($^O ne 'VMS') {
	$ruta_segura_perl .= $Config{_exe}
	    unless $ruta_segura_perl =~ m/$Config{_exe}$/i;
	}

=back

=head2 Variables relacionadas con las expresiones regulares

La mayoría de las variables especiales relacionadas con las expresiones regulares tienen efectos secundarios.  Perl establece estas variables cuando se tiene una coincidencia exitosa, por lo que debería comprobar el resultado de la coincidencia antes de usarlas.  Por ejemplo:

    if( /P(A)TR(O)N/ ) {
	print "Encontré $1 y $2\n";
	}

Estas variables son de sólo lectura y dinámicamente ajustadas a su ámbito, a menos que se indique lo contrario.

La naturaleza dinámica de las variables de expresión regular significa que su valor se limita al bloque en que se encuentra, como se demuestra por este trozo de código:

    my $externo = 'Wallace y Grommit';
    my $interno = 'Mutt y Jeff';

    my $patron = qr/(\S+) y (\S+)/;

    sub muestra { print "\$1 es $1; \$2 es $2\n" }

    {
    EXTERNO:
	muestra() if $externo =~ m/$patron/;

	INTERNO: {
	    muestra() if $interno =~ m/$patron/;
	    }

	muestra();
    }

El resultado muestra que mientras se esté en el bloque C<EXTERNO>, los valores de C<$1> y C<$2> son de la coincidencia con C<$externo>.  Dentro del bloque C<INTERNO>, los valores de C<$1> y C<$2> son de la coincidencia con C<$interior>, pero sólo hasta el final del bloque (es decir, en el ámbito dinámico).  Después de que el bloque C<INTERNO> se complete, los valores de C<$1> y C<$2> retornan a los valores para la coincidencia con C<$exterior> a pesar de que no hayamos hecho otra coincidencia:

    $1 es Wallace; $2 es Grommit
    $1 es Mutt; $2 es Jeff
    $1 es Wallace; $2 es Grommit

=head3 Problemas de rendimiento

Tradicionalmente, en Perl, cualquier uso de cualquiera de las tres variables C<$`>, C<$&> o C<$'> (o sus equivalentes de C<use English>) en cualquier lugar del código, provocaba que todas las subsecuentes coincidencias de patrón con éxito crearan una copia de la cadena coincidente, por si el código posterior quisiera acceder a una de estas variables.
Esto imponía una considerable penalización de rendimiento a lo largo de todo el programa, así que, de forma general, se desaconsejaba el uso de estas variables.

En Perl 5.6.0 se introdujeron los array dinámicos C<@-> y C<@+>, que ofrecen índices a las coincidencias exitosas. Así que podría, por ejemplo, hacer esto:

    $cadena =~ /patrón/;

    print $`, $&, $'; # malo: hunde el rendimiento

    print             # bueno: no afecta al rendimiento
	substr($cadena, 0,     $-[0]),
	substr($cadena, $-[0], $+[0]-$-[0]),
	substr($cadena, $+[0]);

En Perl 5.10.0, se introdujeron la opción de operación de coincidencia C</p> y las variables C<${^PREMATCH}>, C<${^MATCH}>, y C<${^POSTMATCH}>, que le permiten sufrir las penalizaciones sólo en los patrones marcados con C</p>.

En Perl 5.18.0 y posteriores, perl empezó a anotar la presencia de cada una de las tres variables por separado, y sólo copia la parte de la cadena que necesita; así que

    $`; $&; "abcdefgh" =~ /d/

perl sólo copiará la parte "abcd" de la cadena. Esto podría marcar una gran diferencia en algo como

    $cadena = 'x' x 1_000_000;
    $&; # ¡Ops!
    $cadena =~ /x/g # un carácter copiado un millón de veces, no un millón de caracteres

En Perl 5.20.0, se activa por defecto un nuevo sistema de copiar-en-escritura, el cual, finalmente, arregla todos los problemas de rendimiento con las tres variables, y se les puede usar con seguridad en cualquier parte.

Los módulos C<Devel::NYTProf> y C<Devel::FindAmpersand> pueden ayudarle a encontrar usos de estas variables problemáticas, en su código.

=over 8

=item $<I<dígitos>> ($1, $2, ...)
X<$1> X<$2> X<$3>

Contiene el sub-patrón del correspondiente conjunto de paréntesis de captura de la última coincidencia de patrón con éxito, sin contar los patrones encontrados en los bloques anidados que ya hayan terminado.

Estas variables son de solo lectura y su ámbito se asigna dinámicamente.

Mnemónico: como \dígitos.

=item $MATCH

=item $&
X<$&> X<$MATCH>

La cadena coincidente en la última coincidencia de patrón con éxito (sin contar las coincidencias ocultas dentro de un BLOQUE o C<eval()> encerrado por el BLOQUE actual).

Vea L</Problemas de rendimiento> más arriba sobre las graves implicaciones de rendimiento al usar esta variable (aunque sea una sola vez) en su código.

Esta variable es de solo lectura y su ámbito se asigna dinámicamente.

Mnemónico: como C<&> en algunos editores.

=item ${^MATCH}
X<${^MATCH}>

Esta es similar a C<$&> (C<$MATCH>) excepto que no se incurrirá en la penalización de rendimiento asociada a esa variable.

Vea L</Problemas de rendimiento> más arriba.

En Perl v5.18 y anteriores, sólo se garantiza que devolverá un valor definido cuando el patrón se compile o se ejecute con el modificador C</p>.  En Perl v5.20, el modificador C</p> no hace nada, así que C<${^MATCH}> hace lo mismo que C<$MATCH>.

Esta variable se incorporó en Perl 5.10.0.

Esta variable es de solo lectura y su ámbito se asigna dinámicamente.

=item $PREMATCH

=item $`
X<$`> X<$PREMATCH> X<${^PREMATCH}>

La cadena que precede a todo lo que corresponde con la última coincidencia de patrón con éxito, sin contar las coincidencias ocultas dentro de un BLOQUE o C<eval> encerrado por el BLOQUE actual.

Vea L</Problemas de rendimiento> más arriba sobre las graves implicaciones de rendimiento al usar esta variable (aunque sea una sola vez) en su código.

Esta variable es de solo lectura y su ámbito se asigna dinámicamente.

Mnemónico: C<`> precede a menudo a una cita.

=item ${^PREMATCH}
X<$`> X<${^PREMATCH}>

Esta es similar a C<$`> (C<$PREMATCH>) excepto que no se incurrirá en la penalización de rendimiento asociada a esa variable.

Vea L</Problemas de rendimiento> más arriba.

En Perl v5.18 y anteriores, sólo se garantiza que devolverá un valor definido cuando el patrón se compile o se ejecute con el modificador C</p>.  En Perl v5.20, el modificador C</p> no hace nada, así que C<${^PREMATCH}> hace lo mismo que C<$PREMATCH>.

Esta variable se incorporó en Perl 5.10.0.

Esta variable es de solo lectura y su ámbito se asigna dinámicamente.

=item $POSTMATCH

=item $'
X<$'> X<$POSTMATCH> X<${^POSTMATCH}> X<@->

La cadena que sigue a todo lo que corresponde con la última coincidencia de patrón con éxito (sin contar las coincidencias ocultas dentro de un BLOQUE o C<eval> encerrado por el BLOQUE actual).  Ejemplo:

    local $_ = 'abcdefghi';
    /def/;
    print "$`:$&:$'\n";  	# imprime abc:def:ghi

Vea L</Problemas de rendimiento> más arriba sobre las graves implicaciones de rendimiento al usar esta variable (aunque sea una sola vez) en su código.

Esta variable es de solo lectura y su ámbito se asigna dinámicamente.

Mnemónico: C<'> sigue a menudo a una cadena entrecomillada.

=item ${^POSTMATCH}
X<${^POSTMATCH}> X<$'> X<$POSTMATCH>

Esta es similar a C<$'> (C<$POSTMATCH>) excepto que no se incurrirá en la penalización de rendimiento asociada a esa variable.

Vea L</Problemas de rendimiento> más arriba.

En Perl v5.18 y anteriores, sólo se garantiza que devolverá un valor definido cuando el patrón se compile o se ejecute con el modificador C</p>.  En Perl v5.20, el modificador C</p> no hace nada, así que C<${^POSTMATCH}> hace lo mismo que C<$POSTMATCH>.

Esta variable se incorporó en Perl 5.10.0.

Esta variable es de solo lectura y su ámbito se asigna dinámicamente.

=item $LAST_PAREN_MATCH

=item $+
X<$+> X<$LAST_PAREN_MATCH>

El texto coincidente con la última captura de la última coincidencia exitosa.
Esto es útil si no sabe con qué patrón de un conjunto de alternativas de patrones ha coincidido.  Por ejemplo:

    /Versión: (.*)|Revisión: (.*)/ && ($rev = $+);

Esta variable es de solo lectura y su ámbito se asigna dinámicamente.

Mnemónico: sea positivo y mire hacia adelante.

=item $LAST_SUBMATCH_RESULT

=item $^N
X<$^N> X<$LAST_SUBMATCH_RESULT>

El texto coincidente con el grupo de captura cerrado más recientemente (es decir, el grupo con el paréntesis de cierre más a la derecha) del último patrón de búsqueda con éxito.

Esto se utiliza sobre todo dentro de bloques C<(?{...})> para el examen de texto recientemente capturado.  Por ejemplo, para pasar de forma eficaz una captura de texto a una variable (además de con C<$1>, C<$2>, C<(...)>, etc.), reemplace C<(...)> con

    (?:(...)(?{ $var = $^N }))

Asignando y luego usando C<$var> de esta forma le libera de tener que preocuparse sobre exactamente cuál era el número de paréntesis en el conjunto de capturas.

Esta variable se incorporó en Perl 5.8.0.

Mnemónico: el paréntesis (posiblemente) anidado cerrado más recientemente.

=item @LAST_MATCH_END

=item @+
X<@+> X<@LAST_MATCH_END>

Este array contiene los desplazamientos a los extremos finales de las últimas subcoincidencias exitosas en el actual ámbito dinámico activo.  C<$+[0]> es el desplazamiento dentro de la cadena del final de la coincidencia entera.  Este es el mismo valor que lo que la función C<pos> devuelve cuando se le llama con la variable con la que se hace la concordancia.  El eI<n>ésimo elemento de este array contiene el desplazamiento de la eI<n>ésima subcoincidencia, por lo que C<$+[1]> es el desplazamiento donde C<$1> termina, C<$+[2]> el desplazamiento donde C<$2> termina, y así sucesivamente.  Puede utilizar C<$#+> para determinar cuántos subgrupos han aparecido con la última coincidencia exitosa.  Vea los ejemplos dados para la C<@->.

Esta variable se incorporó en Perl 5.6.0.

=item %LAST_PAREN_MATCH

=item %+
X<%+> X<%LAST_PAREN_MATCH>

Al igual que C<@+>, el C<%+> hash permite el acceso a los búferes de captura con nombre, que deben existir, en la última coincidencia con éxito en el actual ámbito dinámico activo.

Por ejemplo, C<$+{foo}> es equivalente a C<$1> después de la siguiente coincidencia:

    'foo' =~ /(?<foo>foo)/;

Las claves del hash C<%+> lista sólo los nombres de los búferes que han capturado (y por lo tanto que se asocia a valores definidos).

El comportamiento subyacente de C<%+> es proporcionado por el módulo L<Tie::Hash::NamedCapture>.

B<Nota:> C<%-> y C<%+> están atadas en un hash interno común asociado con la última expresión regular exitosa.  Por lo tanto mezclar un acceso iterativo en ellas a través de C<each> puede tener resultados impredecibles.
Del mismo modo, si la última coincidencia exitosa cambia, entonces los resultados pueden ser sorprendentes.

Esta variable se incorporó en Perl 5.10.0.

Esta variable es de solo lectura y su ámbito se asigna dinámicamente.

=item @LAST_MATCH_START

=item @-
X<@-> X<@LAST_MATCH_START>

C<$-[0]> es el desplazamiento del comienzo de la última coincidencia exitosa.
C<$-[>I<n>C<]> es el desplazamiento del comienzo de la subcadena coincidente por el eI<n>ésimo subpatrón, o indefinido si el subpatrón no coincidió.

Así, después de una concordancia contra C<$_>, C<$&> coincide con C<substr $_, $-[0], $+[0] - $-[0]>.  Del mismo modo, $I<n> coincide con C<substr $_, $-[n], $+[n] - $-[n]> si C<$-[n]> está definida, y $+ coincide con C<substr $_, $-[$#-], $+[$#-] - $-[$#-]>.  Uno puede usar C<$#-> para encontrar el último subgrupo emparejado en la última coincidencia exitosa.  Compárelo con C<$#+>, el número de subgrupos en la expresión regular.  Compárelo con C<@+>.

Este array contiene los desplazamientos a los extremos iniciales de las últimas subcoincidencias exitosas en el actual ámbito dinámico activo.
C<$-[0]> es el desplazamiento dentro de la cadena del principio de la coincidencia entera.  El eI<n>ésimo elemento de este array contiene el desplazamiento de la eI<n>ésima subcoincidencia, por lo que C<$-[1]> es el desplazamiento donde C<$1> comienza, C<$-[2]> el desplazamiento donde C<$2> comienza, y así sucesivamente.

Después de una coincidencia contra una variable como C<$var>:

=over 5

=item C<$`> es lo mismo que C<substr($var, 0, $-[0])>

=item C<$&> es lo mismo que C<substr($var, $-[0], $+[0] - $-[0])>

=item C<$'> es lo mismo que C<substr($var, $+[0])>

=item C<$1> es lo mismo que C<substr($var, $-[1], $+[1] - $-[1])>

=item C<$2> es lo mismo que C<substr($var, $-[2], $+[2] - $-[2])>

=item C<$3> es lo mismo que C<substr($var, $-[3], $+[3] - $-[3])>

=back

Esta variable se incorporó en Perl 5.6.0.

=item %LAST_MATCH_START

=item %-
X<%-> X<%LAST_MATCH_START>

Al igual que C<%+>, esta variable permite el acceso a los búferes de captura con nombre en la última coincidencia con éxito en el actual ámbito dinámico activo.  A cada grupo de captura con nombre encontrado en la expresión regular, se le asocia una referencia a un array que contiene la lista de los valores capturados por todos los búferes con ese nombre (deberán existir varios de ellos), en el orden en que aparecen.

Aquí hay un ejemplo:

    if ('1234' =~ /(?<A>1)(?<B>2)(?<A>3)(?<B>4)/) {
        foreach my $nombre (sort keys %-) {
            my $aridad = $-{$nombre};
            foreach my $ind (0..$#$aridad) {
                print "\$-{$nombre}[$ind] : ",
                      (defined($aridad->[$ind])
                          ? "'$aridad->[$ind]'"
                          : "undef"),
                      "\n";
            }
        }
    }

imprime en pantalla:

    $-{A}[0] : '1'
    $-{A}[1] : '3'
    $-{B}[0] : '2'
    $-{B}[1] : '4'

Las claves del hash C<%-> corresponde a todos los nombres de búferes encontrados en la expresión regular.

El comportamiento de C<%-> se proporciona a través del módulo L<Tie::Hash::NamedCapture>.

B<Nota:> C<%-> y C<%+> están atadas en un hash interno común asociado con la última expresión regular exitosa.  Por lo tanto mezclar un acceso iterativo en ellas a través de C<each> puede tener resultados impredecibles.
Del mismo modo, si la última coincidencia exitosa cambia, entonces los resultados pueden ser sorprendentes.

Esta variable se incorporó en Perl 5.10.0.

Esta variable es de solo lectura y su ámbito se asigna dinámicamente.

=item $LAST_REGEXP_CODE_RESULT

=item $^R
X<$^R> X<$LAST_REGEXP_CODE_RESULT>

El resultado de la evaluación de la última aserción de expresión regular C<(?{ código })> exitosa (vea L<perlre>).  Y puede modificarse.

Esta variable se incorporó en Perl 5.005.

=item ${^RE_DEBUG_FLAGS}
X<${^RE_DEBUG_FLAGS}>

El valor actual de los indicadores de depuración de las expresiones regulares.  Se establece en 0 para que no se produzca salida de depuración, incluso aun cuando el módulo C<re 'debug'> esté cargado.  Vea L<re> para más detalles.

Esta variable se incorporó en Perl 5.10.0.

=item ${^RE_TRIE_MAXBUF}
X<${^RE_TRIE_MAXBUF}>

Controla el modo en que se aplican ciertas optimizaciones de expresiones regulares y la cantidad de memoria que utilizan.  Este valor es, por defecto, 65536, que corresponde a una memoria caché temporal de 512 kB.  Ponga esto a un valor más alto para intercambiar memoria por velocidad cuando busque en alternancias de gran tamaño.  Ajústelo a un valor inferior si desea que las optimizaciones sean más conservadores en cuanto a la memoria tanto como sea posible, y póngala a un valor negativo para evitar la optimización y conservar la mayor cantidad de memoria.
En situaciones normales, esta variable no debería tener ningún interés para usted.

Esta variable se incorporó en Perl 5.10.0.

=back

=head2 Variables relacionadas con identificadores de archivo

Puede ajustarse las variables que dependen del identificador de archivo seleccionado actualmente llamando a un método de objeto correspondiente al objeto C<IO::Handle>, aunque esto es menos eficaz que usando las variables predefinidas.  (Para resumir, en las líneas siguientes se usará la palabra IDENTIFICADOR).
En primer lugar, hay que decir

    use IO::Handle;

después de lo cual puede usar cualquiera de estas formas:

    método IDENTIFICADOR EXPR

o de forma más segura,

    IDENTIFICADOR->método(EXPR)

Cada método devuelve el valor anterior del atributo C<IO::Handle>.  Cada uno de los métodos toman una EXPR opcional, que, si es suministrada, especifica el nuevo valor del atributo C<IO::Handle> en cuestión.  Si no se proporciona, la mayor parte de los métodos no hacen nada al valor actual, a excepción de C<autoflush()>, que asumirá que ha escrito un 1, sólo por llevar la contraria.

Debido a que la carga de la clase C<IO::Handle> es una operación costosa, debe aprender a utilizar las habituales variables predefinidas.

Algunas de estas variables se consideran de "sólo lectura".  Esto significa que si se intenta asignar a esta variable, ya sea directa o indirectamente a través de una referencia, se producirá una excepción en tiempo de ejecución.

Debe tener mucho cuidado al modificar los valores por defecto de la mayoría de las variables especiales que se describen en este documento.  En la mayoría de los casos deseará localizar estas variables antes de cambiarlas, ya que si no lo hace, el cambio puede afectar a otros módulos que se basan en los valores predeterminados de las variables especiales que haya cambiado.  Esta es una de las maneras correctas para leer todo un archivo, de una sola vez:

    open my $fh, "<", "foo" or die $!;
    local $/; # activa el modo succionador, localmente
    my $contenido = <$fh>;
    close $fh;

Pero el siguiente código es bastante peor:

    open my $fh, "<", "foo" or die $!;
    undef $/; # activa el modo succionador
    my $contenido = <$fh>;
    close $fh;

desde algún otro módulo, puede querer leer los datos de algún otro archivo en el "modo de línea", que es el predeterminado, así que si se ha ejecutado el código que acabamos de presentar, el valor global de C<$/> ya ha sido cambiado para cualquier otro código que corra dentro del mismo intérprete de Perl.

Por lo general, cuando una variable es localizada, querrá asegurarse de que este cambio afecta al ámbito más pequeño posible.  Así que a menos que ya esté dentro de un bloque pequeño C<{}>, deberá crearlo usted mismo.  Por ejemplo:

    my $contenido = '';
    open my $fh, "<", "foo" or die $!;
    {
	local $/;
	$contenido = <$fh>;
    }
    close $fh;

Aquí hay un ejemplo de cómo puede romper su propio código:

    for ( 1..3 ){
	$\ = "\r\n";
	ruptura_sucia();
	print "$_";
    }

    sub ruptura_sucia {
	$\ = "\f";
	# hacer algo con $_
    }

Probablemente esperará que este código imprima el equivalente a

    "1\r\n2\r\n3\r\n"

pero en vez de eso obtiene:

    "1\f2\f3\f"

¿Por qué? Porque C<ruptura_sucia()> modifica C<$\> sin antes localizarlo.  El valor que estableció en C<ruptura_sucia()> sigue estando allí cuando regresa.  La solución es añadir C<local()> por lo que el valor no se escapa de C<ruptura_sucia()>:

    local $\ = "\f";

Es fácil advertir el problema en un ejemplo tan pequeño, pero en un código más complejo se encontrará con problemas si no localiza los cambios en las variables especiales.

=over 8

=item $ARGV
X<$ARGV>

Contiene el nombre del archivo actual, cuando se lee con C<< <> >>.

=item @ARGV
X<@ARGV>

El array C<@ARGV> contiene los argumentos de la línea de comandos que se pasaron al script.  C<$#ARGV> es, generalmente, el número de argumentos menos uno, debido a que C<$ARGV[0]> es el primer argumento, I<no> es el nombre del propio programa.  Vea L</$0> para obtener el nombre del comando.

=item ARGV
X<ARGV>

Es el identificador de archivo especial que itera sobre los nombres de archivos de la línea de comandos en C<@ARGV>.  Por lo general, escrito como el identificador de archivo nulo con el operador de ángulo C<< <> >>.  Tenga en cuenta que en la actualidad C<ARGV> sólo tiene su efecto mágico con el operador C<< <> >>; en otras situaciones es sólo un identificador de archivo simple correspondiente al último archivo abierto por C<< <> >>.  Dicho sea de paso, pasar C<\*ARGV> como un parámetro a una función que espera un identificador de archivo, no hace que pueda conseguir que su función pueda leer de forma automática el contenido de todos los archivos que están en C<@ARGV>.

=item ARGVOUT
X<ARGVOUT>

Es el identificador de archivo especial que apunta al archivo de salida actual abierto al hacer edición in-situ al procesarlo con B<-i>.  Es útil cuando tiene que hacer un montón de inserciones y no quiere seguir modificando C<$_>.  Consulte L<perlrun> para ver la opción B<-i>.

=item IO::Handle->output_field_separator( EXPR )

=item $OUTPUT_FIELD_SEPARATOR

=item $OFS

=item $,
X<$,> X<$OFS> X<$OUTPUT_FIELD_SEPARATOR>

El separador de campos a la salida para el operador print.  Si se define, este valor se imprime entre cada uno de los argumentos de print.  El valor predeterminado C<undef>.

No puede llamar a C<output_field_separator()> en un identificador, sólo como método estático.  Vea L<IO::Handle|IO::Handle>.

Mnemónico: lo que se imprime cuando hay un "," en su instrucción print.

=item IDENTIFICADOR->input_line_number( EXPR )

=item $INPUT_LINE_NUMBER

=item $NR

=item $.
X<$.> X<$NR> X<$INPUT_LINE_NUMBER> X<line number> X<número de línea>

Número de línea actual para el identificador de archivo accedido por última vez.

Cada identificador de archivo en Perl cuenta el número de líneas que se han leído de él.  (Dependiendo del valor de C<$/>, la idea de Perl de lo que constituye una línea puede que no coincida con la suya).  Cuando una línea se lee desde un identificador de archivo (a través de C<readline()> o C<< <> >>), o cuando se llama a C<tell()> o C<seek()>, C<$.> se convierte en un alias para el contador de líneas para el identificador de archivo.

Se puede ajustar el contador mediante la asignación a C<$.>, pero esto realmente no moverá el puntero de búsqueda.  I<Localizar C<$.> no localizará el contador de líneas del identificador de archivo>.  En su lugar, se localizará la noción de perl del identificador de archivo al que C<$.> está referenciando.

C<$.> se reinicia cuando el identificador de archivo se cierra, pero B<no> cuando un identificador de archivo abierto se reabre sin intervención de C<close()>.  Para más detalles, vea L<perlop/"Operadores E/S">.  Debido a que C<< <> >> nunca hace un cierre explícito, los números de línea aumentan a lo largo de los archivos C<ARGV> (pero vea los ejemplos en L<perlfunc/eof>).

También puede utilizar C<< IDENTIFICADOR->input_line_number(EXPR) >> para acceder al contador de líneas de un identificador de archivo determinado sin tener que preocuparse con qué identificador accedió por última vez.

Mnemónico: muchos programas usan "." como el actual número de línea.

=item IO::Handle->input_record_separator( EXPR )

=item $INPUT_RECORD_SEPARATOR

=item $RS

=item $/
X<$/> X<$RS> X<$INPUT_RECORD_SEPARATOR>

El separador de registros a la entrada; de forma predeterminada, los caracteres que forman la nueva línea.  Esto influye en la idea que tiene Perl de lo que es una "línea".  Funciona como la variable RS del B<awk>, incluyendo el tratamiento de líneas en blanco como un terminador si se establece a la cadena nula (una línea en blanco no puede contener espacios en blanco o tabuladores).  Puede ponerle una cadena con varios caracteres para que coincida con un terminador de múltiples caracteres, o un C<undef> para leer todo hasta al final del archivo.  Si se establece a C<"\n\n"> significa algo ligeramente diferente que si se establece a C<"">, si el archivo contiene líneas en blanco consecutivas.  Si se establece a C<""> tratará a dos o más líneas consecutivas vacías como una sola línea en blanco.  Si se establece a C<"\n\n"> asumirá ciegamente que el siguiente carácter de entrada pertenece al párrafo siguiente, incluso si se trata de un carácter de nueva línea.

    local $/;           # activa el modo aspiradora
    local $_ = <FH>;    # obtendremos aquí todo el archivo
    s/\n[ \t]+/ /g;

Recuerde: el valor de C<$/> es una cadena, no una expresión regular.  Por algo B<awk> tenía que ser mejor. :-) 

Estableciendo C<$/> a una referencia a un número entero, o un escalar conteniendo un número entero, o un escalar que es convertible a un número entero, intentará leer registros en lugar de líneas, siendo el tamaño máximo del registro el referenciado número entero de caracteres.  Así que esto:

    local $/ = \32768; # o \"32768", o \$var_conteniendo_32768
    open my $fh, "<", $miarchivo or die $!;
    local $_ = <$fh>;

leerá un registro de no más de 32768 caracteres desde $fh.  Si no está leyendo un archivo orientado a registros (o su sistema operativo no tiene archivos orientados a registros), entonces lo más probable es que obtenga una porción completa de los datos con cada lectura.  Si un registro es mayor que el tamaño del registro que ha establecido, obtendrá ese registro en pedazos.  Tratar de establecer el tamaño del registro a cero o menor es obsoleto y hará que $/ tenga el valor "undef", que hará que se lea (el resto de) todo el archivo.

A partir de 5.19.9, establecer C<$/> a cualquier otra forma de referencia levantará una excepción fatal. Esto es una preparación para soportar nuevas maneras de establecer C<$/> en el futuro.

Solo en VMS, el registro pasa por alto las capas PerlIO y cualquier búfer asociado, por lo que no debe mezclar las lecturas de registros y no registros con el mismo identificador de archivos.  El modo de acceso por registro se puede mezclar con el modo línea sólo cuando la capa de almacenamiento en búfer está en uso para ambos modos.

No puede llamar a C<input_field_separator()> en un identificador, sólo como método estático.  Vea L<IO::Handle|IO::Handle>.

Vea también L<perlport/"Caracteres de nueva línea">.  Consulte también L</$.>.

Mnemónico: / delimita límites de línea cuando se cita poesía.

=item IO::Handle->output_record_separator( EXPR )

=item $OUTPUT_RECORD_SEPARATOR

=item $ORS

=item $\
X<$\> X<$ORS> X<$OUTPUT_RECORD_SEPARATOR>

El separador de registros a la salida para el operador print.  Si se define, este valor se imprime después del último argumento de print.  El valor predeterminado C<undef>.

No puede llamar a C<output_record_separator()> en un identificador, sólo como método estático.  Vea L<IO::Handle|IO::Handle>.

Mnemónico: establece C<$\> en lugar de añadir "\n" al final del print.
Además, es igual que C<$/>, pero es lo que obtiene "de vuelta" desde Perl.

=item IDENTIFICADOR->autoflush( EXPR )

=item $OUTPUT_AUTOFLUSH

=item $|
X<$|> X<autoflush> X<flush> X<$OUTPUT_AUTOFLUSH>

Si se establece a un valor distinto de cero, obliga a un vaciado del búfer después de cada escritura o impresión en el actual canal de salida seleccionado.  El valor predeterminado es 0 (sin importar si el canal está realmente usando un búfer en el sistema o no; C<$|> indica solamente que le está pidiendo explícitamente a Perl que haga el vaciado después de cada escritura).  STDOUT will typically be line buffered if
output is to the terminal and block buffered otherwise.  Establecer esta variable es útil sobre todo cuando se imprime a una tubería o I<socket>, como cuando se está ejecutando un programa de Perl bajo B<rsh> y quiere ver el resultado tal cual está sucediendo.  No tiene ningún efecto sobre los búferes de entrada.  Vea L<perlfunc/getc> para eso.  Vea L<perlfunc/select> sobre la forma de seleccionar el canal de salida.  Vea también L<IO::Handle>.

Mnemónico: cuando quiere que las tuberías se calienten.

=item ${^LAST_FH}
X<${^LAST_FH}>

Esto variable de sólo lectura contiene una referencia al último identificador de archivo usado en lectura.
Se establece con C<< <HANDLE> >>, C<readline>, C<tell>, C<eof> y C<seek>.
Es el mismo identificador que usan C<$.>, C<tell> y C<eof> si no se les pasa ningún argumento.  Es también el identificador que se usa cuando Perl añade ", <STDIN> line 1" a un mensaje de error o advertencia.

Esta variable se incorporó en Perl 5.18.0.

=back

=head3 Variables relacionadas con formatos

Las variables especiales para formatos son un subconjunto de los identificadores de archivo.  Vea L<perlform> para obtener más información acerca de los formatos de Perl.

=over 8

=item $ACCUMULATOR

=item $^A
X<$^A> X<$ACCUMULATOR>

El valor actual del acumulador C<write()> para las líneas C<format()>.
Un formato contiene llamadas C<formline()> que ponen su resultado en C<$^A>.  Después de llamar a su formato, C<write()> imprime el contenido de C<$^A> y se vacía.  Así que nunca, realmente, va a ver el contenido de C<$^A> a menos que llame a C<formline()> usted mismo y mire dentro de él.  Vea L<perlform> y L<perlfunc/"formline FORMA,LISTA">.

=item IO::Handle->format_formfeed(EXPR)

=item $FORMAT_FORMFEED

=item $^L
X<$^L> X<$FORMAT_FORMFEED>

Qué es lo que sacan los formatos como avance de página.  El valor por defecto es C<\f>.

No puede llamar a C<format_formfeed()> en un identificador, sólo como método estático.  Vea L<IO::Handle|IO::Handle>.

=item IDENTIFICADOR->format_page_number(EXPR)

=item $FORMAT_PAGE_NUMBER

=item $%
X<$%> X<$FORMAT_PAGE_NUMBER>

El número de la página actual del actual canal de salida seleccionado.

Mnemónico: C<%> es el número de página en B<nroff>.

=item IDENTIFICADOR->format_lines_left(EXPR)

=item $FORMAT_LINES_LEFT

=item $-
X<$-> X<$FORMAT_LINES_LEFT>

El número de líneas que quedan en la página del actual canal de salida seleccionado.

Mnemónico: líneas_en_la_página - líneas_impresas.

=item IO::Handle->format_line_break_characters EXPR

=item $FORMAT_LINE_BREAK_CHARACTERS

=item $:
X<$:> X<FORMAT_LINE_BREAK_CHARACTERS>

El actual conjunto de caracteres después del cual puede una cadena ser partida para llenar los campos de continuación (comenzando con C<^>) en un formato.  El valor predeterminado es S<" \n-">, para partir por un espacio, nueva línea o un guión.

No puede llamar a C<format_line_break_characters()> en un identificador, sólo como método estático.  Vea L<IO::Handle|IO::Handle>.

Mnemónico: un "dos puntos" en poesía es una parte de una línea.

=item IDENTIFICADOR->format_lines_per_page(EXPR)

=item $FORMAT_LINES_PER_PAGE

=item $=
X<$=> X<$FORMAT_LINES_PER_PAGE>

La longitud de la página actual (líneas imprimibles) del actual canal de salida seleccionado.  El valor por defecto es 60.

Mnemónico: = tiene líneas horizontales.

=item IDENTIFICADOR->format_top_name(EXPR)

=item $FORMAT_TOP_NAME

=item $^
X<$^> X<$FORMAT_TOP_NAME>

El nombre del actual formato de la cabecera de página para el actual canal de salida seleccionado.  El valor predeterminado es el nombre del identificador de archivo con C<_TOP> agregado.  Por ejemplo, el nombre del formato predeterminado de la cabecera para el identificador de archivos C<STDOUT> es C<STDOUT_TOP>.

Mnemónico: apunta a la cabecera de la página.

=item IDENTIFICADOR->format_name(EXPR)

=item $FORMAT_NAME

=item $~
X<$~> X<$FORMAT_NAME>

El nombre del actual formato de informe para el actual canal de salida seleccionado.  El nombre predeterminado del formato es el mismo que el del identificador de archivo.  Por ejemplo, el nombre del formato predeterminado para el identificador de archivos C<STDOUT> es C<STDOUT>.

Mnemónico: hermano de C<$^>.

=back

=head2 Variables de errores
X<error> X<exception> X<excepción>

Las variables C<$@>, C<$!>, C<$^E> y C<$?> contienen información sobre los diferentes tipos de condiciones de error que pueden aparecer al ejecutar un programa Perl.  Las variables se muestran ordenadas por la "distancia" entre el subsistema que informó del error y el proceso de Perl.  Corresponden a los errores detectados por el intérprete de Perl, biblioteca C, sistema operativo o un programa externo, respectivamente.

Para ilustrar las diferencias entre estas variables, considere la siguiente expresión Perl, que utiliza una cadena con entrecomillado simple.  Después de la ejecución de esta instrucción, perl puede haber establecido las cuatro variables especiales de error:

    eval q{
	open my $tuberia, "/cdrom/install |" or die $!;
	my @res = <$tuberia>;
	close $tuberia or die "mala tuberia: $?, $!";
    };

Cuando perl ejecuta la expresión C<eval()>, traduce las llamadas C<open()>, C<< <PIPE> >> y C<close> en la biblioteca C en tiempo de ejecución y de allí al núcleo del sistema operativo.  perl asigna C<$!> al valor de C<errno> de la biblioteca de C si al menos una de estas llamadas falla.

C<$@> recibe un valor si la cadena a ser C<eval>-uada no se compila (esto puede suceder si C<open> o C<close> fueron importados con prototipos defectuosos), o si el código ejecutado por Perl muere (C<die()>).  En estos casos, el valor de C<$@> es el error de compilación, o el argumento a C<die> (que será interpolado en C<$!> y C<$?>).  (Sin embargo, vea también L<Fatal>).

En unos pocos sistemas operativos, C<$^E> puede contener un indicador más detallado del error, como en este caso, "la bandeja del CDROM no está cerrada". Los sistemas que no admiten mensajes de error extendidos dejan C<$^E> al mismo valor que C<$!>.

Finalmente, C<$?> se puede establecer a un valor no cero si el programa externo F</cdrom/install> falla.  Los ocho bits superiores reflejan las condiciones específicas del error encontradas por el programa (el valor de C<exit()> del programa).
Los ocho bits más bajos reflejan el modo de fallo, como la señal de la muerte y la información del volcado del núcleo.  Vea L<wait(2)> para más detalles.  A diferencia de C<$!> y C<$^E>, que sólo se establecen si se detecta una condición de error, la variable C<$?> se establece en cada C<wait> o tubería cerrada (C<close>), reemplazando el valor anterior.  Esto es más como C<$@>, que en cada C<eval()> siempre se establece en caso de fallo y se vacía en caso de éxito.

Para obtener más detalles, consulte las descripciones individuales en C<$@>, C<$!>, C<$^E> y C<$?>.

=over 8

=item ${^CHILD_ERROR_NATIVE}
X<$^CHILD_ERROR_NATIVE>

El estado nativo devuelto por la última tubería cerrada, acento grave (C<``>) de comandos, llamada con éxito a C<wait()> o C<waitpid()>, o del operador C<system()>.  En sistemas tipo POSIX este valor puede ser decodificado con las funciones WEXITSTATUS, WIFEXITED, WIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG, y WIFCONTINUED proporcionadas por el módulo L<POSIX>.

Bajo VMS esto refleja el estado real de la salida VMS; es decir, es lo mismo que C<$?> cuando está en vigor el pragma C<use vmsish 'status'>.

Esta variable se incorporó en Perl 5.10.0.

=item $EXTENDED_OS_ERROR

=item $^E
X<$^E> X<$EXTENDED_OS_ERROR>

Información específica de error del actual sistema operativo.  Por el momento, esta se diferencia de C<$!> solo bajo VMS, OS/2 y Win32 (y para MacPerl).  En todas las demás plataformas, C<$^E> es siempre lo mismo que C<$!>.

Bajo VMS, C<$^E> proporciona el valor de estado VMS del último error del sistema.  Esta es una información más específica sobre el último error del sistema que la proporcionada por C<$!>.  Esto es particularmente importante cuando C<$!> se establece a B<EVMSERR>.

Bajo OS/2, C<$^E> se establece al código de error de la última llamada a la API de OS/2, ya sea a través de CRT, o directamente desde perl.

Bajo Win32, C<$^E> siempre devuelve la información del último de error reportado por la llamada Win32 C<GetLastError()> que describe el último error que viene del interior de la API de Win32.  La mayoría del código específico de Win32 informará de errores a través de C<$^E>.  ANSI C y llamadas parecidas a Unix asignan valores a C<errno> y así la mayor parte del código Perl portátil informará de errores a través de C<$!>.

Las advertencias mencionadas en la descripción de C<$!> se aplican también, por lo general, a C<$^E>.

Esta variable se incorporó en Perl 5.003.

Mnemónico: Explicación extra del error.

=item $EXCEPTIONS_BEING_CAUGHT

=item $^S
X<$^S> X<$EXCEPTIONS_BEING_CAUGHT>

Estado actual del intérprete.

	$^S         Estado
	---------   -------------------------------------
	undef            Interpretando un módulo, eval, o programa principal
	verdadero (1)    Ejecutando un eval()
	falso (0)        Cualquier otra cosa

El primer estado puede aparecer en los controladores C<$SIG{__DIE__}> y C<$SIG{__WARN__}>.

El nombre en inglés $EXCEPTIONS_BEING_CAUGHT es ligeramente engañoso, porque el valor C<undef> no indica si las excepciones están siendo capturadas, ya que la compilación del programa principal no captura excepciones.

Esta variable se incorporó en Perl 5.004.

=item $WARNING

=item $^W
X<$^W> X<$WARNING>

El valor actual de la opción sobre la emisión de advertencias, inicialmente verdadero si se usó B<-w>, falso en caso contrario, pero modificable directamente.

Vea también L<warnings>.

Mnemónico: relacionado con la opción B<-w>.

=item ${^WARNING_BITS}
X<${^WARNING_BITS}>

El conjunto actual de los controles de advertencia activados por el pragma C<use warnings>.
Tiene el mismo alcance léxico que las variables C<$^H> y C<%^H>.  Los valores exactos se consideran internos al pragma L<warnings> y puede cambiar entre versiones de Perl.

Esta variable se incorporó en Perl 5.6.0.

=item $OS_ERROR

=item $ERRNO

=item $!
X<$!> X<$ERRNO> X<$OS_ERROR>

Cuando se hace referencia a ella, C<$!> recupera el valor actual de la variable entera C<errno>.
Si se le asigna un valor numérico, el valor es almacenado en C<errno>.
Cuando se hace referencia como una cadena, C<$!> devuelve la cadena de error del sistema correspondiente a C<errno>.

Muchas llamadas del sistema o de biblioteca asignan un valor a C<errno> en caso de fallo, para indicar la causa de ese fallo.  Por lo general, B<no> ponen C<errno> a cero en caso de éxito.  Esto significa que C<errno>, que es C<$!>, sólo tiene sentido I<inmediatamente> después de un B<fallo>:

    if (open my $fh, "<", $archivo) {
		# Aquí, $! no tiene sentido.
		...
    }
    else {
		# SÓLO aquí $! tiene sentido.
		...
		# Realmente, aquí $! podría no tener sentido.
    }
    # Desde aquí puede ser que tengamos éxito o fracaso,
    # $! no tiene sentido.

Aquí, I<no tiene sentido> significa que C<$!> puede no tener relación con lo sucedido con el operador C<open()>.  La asignación a C<$!> es igualmente efímera.
Se puede utilizar inmediatamente antes de invocar al operador C<die()>, para ajustar el valor de salida, o para inspeccionar la cadena de error del sistema correspondiente al error I<n>, o para restaurar C<$!> a un estado más significativo.

Mnemónico: ¿Cómo terminó el 'bang'?

=item %OS_ERROR

=item %ERRNO

=item %!
X<%!> X<%OS_ERROR> X<%ERRNO>

Cada elemento de C<%!> tiene un valor verdadero sólo si C<$!> se ajusta a ese valor.  Por ejemplo, C<$!{ENOENT}> es verdadero si y sólo si el valor actual de C<$!> es C<ENOENT>, es decir, si el error más reciente fue "No existe el archivo o directorio" (o su equivalente moral: no todos los sistemas operativos dan exactamente este error, y ciertamente, no en todos los idiomas).  Para comprobar si una clave particular es significativa en su sistema, utilice C<exists $!{la_clave}>; para obtener una lista de las claves legales, utilice C<keys %!>.  Vea L<Errno> para más información, y también vea L</$!>.

Esta variable se incorporó en Perl 5.005.

=item $CHILD_ERROR

=item $?
X<$?> X<$CHILD_ERROR>

El estado devuelto por la última tubería cerrada, comando acento grave (C<``>), llamada con éxito a C<wait()> o C<waitpid()>, o desde el operador C<system()>.  Esto es sólo la palabra de estado de 16 bits devuelta por la tradicional llamada del sistema Unix C<wait()> (o de la que se parezca a ella).  Así, el valor de salida del subproceso es realmente (C<<< $? >>
8 >>>), y C<$? & 127> devuelve qué señal, si hay alguna, por el que el proceso murió, y C<$? & 128> informa que se ha producido un volcado del núcleo.

Además, si la variable C<h_errno> está soportada en C, su valor se devuelve a través de C<$?> si falla alguna función C<gethost*()>.

Si ha instalado algún controlador de señales para C<SIGCHLD>, el valor de C<$?> será, generalmente, incorrecto, fuera de ese controlador.

Dentro de una subrutina C<END> C<$?> contiene el valor que se le va a dar a C<exit()>.  Puede modificar C<$?> en una subrutina C<END> para cambiar el estado de salida de su programa.  Por ejemplo:

    END {
	$? = 1 if $? == 255;  # die lo tendría en 255
    }

Bajo VMS, el pragma C<use vmsish 'status'> hace que C<$?> refleje el estado real de la salida VMS, en lugar de la emulación predeterminada del estado POSIX; vea L<perlvms/$?> para más detalles.

Mnemónico: lo mismo que en B<sh> y B<ksh>.

=item $EVAL_ERROR

=item $@
X<$@> X<$EVAL_ERROR>

El mensaje de error de sintaxis de Perl en el último operador C<eval()>.  Si C<$@> es la cadena vacía, el último C<eval()> fue analizado y ejecutado correctamente (aunque las operaciones que haya invocado pueden haber fallado de forma normal).

Los mensajes de advertencia no son almacenados en esta variable.  Puede, sin embargo, establecer una rutina para procesar las advertencias estableciendo C<$SIG{__WARN__}> tal como se describe en L</%SIG>.

Mnemónico: ¿"@"(En) dónde se encontraba el error de sintaxis?

=back

=head2 Variables relacionadas con el estado del intérprete

Estas variables proporcionan información sobre el estado actual del intérprete.

=over 8

=item $COMPILING

=item $^C
X<$^C> X<$COMPILING>

El valor actual del indicador asociado con la opción B<-c>.
Su uso principal es con B<-MO=...> para permitir al código alterar su comportamiento cuando se compila, tal como por ejemplo hace C<AUTOLOAD> en tiempo de compilación, en lugar de lo más normal, después de cargarse.  Haciendo C<$^C = 1> es similar a llamar a C<B::minus_c>.

Esta variable se incorporó en Perl 5.6.0.

=item $DEBUGGING

=item $^D
X<$^D> X<$DEBUGGING>

El valor actual de los indicadores de depuración.  Puede ser leído o modificado.  Como su equivalente de la línea de comandos, puede usar los valores numéricos o los simbólicos, p. ej. C<$^D = 10> o C<$^D = "st">.

Mnemónico: valor de la opción B<-D>.

=item ${^ENCODING}
X<${^ENCODING}>

¡¡¡OBSOLETO!!!

La I<referencia de objecto> al objeto C<Encode> que se ha utilizado para convertir el código fuente a Unicode.  Gracias a este variable su script Perl no tiene por qué estar escrito en UTF-8.  El valor predeterminado C<undef>.

Poner esta variable a cualquier otro valor que C<undef> es obsoleto debido a defectos fundamentales en su diseño e implementación.  Se ha planeado eliminarlo en una futura versión de Perl.  Su propósito era permitir a sus I<scripts> Perl no-ASCII, no tener que escribirse en UTF-8; esto era útil antes de que fueran comunes los editores que trabajan con texto codificado en UTF-8, pero de esto hace ya mucho tiempo.  Causa problemas, como afectar inesperadamente a la operación de otros módulos, provocando un fallo general.  Su uso puede provocar fallos de segmentación.

Si necesita algo como esta funcionalidad, debe utilizar el pragma L<encoding>, que también es obsoleto, pero con unos pocos efectos desagradables.

Si ha llegado hasta aquí porque su código está siendo adversamente afectado por el uso por parte de alguien de esta variable, normalmente puede solventarlo haciendo esto:

 local ${^ENCODING};

delante de las funciones que se están rompiendo.  Esto lo que hace es indefinir la variable en el ámbito de la ejecución de las funciones incluidas en ese ámbito.

Esta variable se incorporó en Perl 5.8.2.

=item ${^GLOBAL_PHASE}
X<${^GLOBAL_PHASE}>

La fase actual en que se encuentra el intérprete perl.

Los valores posibles son:

=over 8

=item CONSTRUCT

El C<PerlInterpreter*> se ha construido a través de C<perl_construct>.  Este valor está aquí principalmente para complementar y para uso a través de la variable subyacente de C C<PL_phase>.  No es realmente posible ser ejecutado el código Perl a no ser que la construcción del intérprete esté terminada.

=item START

Este es el tiempo de compilación completo.  Eso incluye, básicamente, cada bloque C<BEGIN> ejecutado directamente o indirectamente durante el tiempo de compilación del nivel superior del programa.

A esta fase no se le llama "BEGIN" para evitar confusión con los bloques C<BEGIN>, ya que se ejecutan durante el tiempo de compilación de cualquier unidad de compilación, no solo en el nivel superior del programa.  Un nuevo tiempo de compilación local, que haya entrado en tiempo de ejecución, por ejemplo por construcciones como C<eval "use SomeModule">, no son fases globales del intérprete, y por tanto no quedan reflejadas en C<${^GLOBAL_PHASE}>.

=item CHECK

Ejecución de cualquier bloque C<CHECK>.

=item INIT

Similar a "CHECK", pero para bloques C<INIT>, no bloques C<CHECK>.

=item RUN

El principal tiempo de ejecución, es decir, la ejecución de C<PL_main_root>.

=item END

Ejecución de cualquier bloque C<END>.

=item DESTRUCT

Destrucción global.

=back

Note también que no hay ningún valor para los bloques UNITCHECK.  Es porque se ejecutan en cada unidad de compilación de forma individual, y por tanto no es una fase global del intérprete.

No todos los programa tienen que pasar por todas las fases posibles, pero la transición de una fase a otra sólo puede suceder en el orden descrito en la lista anterior.

Puede ver un ejemplo de todas las fases del código Perl:

    BEGIN { print "tiempo de compilación: ${^GLOBAL_PHASE}\n" }

    INIT  { print "tiempo de inicialización: ${^GLOBAL_PHASE}\n" }

    CHECK { print "tiempo de comprobación: ${^GLOBAL_PHASE}\n" }

    {
        package Print::Phase;

        sub new {
            my ($clase, $hora) = @_;
            return bless \$hora, $clase;
        }

        sub DESTROY {
            my $self = shift;
            print "$$self: ${^GLOBAL_PHASE}\n";
        }
    }

    print "tiempo de ejecución: ${^GLOBAL_PHASE}\n";

    my $runtime = Print::Phase->new(
        "las variables léxicas son tiradas a la basura antes del END"
    );

    END   { print "tiempo de finalización: ${^GLOBAL_PHASE}\n" }

    our $destructor = Print::Phase->new(
        "las variables del paquete son tiradas a la basura después del END"
    );

Esto imprimirá

    tiempo de compilación: START
    tiempo de comprobación: CHECK
    tiempo de inicialización: INIT
    tiempo de ejecución: RUN
    las variables léxicas son tiradas a la basura antes del END: RUN
    tiempo de finalización: END
    las variables del paquete son tiradas a la basura después del END: DESTRUCT

Esta variable se añadió en Perl 5.14.0.

=item $^H
X<$^H>

AVISO: Esta variable es estrictamente sólo para uso interno.  Su disponibilidad, comportamiento, y contenidos, están sujetos a cambios sin previo aviso.

Esta variable contiene pistas en tiempo de compilación para el intérprete de Perl.  Al final de la compilación de un BLOQUE el valor de esta variable se restaura al valor que tenía cuando el intérprete comenzó a compilar el BLOQUE.

Cuándo perl empieza a analizar cualquier construcción de bloque que proporciona un ámbito léxico (por ejemplo, un cuerpo eval, archivo requerido, cuerpo de subrutina, cuerpo de bucle, o bloque condicional), el valor actual de C<$^H> se salva, pero su valor queda sin cambios.
Cuándo se ha completado la compilación del bloque, se recupera el valor salvado.
Entre los puntos donde su valor se salva y restaura, el código que se ejecuta dentro de los bloques BEGIN es libre de cambiar el valor de C<$^H>.

Este comportamiento proporciona la semántica del ámbito léxico, y se utiliza en, por ejemplo, el pragma C<use strict>.

Los contenidos tendrían que ser un entero; bits diferentes de él se utilizan para diferentes indicadores pragmáticos.  Aquí hay un ejemplo:

    sub add_100 { $^H |= 0x100 }

    sub foo {
	BEGIN { add_100() }
	bar->baz($boon);
    }

Considere qué pasa durante la ejecución del bloque BEGIN.  Al llegar a este punto el bloque BEGIN ya se ha compilado, pero el cuerpo de C<foo()> todavía se está compilando.  El nuevo valor de C<$^H> será por tanto visible sólo mientras el cuerpo de C<foo()> se está compilando.

La sustitución del bloque C<BEGIN { add_100() }> por:

    BEGIN { require strict; strict->import('vars') }

demuestra cómo está implementado C<use strict 'vars'>.  Aquí hay una versión condicional del mismo pragma léxico:

    BEGIN {
	require strict; strict->import('vars') if $condicion
    }

Esta variable se incorporó en Perl 5.003.

=item %^H
X<%^H>

El hash C<%^H> proporciona el mismo ámbito semántico que C<$^H>.  Esto lo hace útil para la implementación de pragmas en ámbito léxico.  Vea L<perlpragma>.   Todas las entradas se convierten a cadenas cuando son accedidas en tiempo de ejecución, por lo que solo se almacenan valores sencillos.  Quiere decir que no se admiten punteros a objetos, por ejemplo.

Al poner elementos en C<%^H>, para evitar conflictos con otros usuarios del hash hay una convención con respecto a qué llaves usar.
Un módulo tendría que utilizar llaves únicas que empiecen con el nombre del módulo (el nombre de su paquete principal) y un carácter "/".  Por ejemplo, un módulo C<Foo::Bar> tendría que utilizar llaves como C<Foo::Bar/baz>.

Esta variable se incorporó en Perl 5.6.0.

=item ${^OPEN}
X<${^OPEN}>

Una variable interna utilizada por PerlIO.  Una cadena en dos partes, separadas por un byte C<\0>, la primera parte describe las capas de entrada, la segunda parte describe las capas de salida.

Esta variable se incorporó en Perl 5.8.0.

=item $PERLDB

=item $^P
X<$^P> X<$PERLDB>

La variable interna para soporte de depuración.  Los significados de los diversos bits están sujetos a cambios, pero actualmente indican:

=over 6

=item 0x01

Depurar a la entrada/salida de una subrutina.

=item 0x02

Depuración línea a línea.  Hace que la subrutina C<DB::DB()> sea llamada por cada instrucción ejecutada.  También hace que se almacenen las líneas del código fuente (como 0x400).

=item 0x04

Desactivar las optimizaciones.

=item 0x08

Preservar más datos para futuras inspecciones interactivas.

=item 0x10

Mantiene información sobre las líneas del código fuente en las que una subrutina está definida.

=item 0x20

Start with single-step on.

=item 0x40

Al informar, usar la dirección de una subrutina en lugar del nombre.

=item 0x80

Informar también de C<goto &subroutine>.

=item 0x100

Proporciona nombres de "archivo" informativos para los eval basados en el lugar donde se compilaron.

=item 0x200

Proporciona nombres informativos para las subrutinas anónimas basados en el lugar donde se compilaron.

=item 0x400

Guarda líneas del código fuente en C<@{"_<$nombrearchivo"}>.

=item 0x800

Cuando guarda código fuente, incluye los eval que no generen subrutinas.

=item 0x1000

Cuando guarda código fuente, incluye el código que no compiló.

=back

Algunos bits pueden ser pertinentes sólo en tiempo de compilación, algunos sólo en tiempo de ejecución.  Esto es un nuevo mecanismo y los detalles pueden cambiar.
Vea también L<perldebguts>.

=item ${^TAINT}
X<${^TAINT}>

Refleja si el modo contaminación está activo o no.  1 para activado (el programa fue ejecutado con B<-T>), 0 para desactivado, -1 cuando sólo están activados los avisos de contaminación (es decir, con B<-t> o B<-TU>).

Esta variable es de solo lectura.

Esta variable se incorporó en Perl 5.8.0.

=item ${^UNICODE}
X<${^UNICODE}>

Refleja ciertos configuraciones Unicode de Perl.  Vea la documentación en L<perlrun> sobre la opción C<-C> para más información sobre los posibles valores que puede tener.

Esta variable se inicializa durante el arranque de Perl y después es de solo lectura.

Esta variable se incorporó en Perl 5.8.2.

=item ${^UTF8CACHE}
X<${^UTF8CACHE}>

Esta variable controla el estado del código de cacheo de desplazamiento UTF-8 interno.
1 para activado (el valor predeterminado), 0 para desactivado, -1 para depurar el código de cacheo comprobando todos sus resultados contra exploraciones lineales, y entrando en pánico con cualquier discrepancia.

Esta variable se incorporó en Perl 5.8.9.  Está sujeto a cambio o eliminación sin previo aviso, pero actualmente se usa para evitar recalcular los límites de los caracteres multi-byte codificados en UTF-8.

=item ${^UTF8LOCALE}
X<${^UTF8LOCALE}>

Esta variable indica si perl detectó una configuración regional UTF-8 en el arranque.  Esta información la utiliza perl cuando está en modo ajustar-utf8-a-modo-regional (como cuando corre con la opción C<-CL>); vea L<perlrun> para más información sobre todo esto.

Esta variable se incorporó en Perl 5.8.8.

=back

=head2 Variables obsoletas y eliminadas

Marcar una variable como obsoleta anuncia el intento de los mantenedores de perl de, eventualmente, eliminar la variable del lenguaje.  Todavía pueda estar disponible a pesar de su estatus.  Usar una variable obsoleta provoca un aviso.

Una vez que una variable se elimine, su uso provoca un error que le dice que la variable no está soportada.

Vea L<perldiag> para detalles sobre los mensajes de error.

=over 8

=item $#
X<$#>

C<$#> era una variable que podía ser utilizada para formatear números impresos.
Después de un ciclo de obsolescencia, su magia se eliminó en Perl 5.10.0 y usarla ahora dispara una advertencia: C<$# is no longer supported> (C<$# ya no se soporta>).

Este no es el sigilo que se utiliza delante de un nombre de array para obtener el último índice, como C<$#array>.  Sigue siendo la forma en que se obtiene el último índice de un array en Perl.  No tienen nada que ver el uno con el otro.

Declarada obsoleta en Perl 5.

Retirada en Perl 5.10.0.

=item $*
X<$*>

C<$*> era una variable que podría ser utilizada para habilitar concordancia multilínea.
Después de un ciclo de obsolescencia, su magia se eliminó en Perl 5.10.0.
Usarla ahora dispara un aviso: C<$* is no longer supported> (C<$* ya no está soportada>). 
En su lugar debe usar los modificadores de exp. reg. C</s> y C</m>.

Declarada obsoleta en Perl 5.

Retirada en Perl 5.10.0.

=item $[
X<$[>

Esta variable almacena el índice del primer elemento en un array, y el primer carácter en una subcadena.  El valor predeterminado es 0, pero podría teóricamente ser puesto a 1 para hacer que Perl se comporte más como B<awk> (o Fortran) cuándo se extraen subcadenas y cuando se evalúan las funciones index() y substr().

Con la publicación de Perl 5, las asignaciones a C<$[> se trataban como directivas de compilación, y no podían influir en el comportamiento de cualquier otro archivo.
(Es por eso que sólo se le pueden asignar constantes en tiempo de compilación).
Su uso está sumamente desaconsejado.

Con anterioridad a Perl 5.10.0, la asignación a C<$[> podría ser vista desde ámbitos léxicos externos en el mismo archivo, a diferencia de otras directivas en tiempo de compilación (como L<strict>).  Utilizando local() en ella uniría su valor estrictamente a un bloque léxico.  Ahora tiene siempre un ámbito léxico.

A partir de Perl 5.16.0, se implementa por el módulo C<arybase>.  Vea L<arybase> para más detalles sobre su comportamiento.

Bajo C<use v5.16>, o C<no feature "array_base">, C<$[> ya no tiene ningún efecto, y siempre contiene 0.  Asignarle un 0 está permitido, pero cualquier otro valor producirá un error.

Mnemónico: [ prefija los subrangos.

Declarada obsoleta en Perl 5.12.0.

=back

=cut
